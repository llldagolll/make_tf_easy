{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { makeCamelCaseArray, makeCamelCase } from './Utils';\n\nfunction getBoundingBox(geometry) {\n  if (!geometry) return undefined;\n  return makeCamelCase(geometry.BoundingBox);\n}\n\nfunction getPolygon(geometry) {\n  if (!geometry) return undefined;\n  return makeCamelCaseArray(Array.from(geometry.Polygon));\n}\n/**\n * Organizes blocks from Rekognition API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\n\n\nexport function categorizeRekognitionBlocks(blocks) {\n  // Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n  var response = {\n    text: {\n      fullText: '',\n      words: [],\n      lines: [],\n      linesDetailed: []\n    }\n  }; // We categorize each block by running a forEach loop through them.\n\n  blocks.forEach(function (block) {\n    switch (block.Type) {\n      case 'LINE':\n        response.text.lines.push(block.DetectedText);\n        response.text.linesDetailed.push({\n          text: block.DetectedText,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry),\n          page: null\n        });\n        break;\n\n      case 'WORD':\n        response.text.fullText += block.DetectedText + ' ';\n        response.text.words.push({\n          text: block.DetectedText,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry)\n        });\n        break;\n    }\n  }); // remove trailing space of fullText\n\n  response.text.fullText = response.text.fullText.substr(0, response.text.fullText.length - 1);\n  return response;\n}\n/**\n * Organizes blocks from Textract API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\n\nexport function categorizeTextractBlocks(blocks) {\n  // Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n  var response = {\n    text: {\n      fullText: '',\n      words: [],\n      lines: [],\n      linesDetailed: []\n    }\n  }; // if blocks is an empty array, ie. textract did not detect anything, return empty response.\n\n  if (blocks.length === 0) return response;\n  /**\n   * We categorize each of the blocks by running a forEach loop through them.\n   *\n   * For complex structures such as Tables and KeyValue, we need to trasverse through their children. To do so,\n   * we will post-process them after the for each loop. We do this by storing table and keyvalues in arrays and\n   * mapping other blocks in `blockMap` (id to block) so we can reference them easily later.\n   *\n   * Note that we do not map `WORD` and `TABLE` in `blockMap` because they will not be referenced by any other\n   * block except the Page block.\n   */\n\n  var tableBlocks = Array();\n  var keyValueBlocks = Array();\n  var blockMap = {};\n  blocks.forEach(function (block) {\n    switch (block.BlockType) {\n      case 'LINE':\n        response.text.lines.push(block.Text);\n        response.text.linesDetailed.push({\n          text: block.Text,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry),\n          page: block.Page\n        });\n        break;\n\n      case 'WORD':\n        response.text.fullText += block.Text + ' ';\n        response.text.words.push({\n          text: block.Text,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry)\n        });\n        blockMap[block.Id] = block;\n        break;\n\n      case 'SELECTION_ELEMENT':\n        var selectionStatus = block.SelectionStatus === 'SELECTED' ? true : false;\n        if (!response.text.selections) response.text.selections = [];\n        response.text.selections.push({\n          selected: selectionStatus,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry)\n        });\n        blockMap[block.Id] = block;\n        break;\n\n      case 'TABLE':\n        tableBlocks.push(block);\n        break;\n\n      case 'KEY_VALUE_SET':\n        keyValueBlocks.push(block);\n        blockMap[block.Id] = block;\n        break;\n\n      default:\n        blockMap[block.Id] = block;\n    }\n  }); // remove trailing space in fullText\n\n  response.text.fullText = response.text.fullText.substr(0, response.text.fullText.length - 1); // Post-process complex structures if they exist.\n\n  if (tableBlocks.length !== 0) {\n    var tableResponse_1 = Array();\n    tableBlocks.forEach(function (table) {\n      tableResponse_1.push(constructTable(table, blockMap));\n    });\n    response.text.tables = tableResponse_1;\n  }\n\n  if (keyValueBlocks.length !== 0) {\n    var keyValueResponse_1 = Array();\n    keyValueBlocks.forEach(function (keyValue) {\n      // We need the KeyValue blocks of EntityType = `KEY`, which has both key and value references.\n      var entityTypes = Array.from(keyValue.EntityTypes);\n\n      if (entityTypes.indexOf('KEY') !== -1) {\n        keyValueResponse_1.push(constructKeyValue(keyValue, blockMap));\n      }\n    });\n    response.text.keyValues = keyValueResponse_1;\n  }\n\n  return response;\n}\n/**\n * Constructs a table object using data from its children cells.\n * @param {Block} table - Table block that has references (`Relationships`) to its cells\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\n\nexport function constructTable(table, blockMap) {\n  var e_1, _a, e_2, _b;\n\n  var tableMatrix;\n  tableMatrix = [];\n\n  try {\n    // visit each of the cell associated with the table's relationship.\n    for (var _c = __values(table.Relationships), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var tableRelation = _d.value;\n\n      try {\n        for (var _e = (e_2 = void 0, __values(tableRelation.Ids)), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var cellId = _f.value;\n          var cellBlock = blockMap[cellId];\n          var row = cellBlock.RowIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n\n          var col = cellBlock.ColumnIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n          // extract data contained inside the cell.\n\n          var content = extractContentsFromBlock(cellBlock, blockMap);\n          var cell = {\n            text: content.text,\n            boundingBox: getBoundingBox(cellBlock.Geometry),\n            polygon: getPolygon(cellBlock.Geometry),\n            selected: content.selected,\n            rowSpan: cellBlock.RowSpan,\n            columnSpan: cellBlock.ColumnSpan\n          };\n          if (!tableMatrix[row]) tableMatrix[row] = [];\n          tableMatrix[row][col] = cell;\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  var rowSize = tableMatrix.length;\n  var columnSize = tableMatrix[0].length; // Note that we leave spanned cells undefined for distinction\n\n  return {\n    size: {\n      rows: rowSize,\n      columns: columnSize\n    },\n    table: tableMatrix,\n    boundingBox: getBoundingBox(table.Geometry),\n    polygon: getPolygon(table.Geometry)\n  };\n}\n/**\n * Constructs a key value object from its children key and value blocks.\n * @param {Block} KeyValue - KeyValue block that has references (`Relationships`) to its children.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\n\nexport function constructKeyValue(keyBlock, blockMap) {\n  var e_3, _a, e_4, _b;\n\n  var keyText = '';\n  var valueText = '';\n  var valueSelected;\n\n  try {\n    for (var _c = __values(keyBlock.Relationships), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var keyValueRelation = _d.value;\n\n      if (keyValueRelation.Type === 'CHILD') {\n        // relation refers to key\n        var contents = extractContentsFromBlock(keyBlock, blockMap);\n        keyText = contents.text;\n      } else if (keyValueRelation.Type === 'VALUE') {\n        try {\n          // relation refers to value\n          for (var _e = (e_4 = void 0, __values(keyValueRelation.Ids)), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var valueId = _f.value;\n            var valueBlock = blockMap[valueId];\n            var contents = extractContentsFromBlock(valueBlock, blockMap);\n            valueText = contents.text;\n            if (contents.selected != null) valueSelected = contents.selected;\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n\n  return {\n    key: keyText,\n    value: {\n      text: valueText,\n      selected: valueSelected\n    },\n    polygon: getPolygon(keyBlock.Geometry),\n    boundingBox: getBoundingBox(keyBlock.Geometry)\n  };\n}\n/**\n * Extracts text and selection from input block's children.\n * @param {Block}} block - Block that we want to extract contents from.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\n\nexport function extractContentsFromBlock(block, blockMap) {\n  var e_5, _a, e_6, _b;\n\n  var words = '';\n  var isSelected;\n\n  if (!block.Relationships) {\n    // some block might have no content\n    return {\n      text: '',\n      selected: undefined\n    };\n  }\n\n  try {\n    for (var _c = __values(block.Relationships), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var relation = _d.value;\n\n      try {\n        for (var _e = (e_6 = void 0, __values(relation.Ids)), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var contentId = _f.value;\n          var contentBlock = blockMap[contentId];\n\n          if (contentBlock.BlockType === 'WORD') {\n            words += contentBlock.Text + ' ';\n          } else if (contentBlock.BlockType === 'SELECTION_ELEMENT') {\n            isSelected = contentBlock.SelectionStatus === 'SELECTED' ? true : false;\n          }\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  words = words.substr(0, words.length - 1); // remove trailing space.\n\n  return {\n    text: words,\n    selected: isSelected\n  };\n}","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\predictions\\src\\Providers\\IdentifyTextUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tIdentifyTextOutput,\n\tTable,\n\tKeyValue,\n\tTableCell,\n\tContent,\n\tBoundingBox,\n\tPolygon,\n\tGeometry,\n} from '../types';\nimport { Block, BlockList, TextDetectionList } from '../types/AWSTypes';\nimport { makeCamelCaseArray, makeCamelCase } from './Utils';\n\nfunction getBoundingBox(geometry: Geometry): BoundingBox {\n\tif (!geometry) return undefined;\n\treturn makeCamelCase(geometry.BoundingBox);\n}\n\nfunction getPolygon(geometry: Geometry): Polygon {\n\tif (!geometry) return undefined;\n\treturn makeCamelCaseArray(Array.from(geometry.Polygon));\n}\n\n/**\n * Organizes blocks from Rekognition API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\nexport function categorizeRekognitionBlocks(\n\tblocks: TextDetectionList\n): IdentifyTextOutput {\n\t// Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n\tconst response: IdentifyTextOutput = {\n\t\ttext: {\n\t\t\tfullText: '',\n\t\t\twords: [],\n\t\t\tlines: [],\n\t\t\tlinesDetailed: [],\n\t\t},\n\t};\n\t// We categorize each block by running a forEach loop through them.\n\tblocks.forEach(block => {\n\t\tswitch (block.Type) {\n\t\t\tcase 'LINE':\n\t\t\t\tresponse.text.lines.push(block.DetectedText);\n\t\t\t\tresponse.text.linesDetailed.push({\n\t\t\t\t\ttext: block.DetectedText,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t\tpage: null, // rekognition doesn't have this info\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'WORD':\n\t\t\t\tresponse.text.fullText += block.DetectedText + ' ';\n\t\t\t\tresponse.text.words.push({\n\t\t\t\t\ttext: block.DetectedText,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t});\n\t// remove trailing space of fullText\n\tresponse.text.fullText = response.text.fullText.substr(\n\t\t0,\n\t\tresponse.text.fullText.length - 1\n\t);\n\treturn response;\n}\n\n/**\n * Organizes blocks from Textract API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\nexport function categorizeTextractBlocks(\n\tblocks: BlockList\n): IdentifyTextOutput {\n\t// Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n\tconst response: IdentifyTextOutput = {\n\t\ttext: {\n\t\t\tfullText: '',\n\t\t\twords: [],\n\t\t\tlines: [],\n\t\t\tlinesDetailed: [],\n\t\t},\n\t};\n\t// if blocks is an empty array, ie. textract did not detect anything, return empty response.\n\tif (blocks.length === 0) return response;\n\t/**\n\t * We categorize each of the blocks by running a forEach loop through them.\n\t *\n\t * For complex structures such as Tables and KeyValue, we need to trasverse through their children. To do so,\n\t * we will post-process them after the for each loop. We do this by storing table and keyvalues in arrays and\n\t * mapping other blocks in `blockMap` (id to block) so we can reference them easily later.\n\t *\n\t * Note that we do not map `WORD` and `TABLE` in `blockMap` because they will not be referenced by any other\n\t * block except the Page block.\n\t */\n\tconst tableBlocks: BlockList = Array();\n\tconst keyValueBlocks: BlockList = Array();\n\tconst blockMap: { [id: string]: Block } = {};\n\n\tblocks.forEach(block => {\n\t\tswitch (block.BlockType) {\n\t\t\tcase 'LINE':\n\t\t\t\tresponse.text.lines.push(block.Text);\n\t\t\t\tresponse.text.linesDetailed.push({\n\t\t\t\t\ttext: block.Text,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t\tpage: block.Page,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'WORD':\n\t\t\t\tresponse.text.fullText += block.Text + ' ';\n\t\t\t\tresponse.text.words.push({\n\t\t\t\t\ttext: block.Text,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t});\n\t\t\t\tblockMap[block.Id] = block;\n\t\t\t\tbreak;\n\t\t\tcase 'SELECTION_ELEMENT':\n\t\t\t\tconst selectionStatus =\n\t\t\t\t\tblock.SelectionStatus === 'SELECTED' ? true : false;\n\t\t\t\tif (!response.text.selections) response.text.selections = [];\n\t\t\t\tresponse.text.selections.push({\n\t\t\t\t\tselected: selectionStatus,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t});\n\t\t\t\tblockMap[block.Id] = block;\n\t\t\t\tbreak;\n\t\t\tcase 'TABLE':\n\t\t\t\ttableBlocks.push(block);\n\t\t\t\tbreak;\n\t\t\tcase 'KEY_VALUE_SET':\n\t\t\t\tkeyValueBlocks.push(block);\n\t\t\t\tblockMap[block.Id] = block;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tblockMap[block.Id] = block;\n\t\t}\n\t});\n\t// remove trailing space in fullText\n\tresponse.text.fullText = response.text.fullText.substr(\n\t\t0,\n\t\tresponse.text.fullText.length - 1\n\t);\n\n\t// Post-process complex structures if they exist.\n\tif (tableBlocks.length !== 0) {\n\t\tconst tableResponse: Table[] = Array();\n\t\ttableBlocks.forEach(table => {\n\t\t\ttableResponse.push(constructTable(table, blockMap));\n\t\t});\n\t\tresponse.text.tables = tableResponse;\n\t}\n\tif (keyValueBlocks.length !== 0) {\n\t\tconst keyValueResponse: KeyValue[] = Array();\n\t\tkeyValueBlocks.forEach(keyValue => {\n\t\t\t// We need the KeyValue blocks of EntityType = `KEY`, which has both key and value references.\n\t\t\tconst entityTypes = Array.from(keyValue.EntityTypes);\n\t\t\tif (entityTypes.indexOf('KEY') !== -1) {\n\t\t\t\tkeyValueResponse.push(constructKeyValue(keyValue, blockMap));\n\t\t\t}\n\t\t});\n\t\tresponse.text.keyValues = keyValueResponse;\n\t}\n\treturn response;\n}\n\n/**\n * Constructs a table object using data from its children cells.\n * @param {Block} table - Table block that has references (`Relationships`) to its cells\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nexport function constructTable(\n\ttable: Block,\n\tblockMap: { [key: string]: Block }\n): Table {\n\tlet tableMatrix: TableCell[][];\n\ttableMatrix = [];\n\t// visit each of the cell associated with the table's relationship.\n\tfor (const tableRelation of table.Relationships) {\n\t\tfor (const cellId of tableRelation.Ids) {\n\t\t\tconst cellBlock: Block = blockMap[cellId];\n\t\t\tconst row = cellBlock.RowIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n\t\t\tconst col = cellBlock.ColumnIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n\t\t\t// extract data contained inside the cell.\n\t\t\tconst content = extractContentsFromBlock(cellBlock, blockMap);\n\t\t\tconst cell: TableCell = {\n\t\t\t\ttext: content.text,\n\t\t\t\tboundingBox: getBoundingBox(cellBlock.Geometry),\n\t\t\t\tpolygon: getPolygon(cellBlock.Geometry),\n\t\t\t\tselected: content.selected,\n\t\t\t\trowSpan: cellBlock.RowSpan,\n\t\t\t\tcolumnSpan: cellBlock.ColumnSpan,\n\t\t\t};\n\t\t\tif (!tableMatrix[row]) tableMatrix[row] = [];\n\t\t\ttableMatrix[row][col] = cell;\n\t\t}\n\t}\n\tconst rowSize = tableMatrix.length;\n\tconst columnSize = tableMatrix[0].length;\n\t// Note that we leave spanned cells undefined for distinction\n\treturn {\n\t\tsize: { rows: rowSize, columns: columnSize },\n\t\ttable: tableMatrix,\n\t\tboundingBox: getBoundingBox(table.Geometry),\n\t\tpolygon: getPolygon(table.Geometry),\n\t};\n}\n\n/**\n * Constructs a key value object from its children key and value blocks.\n * @param {Block} KeyValue - KeyValue block that has references (`Relationships`) to its children.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nexport function constructKeyValue(\n\tkeyBlock: Block,\n\tblockMap: { [key: string]: Block }\n): KeyValue {\n\tlet keyText: string = '';\n\tlet valueText: string = '';\n\tlet valueSelected: boolean;\n\tfor (const keyValueRelation of keyBlock.Relationships) {\n\t\tif (keyValueRelation.Type === 'CHILD') {\n\t\t\t// relation refers to key\n\t\t\tconst contents = extractContentsFromBlock(keyBlock, blockMap);\n\t\t\tkeyText = contents.text;\n\t\t} else if (keyValueRelation.Type === 'VALUE') {\n\t\t\t// relation refers to value\n\t\t\tfor (const valueId of keyValueRelation.Ids) {\n\t\t\t\tconst valueBlock = blockMap[valueId];\n\t\t\t\tconst contents = extractContentsFromBlock(valueBlock, blockMap);\n\t\t\t\tvalueText = contents.text;\n\t\t\t\tif (contents.selected != null) valueSelected = contents.selected;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tkey: keyText,\n\t\tvalue: { text: valueText, selected: valueSelected },\n\t\tpolygon: getPolygon(keyBlock.Geometry),\n\t\tboundingBox: getBoundingBox(keyBlock.Geometry),\n\t};\n}\n\n/**\n * Extracts text and selection from input block's children.\n * @param {Block}} block - Block that we want to extract contents from.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nexport function extractContentsFromBlock(\n\tblock: Block,\n\tblockMap: { [id: string]: Block }\n): Content {\n\tlet words: string = '';\n\tlet isSelected: boolean;\n\n\tif (!block.Relationships) {\n\t\t// some block might have no content\n\t\treturn { text: '', selected: undefined };\n\t}\n\tfor (const relation of block.Relationships) {\n\t\tfor (const contentId of relation.Ids) {\n\t\t\tconst contentBlock = blockMap[contentId];\n\t\t\tif (contentBlock.BlockType === 'WORD') {\n\t\t\t\twords += contentBlock.Text + ' ';\n\t\t\t} else if (contentBlock.BlockType === 'SELECTION_ELEMENT') {\n\t\t\t\tisSelected = contentBlock.SelectionStatus === 'SELECTED' ? true : false;\n\t\t\t}\n\t\t}\n\t}\n\n\twords = words.substr(0, words.length - 1); // remove trailing space.\n\treturn { text: words, selected: isSelected };\n}\n"]},"metadata":{},"sourceType":"module"}