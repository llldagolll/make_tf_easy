{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, JS, Hub, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { PinpointClient, PutEventsCommand, UpdateEndpointCommand } from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function'; // events buffer\n\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar RESEND_LIMIT = 5; // params: { event: {name: , .... }, timeStamp, config, resendLimits }\n\nvar AWSPinpointProvider =\n/** @class */\nfunction () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf); // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n    // updated before sending any events. See `sendEvents` in `Analytics.ts`\n\n    this._endpointGenerating = !!config['autoSessionRecord'];\n\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2\n              /*return*/\n              , handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n\n            this._initClients(credentials);\n\n            timestamp = new Date().getTime(); // attach the session and eventId\n\n            this._generateSession(params);\n\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n\n            if (params.event.immediate) {\n              return [2\n              /*return*/\n              , this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            this._endpointUpdateInProgress = true;\n            return [4\n            /*yield*/\n            , this._updateEndpoint(endpointObject)];\n\n          case 1:\n            _a.sent();\n\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n\n\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n\n      return;\n    }\n\n    this._buffer && this._buffer.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2\n            /*return*/\n            , this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n\n          case SESSION_STOP:\n            return [2\n            /*return*/\n            , this._pinpointSendStopSession(params, handlers)];\n\n          default:\n            return [2\n            /*return*/\n            , this._pinpointPutEvents(params, handlers)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a;\n\n    var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n    var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n    var appId = config.appId,\n        endpointId = config.endpointId;\n    var endpointContext = {};\n    var eventParams = {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    var endpointObj = {};\n    endpointObj.Endpoint = endpointContext;\n    endpointObj.Events = (_a = {}, _a[eventId] = {\n      EventType: name,\n      Timestamp: new Date(timestamp).toISOString(),\n      Attributes: attributes,\n      Metrics: metrics,\n      Session: session\n    }, _a);\n    eventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n    return eventParams;\n  };\n\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, command, data, _a, _b, _c, _d, StatusCode, Message, err_1;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            command = new PutEventsCommand(eventParams);\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.pinpointClient.send(command)];\n\n          case 2:\n            data = _e.sent();\n            _a = data, _b = endpointId, _c = eventId, _d = _a.EventsResponse.Results[_b].EventsItemResponse[_c], StatusCode = _d.StatusCode, Message = _d.Message;\n\n            if (ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2\n              /*return*/\n              , handlers.resolve(data)];\n            } else {\n              if (RETRYABLE_CODES.includes(StatusCode)) {\n                this._retry(params, handlers);\n              } else {\n                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                return [2\n                /*return*/\n                , handlers.reject(data)];\n              }\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _e.sent();\n\n            this._eventError(err_1);\n\n            return [2\n            /*return*/\n            , handlers.reject(err_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n\n      return;\n    }\n\n    var eventParams = this._generateBatchItemContext(params);\n\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n        EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n    var success = navigator.sendBeacon(requestUrl, body);\n\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n\n    return handlers.reject('sendBeacon failure');\n  };\n\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit; // For backward compatibility\n\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, command, data, err_2, failureData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            command = new UpdateEndpointCommand(update_params);\n            return [4\n            /*yield*/\n            , this.pinpointClient.send(command)];\n\n          case 2:\n            data = _a.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n\n            this._resumeBuffer();\n\n            handlers.resolve(data);\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            err_2 = _a.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2\n            /*return*/\n            , this._handleEndpointUpdateFailure(failureData)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint error', err);\n\n        switch (statusCode) {\n          case FORBIDDEN_CODE:\n            return [2\n            /*return*/\n            , this._handleEndpointUpdateForbidden(failureData)];\n\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2\n              /*return*/\n              , this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n\n            logger.error('updateEndpoint failed', err);\n            endpointObject.handlers.reject(err);\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n        endpointObject = failureData.endpointObject;\n    var code = err.code,\n        retryable = err.retryable;\n\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n\n    this._retryEndpointUpdate(endpointObject);\n  };\n\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params; // TODO: implement retry with exp back off once exp function is available\n\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\"); // insert at the front of endpointBuffer\n\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  /**\n   * @private\n   * @param config\n   * Init the clients\n   */\n\n\n  AWSPinpointProvider.prototype._initClients = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId, region;\n      return __generator(this, function (_a) {\n        logger.debug('init clients');\n\n        if (this.pinpointClient && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2\n          /*return*/\n          ];\n        }\n\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n        region = this._config.region;\n        logger.debug('init clients with credentials', credentials);\n        this.pinpointClient = new PinpointClient({\n          region: region,\n          credentials: credentials,\n          customUserAgent: getAmplifyUserAgent()\n        }); // TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n\n        this.pinpointClient.middlewareStack.addRelativeTo(function (next) {\n          return function (args) {\n            delete args.request.headers['amz-sdk-invocation-id'];\n            delete args.request.headers['amz-sdk-request'];\n            return next(args);\n          };\n        }, {\n          step: 'finalizeRequest',\n          relation: 'after',\n          toMiddleware: 'retryMiddleware'\n        });\n\n        if (this._bufferExists() && identityId === credentials.identityId) {\n          // if the identity has remained the same, pass the updated client to the buffer\n          this._updateBufferClient();\n        } else {\n          // otherwise flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n\n        this._customizePinpointClientReq();\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventsBuffer;\n  };\n\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n\n    this._buffer = new EventsBuffer(this.pinpointClient, this._config); // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n\n  AWSPinpointProvider.prototype._updateBufferClient = function () {\n    if (this._bufferExists()) {\n      this._buffer.updateClient(this.pinpointClient);\n    }\n  };\n\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.flush();\n\n      this._buffer = null;\n    }\n  };\n\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.resume();\n    }\n  };\n\n  AWSPinpointProvider.prototype._customizePinpointClientReq = function () {// TODO FIXME: Find a middleware to do this with AWS V3 SDK\n    // if (Platform.isReactNative) {\n    // \tthis.pinpointClient.customizeRequests(request => {\n    // \t\trequest.on('build', req => {\n    // \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n    // \t\t});\n    // \t});\n    // }\n  };\n\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId, ttl, expiration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem(cacheKey)];\n\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n\n            if (!endpointId) {\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n            }\n\n            return [2\n            /*return*/\n            , endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n\n\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {}; // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    }; // for backward compatibility\n\n    var clientId = clientContext.clientId,\n        appTitle = clientContext.appTitle,\n        appVersionName = clientContext.appVersionName,\n        appVersionCode = clientContext.appVersionCode,\n        appPackageName = clientContext.appPackageName,\n        demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    }); // eliminate unnecessary params\n\n\n    var userId = tmp.userId,\n        userAttributes = tmp.userAttributes,\n        name = tmp.name,\n        session = tmp.session,\n        eventId = tmp.eventId,\n        immediate = tmp.immediate,\n        ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n\n    return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2\n            /*return*/\n            , Credentials.shear(credentials)];\n\n          case 2:\n            err_3 = _a.sent();\n            logger.debug('ensure credentials error', err_3);\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\n\nexport { AWSPinpointProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AWSPinpointProvider;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\AWSPinpointProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tConsoleLogger as Logger,\n\tClientDevice,\n\tCredentials,\n\tSigner,\n\tJS,\n\tHub,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tEventsBatch,\n\tPinpointClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n\tUpdateEndpointCommand,\n} from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\n\nimport {\n\tAnalyticsProvider,\n\tPromiseHandlers,\n\tEndpointBuffer,\n\tEventParams,\n\tEventObject,\n\tEndpointFailureData,\n} from '../types';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchAnalyticsEvent = (event, data) => {\n\tHub.dispatch('analytics', { event, data }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nconst logger = new Logger('AWSPinpointProvider');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\nconst FORBIDDEN_CODE = 403;\nconst MOBILE_SERVICE_NAME = 'mobiletargeting';\nconst EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nconst UPDATE_ENDPOINT = '_update_endpoint';\nconst SESSION_START = '_session.start';\nconst SESSION_STOP = '_session.stop';\n\nconst BEACON_SUPPORTED =\n\ttypeof navigator !== 'undefined' &&\n\tnavigator &&\n\ttypeof navigator.sendBeacon === 'function';\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nexport class AWSPinpointProvider implements AnalyticsProvider {\n\tstatic category = 'Analytics';\n\tstatic providerName = 'AWSPinpoint';\n\n\tprivate _config;\n\tprivate pinpointClient;\n\tprivate _sessionId;\n\tprivate _sessionStartTimestamp;\n\tprivate _buffer: EventsBuffer;\n\tprivate _endpointBuffer: EndpointBuffer;\n\tprivate _clientInfo;\n\tprivate _endpointGenerating = true;\n\tprivate _endpointUpdateInProgress = false;\n\n\tconstructor(config?) {\n\t\tthis._buffer = null;\n\t\tthis._endpointBuffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\t\tthis._clientInfo = ClientDevice.clientInfo();\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tgetCategory(): string {\n\t\treturn AWSPinpointProvider.category;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSPinpointProvider.providerName;\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config || {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\t// If autoSessionRecord is enabled, we need to wait for the endpoint to be\n\t\t// updated before sending any events. See `sendEvents` in `Analytics.ts`\n\t\tthis._endpointGenerating = !!config['autoSessionRecord'];\n\n\t\tif (this._config.appId && !this._config.disabled) {\n\t\t\tif (!this._config.endpointId) {\n\t\t\t\tconst cacheKey = this.getProviderName() + '_' + this._config.appId;\n\t\t\t\tthis._getEndpointId(cacheKey)\n\t\t\t\t\t.then(endpointId => {\n\t\t\t\t\t\tlogger.debug('setting endpoint id from the cache', endpointId);\n\t\t\t\t\t\tthis._config.endpointId = endpointId;\n\t\t\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tlogger.debug('Failed to generate endpointId', err);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._flushBuffer();\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params: EventParams, handlers: PromiseHandlers) {\n\t\tlogger.debug('_public record', params);\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials || !this._config.appId || !this._config.region) {\n\t\t\tlogger.debug(\n\t\t\t\t'cannot send events without credentials, applicationId or region'\n\t\t\t);\n\t\t\treturn handlers.reject(\n\t\t\t\tnew Error('No credentials, applicationId or region')\n\t\t\t);\n\t\t}\n\n\t\tthis._initClients(credentials);\n\n\t\tconst timestamp = new Date().getTime();\n\t\t// attach the session and eventId\n\t\tthis._generateSession(params);\n\t\tparams.event.eventId = uuid();\n\n\t\tObject.assign(params, { timestamp, config: this._config });\n\n\t\tif (params.event.immediate) {\n\t\t\treturn this._send(params, handlers);\n\t\t} else {\n\t\t\tthis._putToBuffer(params, handlers);\n\t\t}\n\t}\n\n\tprivate async _sendEndpointUpdate(endpointObject: EventObject) {\n\t\tif (this._endpointUpdateInProgress) {\n\t\t\tthis._endpointBuffer.push(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._endpointUpdateInProgress = true;\n\t\tawait this._updateEndpoint(endpointObject);\n\n\t\tconst next = this._endpointBuffer.shift();\n\t\tthis._endpointUpdateInProgress = false;\n\n\t\tnext && this._sendEndpointUpdate(next);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params, handlers) {\n\t\tif (params.event.name === UPDATE_ENDPOINT) {\n\t\t\tthis._sendEndpointUpdate({ params, handlers });\n\t\t\treturn;\n\t\t}\n\n\t\tthis._buffer && this._buffer.push({ params, handlers });\n\t}\n\n\tprivate _generateSession(params) {\n\t\tthis._sessionId = this._sessionId || uuid();\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase SESSION_START:\n\t\t\t\t// refresh the session id and session start time\n\t\t\t\tthis._sessionStartTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionId = uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase SESSION_STOP:\n\t\t\t\tconst stopTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tDuration: stopTimestamp - this._sessionStartTimestamp,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t\tStopTimestamp: new Date(stopTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tthis._sessionId = undefined;\n\t\t\t\tthis._sessionStartTimestamp = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t}\n\t}\n\n\tprivate async _send(params, handlers) {\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase UPDATE_ENDPOINT:\n\t\t\t\treturn this._updateEndpoint({ params, handlers });\n\t\t\tcase SESSION_STOP:\n\t\t\t\treturn this._pinpointSendStopSession(params, handlers);\n\t\t\tdefault:\n\t\t\t\treturn this._pinpointPutEvents(params, handlers);\n\t\t}\n\t}\n\n\tprivate _generateBatchItemContext(params) {\n\t\tconst { event, timestamp, config } = params;\n\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst endpointContext = {};\n\n\t\tconst eventParams: PutEventsCommandInput = {\n\t\t\tApplicationId: appId,\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tconst endpointObj: EventsBatch = {} as EventsBatch;\n\t\tendpointObj.Endpoint = endpointContext;\n\t\tendpointObj.Events = {\n\t\t\t[eventId]: {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t},\n\t\t};\n\t\teventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n\n\t\treturn eventParams;\n\t}\n\n\tprivate async _pinpointPutEvents(params, handlers) {\n\t\tconst {\n\t\t\tevent: { eventId },\n\t\t\tconfig: { endpointId },\n\t\t} = params;\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\t\tconst command: PutEventsCommand = new PutEventsCommand(eventParams);\n\n\t\ttry {\n\t\t\tconst data = await this.pinpointClient.send(command);\n\t\t\tconst {\n\t\t\t\tEventsResponse: {\n\t\t\t\t\tResults: {\n\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} = data;\n\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\tlogger.debug('record event success. ', data);\n\t\t\t\treturn handlers.resolve(data);\n\t\t\t} else {\n\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\tthis._retry(params, handlers);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`Event ${eventId} is not accepted, the error is ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn handlers.reject(data);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._eventError(err);\n\t\t\treturn handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _pinpointSendStopSession(params, handlers): Promise<string> {\n\t\tif (!BEACON_SUPPORTED) {\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t\treturn;\n\t\t}\n\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\tconst { region } = this._config;\n\t\tconst { ApplicationId, EventsRequest } = eventParams;\n\n\t\tconst accessInfo = {\n\t\t\tsecret_key: this._config.credentials.secretAccessKey,\n\t\t\taccess_key: this._config.credentials.accessKeyId,\n\t\t\tsession_token: this._config.credentials.sessionToken,\n\t\t};\n\n\t\tconst url = `https://pinpoint.${region}.amazonaws.com/v1/apps/${ApplicationId}/events/legacy`;\n\t\tconst body = JSON.stringify(EventsRequest);\n\t\tconst method = 'POST';\n\n\t\tconst request = {\n\t\t\turl,\n\t\t\tbody,\n\t\t\tmethod,\n\t\t};\n\n\t\tconst serviceInfo = { region, service: MOBILE_SERVICE_NAME };\n\n\t\tconst requestUrl: string = Signer.signUrl(\n\t\t\trequest,\n\t\t\taccessInfo,\n\t\t\tserviceInfo,\n\t\t\tnull\n\t\t);\n\n\t\tconst success: boolean = navigator.sendBeacon(requestUrl, body);\n\n\t\tif (success) {\n\t\t\treturn handlers.resolve('sendBeacon success');\n\t\t}\n\t\treturn handlers.reject('sendBeacon failure');\n\t}\n\n\tprivate _retry(params, handlers) {\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\t\t// For backward compatibility\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending event ${params.eventName} with ${params.resendLimit} retry times left`\n\t\t\t);\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t} else {\n\t\t\tlogger.debug(`retry times used up for event ${params.eventName}`);\n\t\t}\n\t}\n\n\tprivate async _updateEndpoint(endpointObject: EventObject) {\n\t\tconst { params, handlers } = endpointObject;\n\t\tconst { config, event } = params;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst request = this._endpointRequest(\n\t\t\tconfig,\n\t\t\tJS.transferKeyToLowerCase(\n\t\t\t\tevent,\n\t\t\t\t[],\n\t\t\t\t['attributes', 'userAttributes', 'Attributes', 'UserAttributes']\n\t\t\t)\n\t\t);\n\t\tconst update_params = {\n\t\t\tApplicationId: appId,\n\t\t\tEndpointId: endpointId,\n\t\t\tEndpointRequest: request,\n\t\t};\n\n\t\ttry {\n\t\t\tconst command: UpdateEndpointCommand = new UpdateEndpointCommand(\n\t\t\t\tupdate_params\n\t\t\t);\n\t\t\tconst data = await this.pinpointClient.send(command);\n\n\t\t\tlogger.debug('updateEndpoint success', data);\n\t\t\tthis._endpointGenerating = false;\n\t\t\tthis._resumeBuffer();\n\n\t\t\thandlers.resolve(data);\n\t\t\treturn;\n\t\t} catch (err) {\n\t\t\tconst failureData: EndpointFailureData = {\n\t\t\t\terr,\n\t\t\t\tupdate_params,\n\t\t\t\tendpointObject,\n\t\t\t};\n\n\t\t\treturn this._handleEndpointUpdateFailure(failureData);\n\t\t}\n\t}\n\n\tprivate async _handleEndpointUpdateFailure(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tlogger.debug('updateEndpoint error', err);\n\n\t\tswitch (statusCode) {\n\t\t\tcase FORBIDDEN_CODE:\n\t\t\t\treturn this._handleEndpointUpdateForbidden(failureData);\n\t\t\tdefault:\n\t\t\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\t\t\t// Server error. Attempt exponential retry\n\t\t\t\t\tconst exponential = true;\n\t\t\t\t\treturn this._retryEndpointUpdate(endpointObject, exponential);\n\t\t\t\t}\n\t\t\t\tlogger.error('updateEndpoint failed', err);\n\t\t\t\tendpointObject.handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _handleEndpointUpdateForbidden(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\n\t\tconst { code, retryable } = err;\n\n\t\tif (code !== EXPIRED_TOKEN_CODE && !retryable) {\n\t\t\treturn endpointObject.handlers.reject(err);\n\t\t}\n\n\t\tthis._retryEndpointUpdate(endpointObject);\n\t}\n\n\tprivate _retryEndpointUpdate(\n\t\tendpointObject: EventObject,\n\t\texponential: boolean = false\n\t) {\n\t\tlogger.debug('_retryEndpointUpdate', endpointObject);\n\t\tconst { params } = endpointObject;\n\n\t\t// TODO: implement retry with exp back off once exp function is available\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending endpoint update ${params.event.eventId} with ${params.resendLimit} retry attempts remaining`\n\t\t\t);\n\t\t\t// insert at the front of endpointBuffer\n\t\t\tthis._endpointBuffer.length\n\t\t\t\t? this._endpointBuffer.unshift(endpointObject)\n\t\t\t\t: this._updateEndpoint(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.warn(\n\t\t\t`resending endpoint update ${params.event.eventId} failed after ${params.config.resendLimit} attempts`\n\t\t);\n\n\t\tif (this._endpointGenerating) {\n\t\t\tlogger.error('Initial endpoint update failed. ');\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param config\n\t * Init the clients\n\t */\n\tprivate async _initClients(credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis.pinpointClient &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for aws credentials, directly return from init');\n\t\t\treturn;\n\t\t}\n\n\t\tconst identityId = this._config.credentials\n\t\t\t? this._config.credentials.identityId\n\t\t\t: null;\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = this._config;\n\t\tlogger.debug('init clients with credentials', credentials);\n\t\tthis.pinpointClient = new PinpointClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n\t\tthis.pinpointClient.middlewareStack.addRelativeTo(\n\t\t\tnext => args => {\n\t\t\t\tdelete args.request.headers['amz-sdk-invocation-id'];\n\t\t\t\tdelete args.request.headers['amz-sdk-request'];\n\t\t\t\treturn next(args);\n\t\t\t},\n\t\t\t{\n\t\t\t\tstep: 'finalizeRequest',\n\t\t\t\trelation: 'after',\n\t\t\t\ttoMiddleware: 'retryMiddleware',\n\t\t\t}\n\t\t);\n\n\t\tif (this._bufferExists() && identityId === credentials.identityId) {\n\t\t\t// if the identity has remained the same, pass the updated client to the buffer\n\t\t\tthis._updateBufferClient();\n\t\t} else {\n\t\t\t// otherwise flush the buffer and instantiate a new one\n\t\t\t// this will cause the old buffer to send any remaining events\n\t\t\t// with the old credentials and then stop looping and shortly thereafter get picked up by GC\n\t\t\tthis._initBuffer();\n\t\t}\n\n\t\tthis._customizePinpointClientReq();\n\t}\n\n\tprivate _bufferExists() {\n\t\treturn this._buffer && this._buffer instanceof EventsBuffer;\n\t}\n\n\tprivate _initBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._flushBuffer();\n\t\t}\n\n\t\tthis._buffer = new EventsBuffer(this.pinpointClient, this._config);\n\n\t\t// if the first endpoint update hasn't yet resolved pause the buffer to\n\t\t// prevent race conditions. It will be resumed as soon as that request succeeds\n\t\tif (this._endpointGenerating) {\n\t\t\tthis._buffer.pause();\n\t\t}\n\t}\n\n\tprivate _updateBufferClient() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.updateClient(this.pinpointClient);\n\t\t}\n\t}\n\n\tprivate _flushBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.flush();\n\t\t\tthis._buffer = null;\n\t\t}\n\t}\n\n\tprivate _resumeBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.resume();\n\t\t}\n\t}\n\n\tprivate _customizePinpointClientReq() {\n\t\t// TODO FIXME: Find a middleware to do this with AWS V3 SDK\n\t\t// if (Platform.isReactNative) {\n\t\t// \tthis.pinpointClient.customizeRequests(request => {\n\t\t// \t\trequest.on('build', req => {\n\t\t// \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n\t\t// \t\t});\n\t\t// \t});\n\t\t// }\n\t}\n\n\tprivate async _getEndpointId(cacheKey) {\n\t\t// try to get from cache\n\t\tlet endpointId = await Cache.getItem(cacheKey);\n\t\tlogger.debug(\n\t\t\t'endpointId from cache',\n\t\t\tendpointId,\n\t\t\t'type',\n\t\t\ttypeof endpointId\n\t\t);\n\t\tif (!endpointId) {\n\t\t\tendpointId = uuid();\n\t\t\t// set a longer TTL to avoid endpoint id being deleted after the default TTL (3 days)\n\t\t\t// also set its priority to the highest to reduce its chance of being deleted when cache is full\n\t\t\tconst ttl = 1000 * 60 * 60 * 24 * 365 * 100; // 100 years\n\t\t\tconst expiration = new Date().getTime() + ttl;\n\t\t\tCache.setItem(cacheKey, endpointId, {\n\t\t\t\texpires: expiration,\n\t\t\t\tpriority: 1,\n\t\t\t});\n\t\t}\n\t\treturn endpointId;\n\t}\n\n\t/**\n\t * EndPoint request\n\t * @return {Object} - The request of updating endpoint\n\t */\n\tprivate _endpointRequest(config, event) {\n\t\tconst { credentials } = config;\n\t\tconst clientInfo = this._clientInfo || {};\n\t\tconst clientContext = config.clientContext || {};\n\t\t// for now we have three different ways for default endpoint configurations\n\t\t// clientInfo\n\t\t// clientContext (deprecated)\n\t\t// config.endpoint\n\t\tconst defaultEndpointConfig = config.endpoint || {};\n\t\tconst demographicByClientInfo = {\n\t\t\tappVersion: clientInfo.appVersion,\n\t\t\tmake: clientInfo.make,\n\t\t\tmodel: clientInfo.model,\n\t\t\tmodelVersion: clientInfo.version,\n\t\t\tplatform: clientInfo.platform,\n\t\t};\n\t\t// for backward compatibility\n\t\tconst {\n\t\t\tclientId,\n\t\t\tappTitle,\n\t\t\tappVersionName,\n\t\t\tappVersionCode,\n\t\t\tappPackageName,\n\t\t\t...demographicByClientContext\n\t\t} = clientContext;\n\t\tconst channelType = event.address\n\t\t\t? clientInfo.platform === 'android'\n\t\t\t\t? 'GCM'\n\t\t\t\t: 'APNS'\n\t\t\t: undefined;\n\t\tconst tmp = {\n\t\t\tchannelType,\n\t\t\trequestId: uuid(),\n\t\t\teffectiveDate: new Date().toISOString(),\n\t\t\t...defaultEndpointConfig,\n\t\t\t...event,\n\t\t\tattributes: {\n\t\t\t\t...defaultEndpointConfig.attributes,\n\t\t\t\t...event.attributes,\n\t\t\t},\n\t\t\tdemographic: {\n\t\t\t\t...demographicByClientInfo,\n\t\t\t\t...demographicByClientContext,\n\t\t\t\t...defaultEndpointConfig.demographic,\n\t\t\t\t...event.demographic,\n\t\t\t},\n\t\t\tlocation: {\n\t\t\t\t...defaultEndpointConfig.location,\n\t\t\t\t...event.location,\n\t\t\t},\n\t\t\tmetrics: {\n\t\t\t\t...defaultEndpointConfig.metrics,\n\t\t\t\t...event.metrics,\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tuserId:\n\t\t\t\t\tevent.userId ||\n\t\t\t\t\tdefaultEndpointConfig.userId ||\n\t\t\t\t\tcredentials.identityId,\n\t\t\t\tuserAttributes: {\n\t\t\t\t\t...defaultEndpointConfig.userAttributes,\n\t\t\t\t\t...event.userAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// eliminate unnecessary params\n\t\tconst {\n\t\t\tuserId,\n\t\t\tuserAttributes,\n\t\t\tname,\n\t\t\tsession,\n\t\t\teventId,\n\t\t\timmediate,\n\t\t\t...ret\n\t\t} = tmp;\n\t\treturn JS.transferKeyToUpperCase(\n\t\t\tret,\n\t\t\t[],\n\t\t\t['metrics', 'userAttributes', 'attributes']\n\t\t);\n\t}\n\n\tprivate _eventError(err: any) {\n\t\tlogger.error('record event failed.', err);\n\t\tlogger.warn(\n\t\t\t`Please ensure you have updated your Pinpoint IAM Policy ` +\n\t\t\t\t`with the Action: \"mobiletargeting:PutEvents\" ` +\n\t\t\t\t`in order to record events`\n\t\t);\n\t}\n\n\tprivate async _getCredentials() {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return null;\n\n\t\t\tlogger.debug('set credentials for analytics', credentials);\n\t\t\treturn Credentials.shear(credentials);\n\t\t} catch (err) {\n\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSPinpointProvider;\n"]},"metadata":{},"sourceType":"module"}