{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nimport { ListPartsCommand } from \"../commands/ListPartsCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new ListPartsCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.listParts.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateListParts(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateListParts_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.PartNumberMarker = token;\n          input[\"MaxParts\"] = config.pageSize;\n          if (!(config.client instanceof S3)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof S3Client)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected S3 | S3Client\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.NextPartNumberMarker;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-sdk\\client-s3\\pagination\\ListPartsPaginator.ts"],"names":[],"mappings":"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","sourcesContent":["import { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nimport { ListPartsCommand, ListPartsCommandInput, ListPartsCommandOutput } from \"../commands/ListPartsCommand\";\nimport { S3PaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: S3Client,\n  input: ListPartsCommandInput,\n  ...args: any\n): Promise<ListPartsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new ListPartsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: S3,\n  input: ListPartsCommandInput,\n  ...args: any\n): Promise<ListPartsCommandOutput> => {\n  // @ts-ignore\n  return await client.listParts(input, ...args);\n};\nexport async function* paginateListParts(\n  config: S3PaginationConfiguration,\n  input: ListPartsCommandInput,\n  ...additionalArguments: any\n): Paginator<ListPartsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.PartNumberMarker\n  let token: typeof input.PartNumberMarker | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: ListPartsCommandOutput;\n  while (hasNext) {\n    input.PartNumberMarker = token;\n    input[\"MaxParts\"] = config.pageSize;\n    if (config.client instanceof S3) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof S3Client) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected S3 | S3Client\");\n    }\n    yield page;\n    token = page.NextPartNumberMarker;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}