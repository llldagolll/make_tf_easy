{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { Amplify, ConsoleLogger as Logger, Hub, JS } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, AuthModeStrategyType, isNonModelFieldType, isModelFieldType } from '../types';\nimport { DATASTORE, establishRelationAndKeys, exhaustiveCheck, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver } from '../util';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = JS.browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap(); // stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\n\nvar modelPatchesMap = new WeakMap();\n\nvar getModelDefinition = function (modelConstructor) {\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  return schema.namespaces[namespace].models[modelConstructor.name];\n};\n\nvar isValidModelConstructor = function (obj) {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\n\nvar namespaceResolver = function (modelConstructor) {\n  return modelNamespaceMap.get(modelConstructor);\n}; // exporting syncClasses for testing outbox.test.ts\n\n\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n\nvar initSchema = function (userSchema) {\n  var _a;\n\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_1, _a;\n\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n        relations = _b[0],\n        keys = _b[1];\n\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels);\n    });\n    var result = new Map();\n    var count = 1000;\n\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n\n      count--;\n\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n\n      try {\n        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n\n          if (parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        modelName = _b[0],\n        modelDefinition = _b[1];\n\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        typeName = _b[0],\n        typeDefinition = _b[1];\n\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n\nvar instancesMetadata = new WeakSet();\n\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\n\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n\n    if (fieldDefinition !== undefined) {\n      var type = fieldDefinition.type,\n          isRequired_1 = fieldDefinition.isRequired,\n          isArrayNullable = fieldDefinition.isArrayNullable,\n          name_1 = fieldDefinition.name,\n          isArray = fieldDefinition.isArray;\n\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n\n      if (isGraphQLScalarType(type)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type);\n\n        if (type === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n\n        if (isArray) {\n          var errorTypeText = jsType_1;\n\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v)) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type + \", validation failed. \" + v);\n        }\n      }\n    }\n  };\n};\n\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n      isArray = _a.isArray,\n      type = _a.type; // attempt to parse stringified JSON\n\n\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {// if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  } // cast from numeric representation of boolean to JS boolean\n\n\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n\n  return v;\n};\n\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\n\nvar createModelClass = function (modelDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft);\n        var modelInstanceMetadata = instancesMetadata.has(init) ? init : {};\n        var _id = modelInstanceMetadata.id,\n            _version = modelInstanceMetadata._version,\n            _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n            _deleted = modelInstanceMetadata._deleted; // instancesIds are set by modelInstanceCreator, it is accessible only internally\n\n        var isInternal = _id !== null && _id !== undefined;\n        var id = isInternal ? _id : modelDefinition.syncable ? uuid4() : ulid();\n\n        if (!isInternal) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n\n        draft.id = id;\n\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      });\n      return instance;\n    }\n\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n\n      var patches;\n      var model = produce(source, function (draft) {\n        fn(draft);\n        draft.id = source.id;\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n              k = _b[0],\n              v = _b[1];\n\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n      }, function (p) {\n        return patches = p;\n      });\n\n      if (patches.length) {\n        modelPatchesMap.set(model, [patches, source]);\n        checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n      }\n\n      return model;\n    }; // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\n\n    Model.fromJSON = function (json) {\n      var _this = this;\n\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n\n        modelValidator(k, v);\n      });\n      return instance;\n    };\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  return clazz;\n};\n\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        val = _b[1];\n\n    if (!val || !fields[key]) return;\n\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar createNonModelClass = function (typeDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\n\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n      modelConstructor = conflictData.modelConstructor,\n      remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\n\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\n\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n\n    case USER:\n      result = userClasses[modelName];\n      break;\n\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n\n    default:\n      exhaustiveCheck(namespaceName);\n      break;\n  }\n\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4\n          /*yield*/\n          , storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                      // @ts-ignore Argument of type '\"eq\"' is not assignable to parameter of type 'never'.\n                      return c.key('eq', SETTING_SCHEMA_VERSION);\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3\n                    /*break*/\n                    , 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , s.clear(false)];\n\n                  case 2:\n                    _b.sent();\n\n                    _b.label = 3;\n\n                  case 3:\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 4:\n                    return [4\n                    /*yield*/\n                    , s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n\n                  case 5:\n                    _b.sent();\n\n                    _b.label = 6;\n\n                  case 6:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nvar syncSubscription;\n\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\n\nvar DataStore =\n/** @class */\nfunction () {\n  function DataStore() {\n    var _this = this;\n\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap();\n\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n\n        var _this = this;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!(this.initialized === undefined)) return [3\n              /*break*/\n              , 1];\n              logger.debug('Starting DataStore');\n              this.initialized = new Promise(function (res, rej) {\n                _this.initResolve = res;\n                _this.initReject = rej;\n              });\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              return [4\n              /*yield*/\n              , this.initialized];\n\n            case 2:\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n\n            case 3:\n              this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n              return [4\n              /*yield*/\n              , this.storage.init()];\n\n            case 4:\n              _b.sent();\n\n              return [4\n              /*yield*/\n              , checkSchemaVersion(this.storage, schema.version)];\n\n            case 5:\n              _b.sent();\n\n              aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n              if (!aws_appsync_graphqlEndpoint) return [3\n              /*break*/\n              , 7];\n              logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n              _a = this;\n              return [4\n              /*yield*/\n              , this.processSyncExpressions()];\n\n            case 6:\n              _a.syncPredicates = _b.sent();\n              this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.maxRecordsToSync, this.syncPageSize, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy);\n              fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n              syncSubscription = this.sync.start({\n                fullSyncInterval: fullSyncIntervalInMilliseconds\n              }).subscribe({\n                next: function (_a) {\n                  var type = _a.type,\n                      data = _a.data; // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                  // In the Browser, we can begin returning data once subscriptions are in place.\n\n                  var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n                  if (type === readyType) {\n                    _this.initResolve();\n                  }\n\n                  Hub.dispatch('datastore', {\n                    event: type,\n                    data: data\n                  });\n                },\n                error: function (err) {\n                  logger.warn('Sync error', err);\n\n                  _this.initReject();\n                }\n              });\n              return [3\n              /*break*/\n              , 8];\n\n            case 7:\n              logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                config: this.amplifyConfig\n              });\n              this.initResolve();\n              _b.label = 8;\n\n            case 8:\n              return [4\n              /*yield*/\n              , this.initialized];\n\n            case 9:\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this.query = function (modelConstructor, idOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var msg, modelDefinition, predicate, pagination, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _a.sent(); //#region Input validation\n\n\n              if (!isValidModelConstructor(modelConstructor)) {\n                msg = 'Constructor is not for a valid model';\n                logger.error(msg, {\n                  modelConstructor: modelConstructor\n                });\n                throw new Error(msg);\n              }\n\n              if (typeof idOrCriteria === 'string') {\n                if (paginationProducer !== undefined) {\n                  logger.warn('Pagination is ignored when querying by id');\n                }\n              }\n\n              modelDefinition = getModelDefinition(modelConstructor);\n\n              if (isQueryOne(idOrCriteria)) {\n                predicate = ModelPredicateCreator.createForId(modelDefinition, idOrCriteria);\n              } else {\n                if (isPredicatesAll(idOrCriteria)) {\n                  // Predicates.ALL means \"all records\", so no predicate (undefined)\n                  predicate = undefined;\n                } else {\n                  predicate = ModelPredicateCreator.createFromExisting(modelDefinition, idOrCriteria);\n                }\n              }\n\n              pagination = this.processPagination(modelDefinition, paginationProducer); //#endregion\n\n              logger.debug('params ready', {\n                modelConstructor: modelConstructor,\n                predicate: ModelPredicateCreator.getPredicates(predicate, false),\n                pagination: __assign(__assign({}, pagination), {\n                  sort: ModelSortPredicateCreator.getPredicates(pagination && pagination.sort, false)\n                })\n              });\n              return [4\n              /*yield*/\n              , this.storage.query(modelConstructor, predicate, pagination)];\n\n            case 2:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , isQueryOne(idOrCriteria) ? result[0] : result];\n          }\n        });\n      });\n    };\n\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var patchesTuple, modelConstructor, msg, modelDefinition, producedCondition, _a, savedModel;\n\n        var _this = this;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _b.sent();\n\n              patchesTuple = modelPatchesMap.get(model);\n              modelConstructor = model ? model.constructor : undefined;\n\n              if (!isValidModelConstructor(modelConstructor)) {\n                msg = 'Object is not an instance of a valid model';\n                logger.error(msg, {\n                  model: model\n                });\n                throw new Error(msg);\n              }\n\n              modelDefinition = getModelDefinition(modelConstructor);\n              producedCondition = ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n              return [4\n              /*yield*/\n              , this.storage.runExclusive(function (s) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , s.save(model, producedCondition, undefined, patchesTuple)];\n\n                      case 1:\n                        _a.sent();\n\n                        return [2\n                        /*return*/\n                        , s.query(modelConstructor, ModelPredicateCreator.createForId(modelDefinition, model.id))];\n                    }\n                  });\n                });\n              })];\n\n            case 2:\n              _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n              return [2\n              /*return*/\n              , savedModel];\n          }\n        });\n      });\n    };\n\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n\n      return _this.errorHandler || defaultErrorHandler;\n    };\n\n    this.delete = function (modelOrConstructor, idOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var condition, msg, modelConstructor, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, idPredicate, msg, _b, _c, deleted;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _d.sent();\n\n              if (!modelOrConstructor) {\n                msg = 'Model or Model Constructor required';\n                logger.error(msg, {\n                  modelOrConstructor: modelOrConstructor\n                });\n                throw new Error(msg);\n              }\n\n              if (!isValidModelConstructor(modelOrConstructor)) return [3\n              /*break*/\n              , 3];\n              modelConstructor = modelOrConstructor;\n\n              if (!idOrCriteria) {\n                msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                logger.error(msg, {\n                  idOrCriteria: idOrCriteria\n                });\n                throw new Error(msg);\n              }\n\n              if (typeof idOrCriteria === 'string') {\n                condition = ModelPredicateCreator.createForId(getModelDefinition(modelConstructor), idOrCriteria);\n              } else {\n                condition = ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor),\n                /**\n                 * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n                 * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n                 */\n                idOrCriteria);\n\n                if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                  msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                  logger.error(msg, {\n                    condition: condition\n                  });\n                  throw new Error(msg);\n                }\n              }\n\n              return [4\n              /*yield*/\n              , this.storage.delete(modelConstructor, condition)];\n\n            case 2:\n              _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n              return [2\n              /*return*/\n              , deleted];\n\n            case 3:\n              model = modelOrConstructor;\n              modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n\n              if (!isValidModelConstructor(modelConstructor)) {\n                msg = 'Object is not an instance of a valid model';\n                logger.error(msg, {\n                  model: model\n                });\n                throw new Error(msg);\n              }\n\n              modelDefinition = getModelDefinition(modelConstructor);\n              idPredicate = ModelPredicateCreator.createForId(modelDefinition, model.id);\n\n              if (idOrCriteria) {\n                if (typeof idOrCriteria !== 'function') {\n                  msg = 'Invalid criteria';\n                  logger.error(msg, {\n                    idOrCriteria: idOrCriteria\n                  });\n                  throw new Error(msg);\n                }\n\n                condition = idOrCriteria(idPredicate);\n              } else {\n                condition = idPredicate;\n              }\n\n              return [4\n              /*yield*/\n              , this.storage.delete(model, condition)];\n\n            case 4:\n              _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n              return [2\n              /*return*/\n              , deleted];\n          }\n        });\n      });\n    };\n\n    this.observe = function (modelOrConstructor, idOrCriteria) {\n      var predicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (idOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              idOrCriteria: idOrCriteria\n            });\n          }\n\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      }\n\n      if (idOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, idOrCriteria);\n        throw new Error(msg);\n      }\n\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n\n      if (typeof idOrCriteria === 'string') {\n        predicate = ModelPredicateCreator.createForId(getModelDefinition(modelConstructor), idOrCriteria);\n      } else {\n        predicate = modelConstructor && ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor), idOrCriteria);\n      }\n\n      return new Observable(function (observer) {\n        var handle;\n\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , this.start()];\n\n                case 1:\n                  _a.sent();\n\n                  handle = this.storage.observe(modelConstructor, predicate).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe(observer);\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })();\n\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    };\n\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle;\n\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        }; // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\n\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n\n                  return [4\n                  /*yield*/\n                  , this.query(model, criteria, sortOptions)];\n\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    return items.set(item.id, item);\n                  }); // observe the model and send a stream of updates (debounced)\n\n\n                  handle = this.observe(model, // @ts-ignore TODO: fix this TSlint error\n                  criteria).subscribe(function (_a) {\n                    var element = _a.element,\n                        model = _a.model,\n                        opType = _a.opType;\n\n                    var _b, _c; // Flag items which have been recently deleted\n                    // NOTE: Merging of separate operations to the same model instance is handled upstream\n                    // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                    // depends on the LATEST record (for a given id).\n\n\n                    if (opType === 'DELETE') {\n                      deletedItemIds.push(element.id);\n                    } else {\n                      itemsChanged.set(element.id, element);\n                    }\n\n                    var isSynced = (_c = (_b = _this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                    var limit = itemsChanged.size - deletedItemIds.length >= _this.syncPageSize;\n\n                    if (limit || isSynced) {\n                      limitTimerRace.resolve();\n                    } // kicks off every subsequent race as results sync down\n\n\n                    limitTimerRace.start();\n                  }); // returns a set of initial/locally-available results\n\n                  generateAndEmitSnapshot();\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 3:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })(); // TODO: abstract this function into a util file to be able to write better unit tests\n\n\n        var generateSnapshot = function () {\n          var _a, _b;\n\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(itemsArray);\n          }\n\n          items.clear();\n          itemsArray.forEach(function (item) {\n            return items.set(item.id, item);\n          }); // remove deleted items from the final result set\n\n          deletedItemIds.forEach(function (id) {\n            return items.delete(id);\n          });\n          return {\n            items: Array.from(items.values()),\n            isSynced: isSynced\n          };\n        };\n\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription\n          observer.next(snapshot); // reset the changed items sets\n\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n\n          var pagination = _this.processPagination(modelDefinition, options);\n\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        }; // send one last snapshot when the model is fully synced\n\n\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n\n          var _b;\n\n          var event = payload.event,\n              data = payload.data;\n\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('api', hubCallback);\n          }\n        };\n\n        Hub.listen('datastore', hubCallback);\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    };\n\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n\n      var configDataStore = config.DataStore,\n          configAuthModeStrategyType = config.authModeStrategyType,\n          configConflictHandler = config.conflictHandler,\n          configErrorHandler = config.errorHandler,\n          configMaxRecordsToSync = config.maxRecordsToSync,\n          configSyncPageSize = config.syncPageSize,\n          configFullSyncInterval = config.fullSyncInterval,\n          configSyncExpressions = config.syncExpressions,\n          configAuthProviders = config.authProviders,\n          configStorageAdapter = config.storageAdapter,\n          configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy;\n          break;\n\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      } // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || _this.syncExpressions || configSyncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || 10000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || 1000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || _this.fullSyncInterval || configFullSyncInterval || 24 * 60; // 1 day\n\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || _this.storageAdapter || configStorageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n\n    this.clear = function clear() {\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (this.storage === undefined) {\n                return [2\n                /*return*/\n                ];\n              }\n\n              if (syncSubscription && !syncSubscription.closed) {\n                syncSubscription.unsubscribe();\n              }\n\n              return [4\n              /*yield*/\n              , this.storage.clear()];\n\n            case 1:\n              _a.sent();\n\n              if (this.sync) {\n                this.sync.unsubscribeConnectivity();\n              }\n\n              this.initialized = undefined; // Should re-initialize when start() is called.\n\n              this.storage = undefined;\n              this.sync = undefined;\n              this.syncPredicates = new WeakMap();\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this.stop = function stop() {\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(this.initialized !== undefined)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              if (syncSubscription && !syncSubscription.closed) {\n                syncSubscription.unsubscribe();\n              }\n\n              if (this.sync) {\n                this.sync.unsubscribeConnectivity();\n              }\n\n              this.initialized = undefined; // Should re-initialize when start() is called.\n\n              this.sync = undefined;\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n  }\n\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n\n    var _a = paginationProducer || {},\n        limit = _a.limit,\n        page = _a.page,\n        sort = _a.sort;\n\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, paginationProducer.sort);\n    }\n\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2\n              /*return*/\n              , new WeakMap()];\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , syncExpression];\n\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4\n                      /*yield*/\n                      , this.unwrapPromise(conditionProducer)];\n\n                    case 2:\n                      condition = _b.sent();\n\n                      if (isPredicatesAll(condition)) {\n                        return [2\n                        /*return*/\n                        , [modelDefinition, null]];\n                      }\n\n                      predicate = this.createFromCondition(modelDefinition, condition);\n                      return [2\n                      /*return*/\n                      , [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            syncPredicates = _a.sent();\n            return [2\n            /*return*/\n            , this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n    try {\n      return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n    } catch (error) {\n      logger.error('Error creating Sync Predicate');\n      throw error;\n    }\n  };\n\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , conditionProducer()];\n\n          case 1:\n            condition = _a.sent();\n            return [2\n            /*return*/\n            , condition];\n\n          case 2:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof TypeError) {\n              return [2\n              /*return*/\n              , conditionProducer];\n            }\n\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n          modelDefinition = _b[0],\n          predicate = _b[1];\n\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n\n      return map;\n    }, new WeakMap());\n  }; // database separation for Amplify Console. Not a public API\n\n\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\n        var _a = __read(appSyncUrl.split('.'), 1),\n            appSyncId = _a[0];\n\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {\n      return undefined;\n    }\n  };\n\n  return DataStore;\n}();\n\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\datastore\\src\\datastore\\datastore.ts"],"names":[],"mappings":"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","sourcesContent":["import { Amplify, ConsoleLogger as Logger, Hub, JS } from '@aws-amplify/core';\nimport {\n\tDraft,\n\timmerable,\n\tproduce,\n\tsetAutoFreeze,\n\tenablePatches,\n\tPatch,\n} from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport {\n\tisPredicatesAll,\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n\tPredicateAll,\n} from '../predicates';\nimport { Adapter } from '../storage/adapter';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport {\n\tAuthModeStrategy,\n\tConflictHandler,\n\tDataStoreConfig,\n\tGraphQLScalarType,\n\tInternalSchema,\n\tisGraphQLScalarType,\n\tModelFieldType,\n\tModelInit,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tSortPredicate,\n\tMutableModel,\n\tNamespaceResolver,\n\tNonModelTypeConstructor,\n\tProducerPaginationInput,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tProducerModelPredicate,\n\tSchema,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tSubscriptionMessage,\n\tDataStoreSnapshot,\n\tSyncConflict,\n\tSyncError,\n\tTypeConstructorMap,\n\tErrorHandler,\n\tSyncExpression,\n\tAuthModeStrategyType,\n\tisNonModelFieldType,\n\tisModelFieldType,\n\tObserveQueryOptions,\n} from '../types';\nimport {\n\tDATASTORE,\n\testablishRelationAndKeys,\n\texhaustiveCheck,\n\tisModelConstructor,\n\tmonotonicUlidFactory,\n\tNAMESPACES,\n\tSTORAGE,\n\tSYNC,\n\tUSER,\n\tisNullOrUndefined,\n\tregisterNonModelClass,\n\tsortCompareFunction,\n\tDeferredCallbackResolver,\n} from '../util';\n\nsetAutoFreeze(true);\nenablePatches();\n\nconst logger = new Logger('DataStore');\n\nconst ulid = monotonicUlidFactory(Date.now());\nconst { isNode } = JS.browserOrNode();\n\ndeclare class Setting {\n\tconstructor(init: ModelInit<Setting>);\n\tstatic copyOf(\n\t\tsrc: Setting,\n\t\tmutator: (draft: MutableModel<Setting>) => void | Setting\n\t): Setting;\n\tpublic readonly id: string;\n\tpublic readonly key: string;\n\tpublic readonly value: string;\n}\n\nconst SETTING_SCHEMA_VERSION = 'schemaVersion';\n\nlet schema: InternalSchema;\nconst modelNamespaceMap = new WeakMap<\n\tPersistentModelConstructor<any>,\n\tstring\n>();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nconst modelPatchesMap = new WeakMap<\n\tPersistentModel,\n\t[Patch[], PersistentModel]\n>();\n\nconst getModelDefinition = (\n\tmodelConstructor: PersistentModelConstructor<any>\n) => {\n\tconst namespace = modelNamespaceMap.get(modelConstructor);\n\n\treturn schema.namespaces[namespace].models[modelConstructor.name];\n};\n\nconst isValidModelConstructor = <T extends PersistentModel>(\n\tobj: any\n): obj is PersistentModelConstructor<T> => {\n\treturn isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\n\nconst namespaceResolver: NamespaceResolver = modelConstructor =>\n\tmodelNamespaceMap.get(modelConstructor);\n\n// exporting syncClasses for testing outbox.test.ts\nexport let syncClasses: TypeConstructorMap;\nlet userClasses: TypeConstructorMap;\nlet dataStoreClasses: TypeConstructorMap;\nlet storageClasses: TypeConstructorMap;\n\nconst initSchema = (userSchema: Schema) => {\n\tif (schema !== undefined) {\n\t\tconsole.warn('The schema has already been initialized');\n\n\t\treturn userClasses;\n\t}\n\n\tlogger.log('validating schema', { schema: userSchema });\n\n\tconst internalUserNamespace: SchemaNamespace = {\n\t\tname: USER,\n\t\t...userSchema,\n\t};\n\n\tlogger.log('DataStore', 'Init models');\n\tuserClasses = createTypeClasses(internalUserNamespace);\n\tlogger.log('DataStore', 'Models initialized');\n\n\tconst dataStoreNamespace = getNamespace();\n\tconst storageNamespace = Storage.getNamespace();\n\tconst syncNamespace = SyncEngine.getNamespace();\n\n\tdataStoreClasses = createTypeClasses(dataStoreNamespace);\n\tstorageClasses = createTypeClasses(storageNamespace);\n\tsyncClasses = createTypeClasses(syncNamespace);\n\n\tschema = {\n\t\tnamespaces: {\n\t\t\t[dataStoreNamespace.name]: dataStoreNamespace,\n\t\t\t[internalUserNamespace.name]: internalUserNamespace,\n\t\t\t[storageNamespace.name]: storageNamespace,\n\t\t\t[syncNamespace.name]: syncNamespace,\n\t\t},\n\t\tversion: userSchema.version,\n\t};\n\n\tObject.keys(schema.namespaces).forEach(namespace => {\n\t\tconst [relations, keys] = establishRelationAndKeys(\n\t\t\tschema.namespaces[namespace]\n\t\t);\n\n\t\tschema.namespaces[namespace].relationships = relations;\n\t\tschema.namespaces[namespace].keys = keys;\n\n\t\tconst modelAssociations = new Map<string, string[]>();\n\n\t\tObject.values(schema.namespaces[namespace].models).forEach(model => {\n\t\t\tconst connectedModels: string[] = [];\n\n\t\t\tObject.values(model.fields)\n\t\t\t\t.filter(\n\t\t\t\t\tfield =>\n\t\t\t\t\t\tfield.association &&\n\t\t\t\t\t\tfield.association.connectionType === 'BELONGS_TO' &&\n\t\t\t\t\t\t(<ModelFieldType>field.type).model !== model.name\n\t\t\t\t)\n\t\t\t\t.forEach(field =>\n\t\t\t\t\tconnectedModels.push((<ModelFieldType>field.type).model)\n\t\t\t\t);\n\n\t\t\tmodelAssociations.set(model.name, connectedModels);\n\t\t});\n\n\t\tconst result = new Map<string, string[]>();\n\n\t\tlet count = 1000;\n\t\twhile (true && count > 0) {\n\t\t\tif (modelAssociations.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tif (count === 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Models are not topologically sortable. Please verify your schema.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const modelName of Array.from(modelAssociations.keys())) {\n\t\t\t\tconst parents = modelAssociations.get(modelName);\n\n\t\t\t\tif (parents.every(x => result.has(x))) {\n\t\t\t\t\tresult.set(modelName, parents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArray.from(result.keys()).forEach(x => modelAssociations.delete(x));\n\t\t}\n\n\t\tschema.namespaces[namespace].modelTopologicalOrdering = result;\n\t});\n\n\treturn userClasses;\n};\n\nconst createTypeClasses: (\n\tnamespace: SchemaNamespace\n) => TypeConstructorMap = namespace => {\n\tconst classes: TypeConstructorMap = {};\n\n\tObject.entries(namespace.models).forEach(([modelName, modelDefinition]) => {\n\t\tconst clazz = createModelClass(modelDefinition);\n\t\tclasses[modelName] = clazz;\n\n\t\tmodelNamespaceMap.set(clazz, namespace.name);\n\t});\n\n\tObject.entries(namespace.nonModels || {}).forEach(\n\t\t([typeName, typeDefinition]) => {\n\t\t\tconst clazz = createNonModelClass(typeDefinition);\n\t\t\tclasses[typeName] = clazz;\n\t\t}\n\t);\n\n\treturn classes;\n};\n\nexport declare type ModelInstanceCreator = typeof modelInstanceCreator;\n\nconst instancesMetadata = new WeakSet<\n\tModelInit<PersistentModel & Partial<ModelInstanceMetadata>>\n>();\nfunction modelInstanceCreator<T extends PersistentModel = PersistentModel>(\n\tmodelConstructor: PersistentModelConstructor<T>,\n\tinit: ModelInit<T> & Partial<ModelInstanceMetadata>\n): T {\n\tinstancesMetadata.add(init);\n\n\treturn <T>new modelConstructor(init);\n}\n\nconst validateModelFields =\n\t(modelDefinition: SchemaModel | SchemaNonModel) => (k: string, v: any) => {\n\t\tconst fieldDefinition = modelDefinition.fields[k];\n\n\t\tif (fieldDefinition !== undefined) {\n\t\t\tconst { type, isRequired, isArrayNullable, name, isArray } =\n\t\t\t\tfieldDefinition;\n\n\t\t\tif (\n\t\t\t\t((!isArray && isRequired) || (isArray && !isArrayNullable)) &&\n\t\t\t\t(v === null || v === undefined)\n\t\t\t) {\n\t\t\t\tthrow new Error(`Field ${name} is required`);\n\t\t\t}\n\n\t\t\tif (isGraphQLScalarType(type)) {\n\t\t\t\tconst jsType = GraphQLScalarType.getJSType(type);\n\t\t\t\tconst validateScalar = GraphQLScalarType.getValidationFunction(type);\n\n\t\t\t\tif (type === 'AWSJSON') {\n\t\t\t\t\tif (typeof v === jsType) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof v === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tJSON.parse(v);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new Error(`Field ${name} is an invalid JSON object. ${v}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isArray) {\n\t\t\t\t\tlet errorTypeText: string = jsType;\n\t\t\t\t\tif (!isRequired) {\n\t\t\t\t\t\terrorTypeText = `${jsType} | null | undefined`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!Array.isArray(v) && !isArrayNullable) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isNullOrUndefined(v) &&\n\t\t\t\t\t\t(<[]>v).some(e =>\n\t\t\t\t\t\t\tisNullOrUndefined(e) ? isRequired : typeof e !== jsType\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst elemTypes = (<[]>v)\n\t\t\t\t\t\t\t.map(e => (e === null ? 'null' : typeof e))\n\t\t\t\t\t\t\t.join(',');\n\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${errorTypeText}, [${elemTypes}] received. ${v}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validateScalar && !isNullOrUndefined(v)) {\n\t\t\t\t\t\tconst validationStatus = (<[]>v).map(e => {\n\t\t\t\t\t\t\tif (!isNullOrUndefined(e)) {\n\t\t\t\t\t\t\t\treturn validateScalar(e);\n\t\t\t\t\t\t\t} else if (isNullOrUndefined(e) && !isRequired) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!validationStatus.every(s => s)) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${type}, validation failed for one or more elements. ${v}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (!isRequired && v === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (typeof v !== jsType && v !== null) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Field ${name} should be of type ${jsType}, ${typeof v} received. ${v}`\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\t!isNullOrUndefined(v) &&\n\t\t\t\t\tvalidateScalar &&\n\t\t\t\t\t!validateScalar(v)\n\t\t\t\t) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Field ${name} should be of type ${type}, validation failed. ${v}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\nconst castInstanceType = (\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tk: string,\n\tv: any\n) => {\n\tconst { isArray, type } = modelDefinition.fields[k] || {};\n\t// attempt to parse stringified JSON\n\tif (\n\t\ttypeof v === 'string' &&\n\t\t(isArray ||\n\t\t\ttype === 'AWSJSON' ||\n\t\t\tisNonModelFieldType(type) ||\n\t\t\tisModelFieldType(type))\n\t) {\n\t\ttry {\n\t\t\treturn JSON.parse(v);\n\t\t} catch {\n\t\t\t// if JSON is invalid, don't throw and let modelValidator handle it\n\t\t}\n\t}\n\n\t// cast from numeric representation of boolean to JS boolean\n\tif (typeof v === 'number' && type === 'Boolean') {\n\t\treturn Boolean(v);\n\t}\n\n\treturn v;\n};\n\nconst initializeInstance = <T>(\n\tinit: ModelInit<T>,\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tdraft: Draft<T & ModelInstanceMetadata>\n) => {\n\tconst modelValidator = validateModelFields(modelDefinition);\n\tObject.entries(init).forEach(([k, v]) => {\n\t\tconst parsedValue = castInstanceType(modelDefinition, k, v);\n\n\t\tmodelValidator(k, parsedValue);\n\t\t(<any>draft)[k] = parsedValue;\n\t});\n};\n\nconst createModelClass = <T extends PersistentModel>(\n\tmodelDefinition: SchemaModel\n) => {\n\tconst clazz = <PersistentModelConstructor<T>>(<unknown>class Model {\n\t\tconstructor(init: ModelInit<T>) {\n\t\t\tconst instance = produce(\n\t\t\t\tthis,\n\t\t\t\t(draft: Draft<T & ModelInstanceMetadata>) => {\n\t\t\t\t\tinitializeInstance(init, modelDefinition, draft);\n\n\t\t\t\t\tconst modelInstanceMetadata: ModelInstanceMetadata =\n\t\t\t\t\t\tinstancesMetadata.has(init)\n\t\t\t\t\t\t\t? <ModelInstanceMetadata>(<unknown>init)\n\t\t\t\t\t\t\t: <ModelInstanceMetadata>{};\n\t\t\t\t\tconst {\n\t\t\t\t\t\tid: _id,\n\t\t\t\t\t\t_version,\n\t\t\t\t\t\t_lastChangedAt,\n\t\t\t\t\t\t_deleted,\n\t\t\t\t\t} = modelInstanceMetadata;\n\n\t\t\t\t\t// instancesIds are set by modelInstanceCreator, it is accessible only internally\n\t\t\t\t\tconst isInternal = _id !== null && _id !== undefined;\n\n\t\t\t\t\tconst id = isInternal\n\t\t\t\t\t\t? _id\n\t\t\t\t\t\t: modelDefinition.syncable\n\t\t\t\t\t\t? uuid4()\n\t\t\t\t\t\t: ulid();\n\n\t\t\t\t\tif (!isInternal) {\n\t\t\t\t\t\tcheckReadOnlyPropertyOnCreate(draft, modelDefinition);\n\t\t\t\t\t}\n\n\t\t\t\t\tdraft.id = id;\n\n\t\t\t\t\tif (modelDefinition.syncable) {\n\t\t\t\t\t\tdraft._version = _version;\n\t\t\t\t\t\tdraft._lastChangedAt = _lastChangedAt;\n\t\t\t\t\t\tdraft._deleted = _deleted;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn instance;\n\t\t}\n\n\t\tstatic copyOf(source: T, fn: (draft: MutableModel<T>) => T) {\n\t\t\tconst modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\tconst msg = 'The source object is not a valid model';\n\t\t\t\tlogger.error(msg, { source });\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tlet patches;\n\t\t\tconst model = produce(\n\t\t\t\tsource,\n\t\t\t\tdraft => {\n\t\t\t\t\tfn(<MutableModel<T>>(draft as unknown));\n\t\t\t\t\tdraft.id = source.id;\n\t\t\t\t\tconst modelValidator = validateModelFields(modelDefinition);\n\t\t\t\t\tObject.entries(draft).forEach(([k, v]) => {\n\t\t\t\t\t\tconst parsedValue = castInstanceType(modelDefinition, k, v);\n\n\t\t\t\t\t\tmodelValidator(k, parsedValue);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tp => (patches = p)\n\t\t\t);\n\n\t\t\tif (patches.length) {\n\t\t\t\tmodelPatchesMap.set(model, [patches, source]);\n\t\t\t\tcheckReadOnlyPropertyOnUpdate(patches, modelDefinition);\n\t\t\t}\n\n\t\t\treturn model;\n\t\t}\n\n\t\t// \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n\t\t// to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\t\tstatic fromJSON(json: T | T[]) {\n\t\t\tif (Array.isArray(json)) {\n\t\t\t\treturn json.map(init => this.fromJSON(init));\n\t\t\t}\n\n\t\t\tconst instance = modelInstanceCreator(clazz, json);\n\t\t\tconst modelValidator = validateModelFields(modelDefinition);\n\n\t\t\tObject.entries(instance).forEach(([k, v]) => {\n\t\t\t\tmodelValidator(k, v);\n\t\t\t});\n\n\t\t\treturn instance;\n\t\t}\n\t});\n\n\tclazz[immerable] = true;\n\n\tObject.defineProperty(clazz, 'name', { value: modelDefinition.name });\n\n\treturn clazz;\n};\n\nconst checkReadOnlyPropertyOnCreate = <T extends PersistentModel>(\n\tdraft: T,\n\tmodelDefinition: SchemaModel\n) => {\n\tconst modelKeys = Object.keys(draft);\n\tconst { fields } = modelDefinition;\n\n\tmodelKeys.forEach(key => {\n\t\tif (fields[key] && fields[key].isReadOnly) {\n\t\t\tthrow new Error(`${key} is read-only.`);\n\t\t}\n\t});\n};\n\nconst checkReadOnlyPropertyOnUpdate = (\n\tpatches: Patch[],\n\tmodelDefinition: SchemaModel\n) => {\n\tconst patchArray = patches.map(p => [p.path[0], p.value]);\n\tconst { fields } = modelDefinition;\n\n\tpatchArray.forEach(([key, val]) => {\n\t\tif (!val || !fields[key]) return;\n\n\t\tif (fields[key].isReadOnly) {\n\t\t\tthrow new Error(`${key} is read-only.`);\n\t\t}\n\t});\n};\n\nconst createNonModelClass = <T>(typeDefinition: SchemaNonModel) => {\n\tconst clazz = <NonModelTypeConstructor<T>>(<unknown>class Model {\n\t\tconstructor(init: ModelInit<T>) {\n\t\t\tconst instance = produce(\n\t\t\t\tthis,\n\t\t\t\t(draft: Draft<T & ModelInstanceMetadata>) => {\n\t\t\t\t\tinitializeInstance(init, typeDefinition, draft);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn instance;\n\t\t}\n\t});\n\n\tclazz[immerable] = true;\n\n\tObject.defineProperty(clazz, 'name', { value: typeDefinition.name });\n\n\tregisterNonModelClass(clazz);\n\n\treturn clazz;\n};\n\nfunction isQueryOne(obj: any): obj is string {\n\treturn typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData: SyncConflict): PersistentModel {\n\tconst { localModel, modelConstructor, remoteModel } = conflictData;\n\tconst { _version } = remoteModel;\n\treturn modelInstanceCreator(modelConstructor, { ...localModel, _version });\n}\n\nfunction defaultErrorHandler(error: SyncError) {\n\tlogger.warn(error);\n}\n\nfunction getModelConstructorByModelName(\n\tnamespaceName: NAMESPACES,\n\tmodelName: string\n): PersistentModelConstructor<any> {\n\tlet result: PersistentModelConstructor<any> | NonModelTypeConstructor<any>;\n\n\tswitch (namespaceName) {\n\t\tcase DATASTORE:\n\t\t\tresult = dataStoreClasses[modelName];\n\t\t\tbreak;\n\t\tcase USER:\n\t\t\tresult = userClasses[modelName];\n\t\t\tbreak;\n\t\tcase SYNC:\n\t\t\tresult = syncClasses[modelName];\n\t\t\tbreak;\n\t\tcase STORAGE:\n\t\t\tresult = storageClasses[modelName];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texhaustiveCheck(namespaceName);\n\t\t\tbreak;\n\t}\n\n\tif (isValidModelConstructor(result)) {\n\t\treturn result;\n\t} else {\n\t\tconst msg = `Model name is not valid for namespace. modelName: ${modelName}, namespace: ${namespaceName}`;\n\t\tlogger.error(msg);\n\n\t\tthrow new Error(msg);\n\t}\n}\n\nasync function checkSchemaVersion(\n\tstorage: Storage,\n\tversion: string\n): Promise<void> {\n\tconst Setting =\n\t\tdataStoreClasses.Setting as PersistentModelConstructor<Setting>;\n\n\tconst modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n\n\tawait storage.runExclusive(async s => {\n\t\tconst [schemaVersionSetting] = await s.query(\n\t\t\tSetting,\n\t\t\tModelPredicateCreator.createFromExisting(modelDefinition, c =>\n\t\t\t\t// @ts-ignore Argument of type '\"eq\"' is not assignable to parameter of type 'never'.\n\t\t\t\tc.key('eq', SETTING_SCHEMA_VERSION)\n\t\t\t),\n\t\t\t{ page: 0, limit: 1 }\n\t\t);\n\n\t\tif (\n\t\t\tschemaVersionSetting !== undefined &&\n\t\t\tschemaVersionSetting.value !== undefined\n\t\t) {\n\t\t\tconst storedValue = JSON.parse(schemaVersionSetting.value);\n\n\t\t\tif (storedValue !== version) {\n\t\t\t\tawait s.clear(false);\n\t\t\t}\n\t\t} else {\n\t\t\tawait s.save(\n\t\t\t\tmodelInstanceCreator(Setting, {\n\t\t\t\t\tkey: SETTING_SCHEMA_VERSION,\n\t\t\t\t\tvalue: JSON.stringify(version),\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t});\n}\n\nlet syncSubscription: ZenObservable.Subscription;\n\nfunction getNamespace(): SchemaNamespace {\n\tconst namespace: SchemaNamespace = {\n\t\tname: DATASTORE,\n\t\trelationships: {},\n\t\tenums: {},\n\t\tnonModels: {},\n\t\tmodels: {\n\t\t\tSetting: {\n\t\t\t\tname: 'Setting',\n\t\t\t\tpluralName: 'Settings',\n\t\t\t\tsyncable: false,\n\t\t\t\tfields: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t\tkey: {\n\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\treturn namespace;\n}\n\nclass DataStore {\n\tprivate amplifyConfig: Record<string, any> = {};\n\tprivate authModeStrategy: AuthModeStrategy;\n\tprivate conflictHandler: ConflictHandler;\n\tprivate errorHandler: (error: SyncError) => void;\n\tprivate fullSyncInterval: number;\n\tprivate initialized: Promise<void>;\n\tprivate initReject: Function;\n\tprivate initResolve: Function;\n\tprivate maxRecordsToSync: number;\n\tprivate storage: Storage;\n\tprivate sync: SyncEngine;\n\tprivate syncPageSize: number;\n\tprivate syncExpressions: SyncExpression[];\n\tprivate syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>> =\n\t\tnew WeakMap<SchemaModel, ModelPredicate<any>>();\n\tprivate sessionId: string;\n\tprivate storageAdapter: Adapter;\n\n\tgetModuleName() {\n\t\treturn 'DataStore';\n\t}\n\n\tstart = async (): Promise<void> => {\n\t\tif (this.initialized === undefined) {\n\t\t\tlogger.debug('Starting DataStore');\n\t\t\tthis.initialized = new Promise((res, rej) => {\n\t\t\t\tthis.initResolve = res;\n\t\t\t\tthis.initReject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initialized;\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.storage = new Storage(\n\t\t\tschema,\n\t\t\tnamespaceResolver,\n\t\t\tgetModelConstructorByModelName,\n\t\t\tmodelInstanceCreator,\n\t\t\tthis.storageAdapter,\n\t\t\tthis.sessionId\n\t\t);\n\n\t\tawait this.storage.init();\n\n\t\tawait checkSchemaVersion(this.storage, schema.version);\n\n\t\tconst { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n\n\t\tif (aws_appsync_graphqlEndpoint) {\n\t\t\tlogger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n\n\t\t\tthis.syncPredicates = await this.processSyncExpressions();\n\n\t\t\tthis.sync = new SyncEngine(\n\t\t\t\tschema,\n\t\t\t\tnamespaceResolver,\n\t\t\t\tsyncClasses,\n\t\t\t\tuserClasses,\n\t\t\t\tthis.storage,\n\t\t\t\tmodelInstanceCreator,\n\t\t\t\tthis.maxRecordsToSync,\n\t\t\t\tthis.syncPageSize,\n\t\t\t\tthis.conflictHandler,\n\t\t\t\tthis.errorHandler,\n\t\t\t\tthis.syncPredicates,\n\t\t\t\tthis.amplifyConfig,\n\t\t\t\tthis.authModeStrategy\n\t\t\t);\n\n\t\t\t// tslint:disable-next-line:max-line-length\n\t\t\tconst fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60; // fullSyncInterval from param is in minutes\n\t\t\tsyncSubscription = this.sync\n\t\t\t\t.start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n\t\t\t\t.subscribe({\n\t\t\t\t\tnext: ({ type, data }) => {\n\t\t\t\t\t\t// In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n\t\t\t\t\t\t// In the Browser, we can begin returning data once subscriptions are in place.\n\t\t\t\t\t\tconst readyType = isNode\n\t\t\t\t\t\t\t? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n\t\t\t\t\t\t\t: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n\t\t\t\t\t\tif (type === readyType) {\n\t\t\t\t\t\t\tthis.initResolve();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHub.dispatch('datastore', {\n\t\t\t\t\t\t\tevent: type,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: err => {\n\t\t\t\t\t\tlogger.warn('Sync error', err);\n\t\t\t\t\t\tthis.initReject();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t} else {\n\t\t\tlogger.warn(\n\t\t\t\t\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\",\n\t\t\t\t{\n\t\t\t\t\tconfig: this.amplifyConfig,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis.initResolve();\n\t\t}\n\n\t\tawait this.initialized;\n\t};\n\n\tquery: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tid: string\n\t\t): Promise<T | undefined>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: ProducerModelPredicate<T> | typeof PredicateAll,\n\t\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t\t): Promise<T[]>;\n\t} = async <T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tidOrCriteria?: string | ProducerModelPredicate<T> | typeof PredicateAll,\n\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t): Promise<T | T[] | undefined> => {\n\t\tawait this.start();\n\n\t\t//#region Input validation\n\n\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Constructor is not for a valid model';\n\t\t\tlogger.error(msg, { modelConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (typeof idOrCriteria === 'string') {\n\t\t\tif (paginationProducer !== undefined) {\n\t\t\t\tlogger.warn('Pagination is ignored when querying by id');\n\t\t\t}\n\t\t}\n\n\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\t\tlet predicate: ModelPredicate<T>;\n\n\t\tif (isQueryOne(idOrCriteria)) {\n\t\t\tpredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\tmodelDefinition,\n\t\t\t\tidOrCriteria\n\t\t\t);\n\t\t} else {\n\t\t\tif (isPredicatesAll(idOrCriteria)) {\n\t\t\t\t// Predicates.ALL means \"all records\", so no predicate (undefined)\n\t\t\t\tpredicate = undefined;\n\t\t\t} else {\n\t\t\t\tpredicate = ModelPredicateCreator.createFromExisting(\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tidOrCriteria\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst pagination = this.processPagination(\n\t\t\tmodelDefinition,\n\t\t\tpaginationProducer\n\t\t);\n\n\t\t//#endregion\n\n\t\tlogger.debug('params ready', {\n\t\t\tmodelConstructor,\n\t\t\tpredicate: ModelPredicateCreator.getPredicates(predicate, false),\n\t\t\tpagination: {\n\t\t\t\t...pagination,\n\t\t\t\tsort: ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination && pagination.sort,\n\t\t\t\t\tfalse\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\n\t\tconst result = await this.storage.query(\n\t\t\tmodelConstructor,\n\t\t\tpredicate,\n\t\t\tpagination\n\t\t);\n\n\t\treturn isQueryOne(idOrCriteria) ? result[0] : result;\n\t};\n\n\tsave = async <T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ProducerModelPredicate<T>\n\t): Promise<T> => {\n\t\tawait this.start();\n\n\t\t// Immer patches for constructing a correct update mutation input\n\t\t// Allows us to only include changed fields for updates\n\t\tconst patchesTuple = modelPatchesMap.get(model);\n\n\t\tconst modelConstructor: PersistentModelConstructor<T> = model\n\t\t\t? <PersistentModelConstructor<T>>model.constructor\n\t\t\t: undefined;\n\n\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Object is not an instance of a valid model';\n\t\t\tlogger.error(msg, { model });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\tconst producedCondition = ModelPredicateCreator.createFromExisting(\n\t\t\tmodelDefinition,\n\t\t\tcondition\n\t\t);\n\n\t\tconst [savedModel] = await this.storage.runExclusive(async s => {\n\t\t\tawait s.save(model, producedCondition, undefined, patchesTuple);\n\n\t\t\treturn s.query(\n\t\t\t\tmodelConstructor,\n\t\t\t\tModelPredicateCreator.createForId(modelDefinition, model.id)\n\t\t\t);\n\t\t});\n\n\t\treturn savedModel;\n\t};\n\n\tsetConflictHandler = (config: DataStoreConfig): ConflictHandler => {\n\t\tconst { DataStore: configDataStore } = config;\n\n\t\tconst conflictHandlerIsDefault: () => boolean = () =>\n\t\t\tthis.conflictHandler === defaultConflictHandler;\n\n\t\tif (configDataStore && configDataStore.conflictHandler) {\n\t\t\treturn configDataStore.conflictHandler;\n\t\t}\n\t\tif (conflictHandlerIsDefault() && config.conflictHandler) {\n\t\t\treturn config.conflictHandler;\n\t\t}\n\n\t\treturn this.conflictHandler || defaultConflictHandler;\n\t};\n\n\tsetErrorHandler = (config: DataStoreConfig): ErrorHandler => {\n\t\tconst { DataStore: configDataStore } = config;\n\n\t\tconst errorHandlerIsDefault: () => boolean = () =>\n\t\t\tthis.errorHandler === defaultErrorHandler;\n\n\t\tif (configDataStore && configDataStore.errorHandler) {\n\t\t\treturn configDataStore.errorHandler;\n\t\t}\n\t\tif (errorHandlerIsDefault() && config.errorHandler) {\n\t\t\treturn config.errorHandler;\n\t\t}\n\n\t\treturn this.errorHandler || defaultErrorHandler;\n\t};\n\n\tdelete: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodel: T,\n\t\t\tcondition?: ProducerModelPredicate<T>\n\t\t): Promise<T>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tid: string\n\t\t): Promise<T[]>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcondition: ProducerModelPredicate<T> | typeof PredicateAll\n\t\t): Promise<T[]>;\n\t} = async <T extends PersistentModel>(\n\t\tmodelOrConstructor: T | PersistentModelConstructor<T>,\n\t\tidOrCriteria?: string | ProducerModelPredicate<T> | typeof PredicateAll\n\t) => {\n\t\tawait this.start();\n\n\t\tlet condition: ModelPredicate<T>;\n\n\t\tif (!modelOrConstructor) {\n\t\t\tconst msg = 'Model or Model Constructor required';\n\t\t\tlogger.error(msg, { modelOrConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (isValidModelConstructor(modelOrConstructor)) {\n\t\t\tconst modelConstructor = modelOrConstructor;\n\n\t\t\tif (!idOrCriteria) {\n\t\t\t\tconst msg =\n\t\t\t\t\t'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n\t\t\t\tlogger.error(msg, { idOrCriteria });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tif (typeof idOrCriteria === 'string') {\n\t\t\t\tcondition = ModelPredicateCreator.createForId<T>(\n\t\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\t\tidOrCriteria\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcondition = ModelPredicateCreator.createFromExisting(\n\t\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\t\t/**\n\t\t\t\t\t * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n\t\t\t\t\t * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n\t\t\t\t\t */\n\t\t\t\t\tidOrCriteria as ProducerModelPredicate<T>\n\t\t\t\t);\n\n\t\t\t\tif (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n\t\t\t\t\tconst msg =\n\t\t\t\t\t\t'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n\t\t\t\t\tlogger.error(msg, { condition });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst [deleted] = await this.storage.delete(modelConstructor, condition);\n\n\t\t\treturn deleted;\n\t\t} else {\n\t\t\tconst model = modelOrConstructor;\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model || {})\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\tconst msg = 'Object is not an instance of a valid model';\n\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\t\tconst idPredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\tmodelDefinition,\n\t\t\t\tmodel.id\n\t\t\t);\n\n\t\t\tif (idOrCriteria) {\n\t\t\t\tif (typeof idOrCriteria !== 'function') {\n\t\t\t\t\tconst msg = 'Invalid criteria';\n\t\t\t\t\tlogger.error(msg, { idOrCriteria });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tcondition = idOrCriteria(idPredicate);\n\t\t\t} else {\n\t\t\t\tcondition = idPredicate;\n\t\t\t}\n\n\t\t\tconst [[deleted]] = await this.storage.delete(model, condition);\n\n\t\t\treturn deleted;\n\t\t}\n\t};\n\n\tobserve: {\n\t\t(): Observable<SubscriptionMessage<PersistentModel>>;\n\n\t\t<T extends PersistentModel>(model: T): Observable<SubscriptionMessage<T>>;\n\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: string | ProducerModelPredicate<T>\n\t\t): Observable<SubscriptionMessage<T>>;\n\t} = <T extends PersistentModel = PersistentModel>(\n\t\tmodelOrConstructor?: T | PersistentModelConstructor<T>,\n\t\tidOrCriteria?: string | ProducerModelPredicate<T>\n\t): Observable<SubscriptionMessage<T>> => {\n\t\tlet predicate: ModelPredicate<T>;\n\n\t\tconst modelConstructor: PersistentModelConstructor<T> =\n\t\t\tmodelOrConstructor && isValidModelConstructor(modelOrConstructor)\n\t\t\t\t? modelOrConstructor\n\t\t\t\t: undefined;\n\n\t\tif (modelOrConstructor && modelConstructor === undefined) {\n\t\t\tconst model = <T>modelOrConstructor;\n\t\t\tconst modelConstructor =\n\t\t\t\tmodel && (<Object>Object.getPrototypeOf(model)).constructor;\n\n\t\t\tif (isValidModelConstructor<T>(modelConstructor)) {\n\t\t\t\tif (idOrCriteria) {\n\t\t\t\t\tlogger.warn('idOrCriteria is ignored when using a model instance', {\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tidOrCriteria,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.observe(modelConstructor, model.id);\n\t\t\t} else {\n\t\t\t\tconst msg =\n\t\t\t\t\t'The model is not an instance of a PersistentModelConstructor';\n\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tif (idOrCriteria !== undefined && modelConstructor === undefined) {\n\t\t\tconst msg = 'Cannot provide criteria without a modelConstructor';\n\t\t\tlogger.error(msg, idOrCriteria);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Constructor is not for a valid model';\n\t\t\tlogger.error(msg, { modelConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (typeof idOrCriteria === 'string') {\n\t\t\tpredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\tidOrCriteria\n\t\t\t);\n\t\t} else {\n\t\t\tpredicate =\n\t\t\t\tmodelConstructor &&\n\t\t\t\tModelPredicateCreator.createFromExisting<T>(\n\t\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\t\tidOrCriteria\n\t\t\t\t);\n\t\t}\n\n\t\treturn new Observable<SubscriptionMessage<T>>(observer => {\n\t\t\tlet handle: ZenObservable.Subscription;\n\n\t\t\t(async () => {\n\t\t\t\tawait this.start();\n\n\t\t\t\thandle = this.storage\n\t\t\t\t\t.observe(modelConstructor, predicate)\n\t\t\t\t\t.filter(({ model }) => namespaceResolver(model) === USER)\n\t\t\t\t\t.subscribe(observer);\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.unsubscribe();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tobserveQuery: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: ProducerModelPredicate<T> | typeof PredicateAll,\n\t\t\tpaginationProducer?: ObserveQueryOptions<T>\n\t\t): Observable<DataStoreSnapshot<T>>;\n\t} = <T extends PersistentModel = PersistentModel>(\n\t\tmodel: PersistentModelConstructor<T>,\n\t\tcriteria?: ProducerModelPredicate<T> | typeof PredicateAll,\n\t\toptions?: ObserveQueryOptions<T>\n\t): Observable<DataStoreSnapshot<T>> => {\n\t\treturn new Observable<DataStoreSnapshot<T>>(observer => {\n\t\t\tconst items = new Map<string, T>();\n\t\t\tconst itemsChanged = new Map<string, T>();\n\t\t\tlet deletedItemIds: string[] = [];\n\t\t\tlet handle: ZenObservable.Subscription;\n\n\t\t\tconst generateAndEmitSnapshot = (): void => {\n\t\t\t\tconst snapshot = generateSnapshot();\n\t\t\t\temitSnapshot(snapshot);\n\t\t\t};\n\n\t\t\t// a mechanism to return data after X amount of seconds OR after the\n\t\t\t// \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\t\t\tconst limitTimerRace = new DeferredCallbackResolver({\n\t\t\t\tcallback: generateAndEmitSnapshot,\n\t\t\t\terrorHandler: observer.error,\n\t\t\t\tmaxInterval: 2000,\n\t\t\t});\n\n\t\t\tconst { sort } = options || {};\n\t\t\tconst sortOptions = sort ? { sort } : undefined;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// first, query and return any locally-available records\n\t\t\t\t\t(await this.query(model, criteria, sortOptions)).forEach(item =>\n\t\t\t\t\t\titems.set(item.id, item)\n\t\t\t\t\t);\n\n\t\t\t\t\t// observe the model and send a stream of updates (debounced)\n\t\t\t\t\thandle = this.observe(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t// @ts-ignore TODO: fix this TSlint error\n\t\t\t\t\t\tcriteria\n\t\t\t\t\t).subscribe(({ element, model, opType }) => {\n\t\t\t\t\t\t// Flag items which have been recently deleted\n\t\t\t\t\t\t// NOTE: Merging of separate operations to the same model instance is handled upstream\n\t\t\t\t\t\t// in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n\t\t\t\t\t\t// depends on the LATEST record (for a given id).\n\t\t\t\t\t\tif (opType === 'DELETE') {\n\t\t\t\t\t\t\tdeletedItemIds.push(element.id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titemsChanged.set(element.id, element);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n\n\t\t\t\t\t\tconst limit =\n\t\t\t\t\t\t\titemsChanged.size - deletedItemIds.length >= this.syncPageSize;\n\n\t\t\t\t\t\tif (limit || isSynced) {\n\t\t\t\t\t\t\tlimitTimerRace.resolve();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// kicks off every subsequent race as results sync down\n\t\t\t\t\t\tlimitTimerRace.start();\n\t\t\t\t\t});\n\n\t\t\t\t\t// returns a set of initial/locally-available results\n\t\t\t\t\tgenerateAndEmitSnapshot();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tobserver.error(err);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\t// TODO: abstract this function into a util file to be able to write better unit tests\n\t\t\tconst generateSnapshot = (): DataStoreSnapshot<T> => {\n\t\t\t\tconst isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n\t\t\t\tconst itemsArray = [\n\t\t\t\t\t...Array.from(items.values()),\n\t\t\t\t\t...Array.from(itemsChanged.values()),\n\t\t\t\t];\n\n\t\t\t\tif (options?.sort) {\n\t\t\t\t\tsortItems(itemsArray);\n\t\t\t\t}\n\n\t\t\t\titems.clear();\n\t\t\t\titemsArray.forEach(item => items.set(item.id, item));\n\n\t\t\t\t// remove deleted items from the final result set\n\t\t\t\tdeletedItemIds.forEach(id => items.delete(id));\n\n\t\t\t\treturn {\n\t\t\t\t\titems: Array.from(items.values()),\n\t\t\t\t\tisSynced,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tconst emitSnapshot = (snapshot: DataStoreSnapshot<T>): void => {\n\t\t\t\t// send the generated snapshot to the primary subscription\n\t\t\t\tobserver.next(snapshot);\n\n\t\t\t\t// reset the changed items sets\n\t\t\t\titemsChanged.clear();\n\t\t\t\tdeletedItemIds = [];\n\t\t\t};\n\n\t\t\tconst sortItems = (itemsToSort: T[]): void => {\n\t\t\t\tconst modelDefinition = getModelDefinition(model);\n\t\t\t\tconst pagination = this.processPagination(modelDefinition, options);\n\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\titemsToSort.sort(compareFn);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// send one last snapshot when the model is fully synced\n\t\t\tconst hubCallback = ({ payload }): void => {\n\t\t\t\tconst { event, data } = payload;\n\t\t\t\tif (\n\t\t\t\t\tevent === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n\t\t\t\t\tdata?.model?.name === model.name\n\t\t\t\t) {\n\t\t\t\t\tgenerateAndEmitSnapshot();\n\t\t\t\t\tHub.remove('api', hubCallback);\n\t\t\t\t}\n\t\t\t};\n\t\t\tHub.listen('datastore', hubCallback);\n\n\t\t\treturn () => {\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.unsubscribe();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tconfigure = (config: DataStoreConfig = {}) => {\n\t\tconst {\n\t\t\tDataStore: configDataStore,\n\t\t\tauthModeStrategyType: configAuthModeStrategyType,\n\t\t\tconflictHandler: configConflictHandler,\n\t\t\terrorHandler: configErrorHandler,\n\t\t\tmaxRecordsToSync: configMaxRecordsToSync,\n\t\t\tsyncPageSize: configSyncPageSize,\n\t\t\tfullSyncInterval: configFullSyncInterval,\n\t\t\tsyncExpressions: configSyncExpressions,\n\t\t\tauthProviders: configAuthProviders,\n\t\t\tstorageAdapter: configStorageAdapter,\n\t\t\t...configFromAmplify\n\t\t} = config;\n\n\t\tthis.amplifyConfig = {\n\t\t\t...configFromAmplify,\n\t\t\t...this.amplifyConfig,\n\t\t};\n\n\t\tthis.conflictHandler = this.setConflictHandler(config);\n\t\tthis.errorHandler = this.setErrorHandler(config);\n\n\t\tconst authModeStrategyType =\n\t\t\t(configDataStore && configDataStore.authModeStrategyType) ||\n\t\t\tconfigAuthModeStrategyType ||\n\t\t\tAuthModeStrategyType.DEFAULT;\n\n\t\tswitch (authModeStrategyType) {\n\t\t\tcase AuthModeStrategyType.MULTI_AUTH:\n\t\t\t\tthis.authModeStrategy = multiAuthStrategy;\n\t\t\t\tbreak;\n\t\t\tcase AuthModeStrategyType.DEFAULT:\n\t\t\t\tthis.authModeStrategy = defaultAuthStrategy;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.authModeStrategy = defaultAuthStrategy;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.authProviders =\n\t\t\t(configDataStore && configDataStore.authProviders) || configAuthProviders;\n\n\t\tthis.syncExpressions =\n\t\t\t(configDataStore && configDataStore.syncExpressions) ||\n\t\t\tthis.syncExpressions ||\n\t\t\tconfigSyncExpressions;\n\n\t\tthis.maxRecordsToSync =\n\t\t\t(configDataStore && configDataStore.maxRecordsToSync) ||\n\t\t\tconfigMaxRecordsToSync ||\n\t\t\t10000;\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.maxRecordsToSync = this.maxRecordsToSync;\n\n\t\tthis.syncPageSize =\n\t\t\t(configDataStore && configDataStore.syncPageSize) ||\n\t\t\tconfigSyncPageSize ||\n\t\t\t1000;\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.syncPageSize = this.syncPageSize;\n\n\t\tthis.fullSyncInterval =\n\t\t\t(configDataStore && configDataStore.fullSyncInterval) ||\n\t\t\tthis.fullSyncInterval ||\n\t\t\tconfigFullSyncInterval ||\n\t\t\t24 * 60; // 1 day\n\n\t\tthis.storageAdapter =\n\t\t\t(configDataStore && configDataStore.storageAdapter) ||\n\t\t\tthis.storageAdapter ||\n\t\t\tconfigStorageAdapter ||\n\t\t\tundefined;\n\n\t\tthis.sessionId = this.retrieveSessionId();\n\t};\n\n\tclear = async function clear() {\n\t\tif (this.storage === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncSubscription && !syncSubscription.closed) {\n\t\t\tsyncSubscription.unsubscribe();\n\t\t}\n\n\t\tawait this.storage.clear();\n\n\t\tif (this.sync) {\n\t\t\tthis.sync.unsubscribeConnectivity();\n\t\t}\n\n\t\tthis.initialized = undefined; // Should re-initialize when start() is called.\n\t\tthis.storage = undefined;\n\t\tthis.sync = undefined;\n\t\tthis.syncPredicates = new WeakMap<SchemaModel, ModelPredicate<any>>();\n\t};\n\n\tstop = async function stop() {\n\t\tif (this.initialized !== undefined) {\n\t\t\tawait this.start();\n\t\t}\n\n\t\tif (syncSubscription && !syncSubscription.closed) {\n\t\t\tsyncSubscription.unsubscribe();\n\t\t}\n\n\t\tif (this.sync) {\n\t\t\tthis.sync.unsubscribeConnectivity();\n\t\t}\n\n\t\tthis.initialized = undefined; // Should re-initialize when start() is called.\n\t\tthis.sync = undefined;\n\t};\n\n\tprivate processPagination<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tpaginationProducer: ProducerPaginationInput<T>\n\t): PaginationInput<T> | undefined {\n\t\tlet sortPredicate: SortPredicate<T>;\n\t\tconst { limit, page, sort } = paginationProducer || {};\n\n\t\tif (limit === undefined && page === undefined && sort === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (page !== undefined && limit === undefined) {\n\t\t\tthrow new Error('Limit is required when requesting a page');\n\t\t}\n\n\t\tif (page !== undefined) {\n\t\t\tif (typeof page !== 'number') {\n\t\t\t\tthrow new Error('Page should be a number');\n\t\t\t}\n\n\t\t\tif (page < 0) {\n\t\t\t\tthrow new Error(\"Page can't be negative\");\n\t\t\t}\n\t\t}\n\n\t\tif (limit !== undefined) {\n\t\t\tif (typeof limit !== 'number') {\n\t\t\t\tthrow new Error('Limit should be a number');\n\t\t\t}\n\n\t\t\tif (limit < 0) {\n\t\t\t\tthrow new Error(\"Limit can't be negative\");\n\t\t\t}\n\t\t}\n\n\t\tif (sort) {\n\t\t\tsortPredicate = ModelSortPredicateCreator.createFromExisting(\n\t\t\t\tmodelDefinition,\n\t\t\t\tpaginationProducer.sort\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tlimit,\n\t\t\tpage,\n\t\t\tsort: sortPredicate,\n\t\t};\n\t}\n\n\tprivate async processSyncExpressions(): Promise<\n\t\tWeakMap<SchemaModel, ModelPredicate<any>>\n\t> {\n\t\tif (!this.syncExpressions || !this.syncExpressions.length) {\n\t\t\treturn new WeakMap<SchemaModel, ModelPredicate<any>>();\n\t\t}\n\n\t\tconst syncPredicates = await Promise.all(\n\t\t\tthis.syncExpressions.map(\n\t\t\t\tasync (\n\t\t\t\t\tsyncExpression: SyncExpression\n\t\t\t\t): Promise<[SchemaModel, ModelPredicate<any>]> => {\n\t\t\t\t\tconst { modelConstructor, conditionProducer } = await syncExpression;\n\t\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\t\t\t\t// conditionProducer is either a predicate, e.g. (c) => c.field('eq', 1)\n\t\t\t\t\t// OR a function/promise that returns a predicate\n\t\t\t\t\tconst condition = await this.unwrapPromise(conditionProducer);\n\t\t\t\t\tif (isPredicatesAll(condition)) {\n\t\t\t\t\t\treturn [modelDefinition, null];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst predicate = this.createFromCondition(\n\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\tcondition\n\t\t\t\t\t);\n\n\t\t\t\t\treturn [modelDefinition, predicate];\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\treturn this.weakMapFromEntries(syncPredicates);\n\t}\n\n\tprivate createFromCondition(\n\t\tmodelDefinition: SchemaModel,\n\t\tcondition: ProducerModelPredicate<PersistentModel>\n\t) {\n\t\ttry {\n\t\t\treturn ModelPredicateCreator.createFromExisting(\n\t\t\t\tmodelDefinition,\n\t\t\t\tcondition\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogger.error('Error creating Sync Predicate');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async unwrapPromise<T extends PersistentModel>(\n\t\tconditionProducer\n\t): Promise<ProducerModelPredicate<T>> {\n\t\ttry {\n\t\t\tconst condition = await conditionProducer();\n\t\t\treturn condition;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\treturn conditionProducer;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate weakMapFromEntries(\n\t\tentries: [SchemaModel, ModelPredicate<any>][]\n\t): WeakMap<SchemaModel, ModelPredicate<any>> {\n\t\treturn entries.reduce((map, [modelDefinition, predicate]) => {\n\t\t\tif (map.has(modelDefinition)) {\n\t\t\t\tconst { name } = modelDefinition;\n\t\t\t\tlogger.warn(\n\t\t\t\t\t`You can only utilize one Sync Expression per model.\n          Subsequent sync expressions for the ${name} model will be ignored.`\n\t\t\t\t);\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\tif (predicate) {\n\t\t\t\tmap.set(modelDefinition, predicate);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}, new WeakMap<SchemaModel, ModelPredicate<any>>());\n\t}\n\n\t// database separation for Amplify Console. Not a public API\n\tprivate retrieveSessionId(): string | undefined {\n\t\ttry {\n\t\t\tconst sessionId = sessionStorage.getItem('datastoreSessionId');\n\n\t\t\tif (sessionId) {\n\t\t\t\tconst { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n\n\t\t\t\tconst appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\t\t\t\tconst [appSyncId] = appSyncUrl.split('.');\n\n\t\t\t\treturn `${sessionId}-${appSyncId}`;\n\t\t\t}\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nconst instance = new DataStore();\nAmplify.register(instance);\n\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n"]},"metadata":{},"sourceType":"module"}