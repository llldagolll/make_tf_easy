{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeregisterStreamConsumerInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1DeregisterStreamConsumerCommand, serializeAws_json1_1DeregisterStreamConsumerCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN of\n *             the data stream and the name you gave the consumer when you registered it. You may also\n *             provide all three parameters, as long as they don't conflict with each other. If you\n *             don't know the name or ARN of the consumer that you want to deregister, you can use the\n *                 <a>ListStreamConsumers</a> operation to get a list of the descriptions of\n *             all the consumers that are currently registered with a given data stream. The\n *             description of a consumer contains its name and ARN.</p>\n *         <p>This operation has a limit of five transactions per second per stream.</p>\n */\n\nvar DeregisterStreamConsumerCommand =\n/** @class */\nfunction (_super) {\n  __extends(DeregisterStreamConsumerCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DeregisterStreamConsumerCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DeregisterStreamConsumerCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"DeregisterStreamConsumerCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DeregisterStreamConsumerInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DeregisterStreamConsumerCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DeregisterStreamConsumerCommand(input, context);\n  };\n\n  DeregisterStreamConsumerCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DeregisterStreamConsumerCommand(output, context);\n  };\n\n  return DeregisterStreamConsumerCommand;\n}($Command);\n\nexport { DeregisterStreamConsumerCommand };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-sdk\\client-kinesis\\commands\\DeregisterStreamConsumerCommand.ts"],"names":[],"mappings":";AACA,SAAS,6BAAT,QAA8C,oBAA9C;AACA,SACE,qDADF,EAEE,mDAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;AASG;;AACH,IAAA,+BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqD,EAAA,SAAA,CAAA,+BAAA,EAAA,MAAA,CAAA,CAArD,CAKE;AACA;;;AAEA,WAAA,+BAAA,CAAqB,KAArB,EAAgE;AAAhE,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA2C,CAG9D;AACD;AAED;;AAEG;;;AACH,EAAA,+BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,eAAnB;AACA,QAAM,WAAW,GAAG,iCAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,6BAA6B,CAAC,kBAJA;AAKvD,MAAA,wBAAwB,EAAE,UAAC,MAAD,EAAY;AAAK,eAAA,MAAA;AAAM;AALM,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,+BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA+D,OAA/D,EAAsF;AACpF,WAAO,mDAAmD,CAAC,KAAD,EAAQ,OAAR,CAA1D;AACD,GAFO;;AAIA,EAAA,+BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,qDAAqD,CAAC,MAAD,EAAS,OAAT,CAA5D;AACD,GAFO;;AAMV,SAAA,+BAAA;AAAC,CAtDD,CAAqD,QAArD,CAAA","sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { DeregisterStreamConsumerInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DeregisterStreamConsumerCommand,\n  serializeAws_json1_1DeregisterStreamConsumerCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DeregisterStreamConsumerCommandInput = DeregisterStreamConsumerInput;\nexport type DeregisterStreamConsumerCommandOutput = __MetadataBearer;\n\n/**\n * <p>To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN of\n *             the data stream and the name you gave the consumer when you registered it. You may also\n *             provide all three parameters, as long as they don't conflict with each other. If you\n *             don't know the name or ARN of the consumer that you want to deregister, you can use the\n *                 <a>ListStreamConsumers</a> operation to get a list of the descriptions of\n *             all the consumers that are currently registered with a given data stream. The\n *             description of a consumer contains its name and ARN.</p>\n *         <p>This operation has a limit of five transactions per second per stream.</p>\n */\nexport class DeregisterStreamConsumerCommand extends $Command<\n  DeregisterStreamConsumerCommandInput,\n  DeregisterStreamConsumerCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DeregisterStreamConsumerCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DeregisterStreamConsumerCommandInput, DeregisterStreamConsumerCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"DeregisterStreamConsumerCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DeregisterStreamConsumerInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DeregisterStreamConsumerCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DeregisterStreamConsumerCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DeregisterStreamConsumerCommandOutput> {\n    return deserializeAws_json1_1DeregisterStreamConsumerCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}