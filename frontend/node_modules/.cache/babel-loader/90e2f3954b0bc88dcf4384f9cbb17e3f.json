{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { ConsoleLogger as Logger, Credentials, Parser, StorageHelper, Hub } from '@aws-amplify/core';\nimport { GetObjectCommand, DeleteObjectCommand, ListObjectsCommand, CopyObjectCommand } from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, getPrefix, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nvar logger = new Logger('AWSS3Provider');\nvar DEFAULT_STORAGE_LEVEL = 'public';\nvar DEFAULT_PRESIGN_EXPIRATION = 900;\n/**\n * Provide storage methods to use AWS S3\n */\n\nvar AWSS3Provider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    var _this = this;\n\n    this._config = config ? config : {};\n    this._storage = new StorageHelper().getStorage();\n    Hub.listen('auth', function (data) {\n      var payload = data.payload;\n\n      if (payload.event === 'signOut' || payload.event === 'signIn') {\n        _this._storage.removeItem(UPLOADS_STORAGE_KEY);\n      }\n    });\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n\n\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n\n    return this._config;\n  };\n\n  AWSS3Provider.prototype.startResumableUpload = function (addTaskInput, config) {\n    var s3Client = addTaskInput.s3Client,\n        emitter = addTaskInput.emitter,\n        key = addTaskInput.key,\n        file = addTaskInput.file,\n        params = addTaskInput.params;\n    var progressCallback = config.progressCallback,\n        completeCallback = config.completeCallback,\n        errorCallback = config.errorCallback,\n        _a = config.track,\n        track = _a === void 0 ? false : _a;\n\n    if (!(file instanceof Blob)) {\n      throw new Error(StorageErrorStrings.INVALID_BLOB);\n    }\n\n    emitter.on(TaskEvents.UPLOAD_PROGRESS, function (event) {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          progressCallback(event);\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.UPLOAD_COMPLETE, function (event) {\n      if (completeCallback) {\n        if (typeof completeCallback === 'function') {\n          completeCallback(event);\n        } else {\n          logger.warn('completeCallback should be a function, not a ' + typeof completeCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.ERROR, function (err) {\n      if (errorCallback) {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        } else {\n          logger.warn('errorCallback should be a function, not a ' + typeof errorCallback);\n        }\n      }\n    }); // we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n    // when its doing a final check with _listSingleFile function\n\n    var prefixPromise = Credentials.get().then(function (credentials) {\n      var cred = Credentials.shear(credentials);\n      return getPrefix(__assign(__assign({}, config), {\n        credentials: cred\n      }));\n    });\n    var task = new AWSS3UploadTask({\n      s3Client: s3Client,\n      file: file,\n      emitter: emitter,\n      level: config.level,\n      storage: this._storage,\n      params: params,\n      prefixPromise: prefixPromise\n    });\n    dispatchStorageEvent(track, 'upload', {\n      method: 'put',\n      result: 'success'\n    }, null, \"Upload Task created successfully for \" + key); // automatically start the upload task\n\n    task.resume();\n    return task;\n  };\n  /**\n   * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n   * different level or identityId (if source object's level is 'protected').\n   *\n   * @async\n   * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n   * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n   * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n   * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n   */\n\n\n  AWSS3Provider.prototype.copy = function (src, dest, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, acl, bucket, cacheControl, expires, track, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, _a, srcLevel, srcIdentityId, srcKey, _b, destLevel, destKey, srcPrefix, destPrefix, finalSrcKey, finalDestKey, params, s3, error_1;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _c.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            acl = opt.acl, bucket = opt.bucket, cacheControl = opt.cacheControl, expires = opt.expires, track = opt.track, serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            _a = src.level, srcLevel = _a === void 0 ? DEFAULT_STORAGE_LEVEL : _a, srcIdentityId = src.identityId, srcKey = src.key;\n            _b = dest.level, destLevel = _b === void 0 ? DEFAULT_STORAGE_LEVEL : _b, destKey = dest.key;\n\n            if (!srcKey || typeof srcKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_SRC_KEY);\n            }\n\n            if (!destKey || typeof destKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_DEST_KEY);\n            }\n\n            if (srcLevel !== 'protected' && srcIdentityId) {\n              logger.warn(\"You may copy files from another user if the source level is \\\"protected\\\", currently it's \" + srcLevel);\n            }\n\n            srcPrefix = this._prefix(__assign(__assign(__assign({}, opt), {\n              level: srcLevel\n            }), srcIdentityId && {\n              identityId: srcIdentityId\n            }));\n            destPrefix = this._prefix(__assign(__assign({}, opt), {\n              level: destLevel\n            }));\n            finalSrcKey = bucket + \"/\" + srcPrefix + srcKey;\n            finalDestKey = \"\" + destPrefix + destKey;\n            logger.debug(\"copying \" + finalSrcKey + \" to \" + finalDestKey);\n            params = {\n              Bucket: bucket,\n              CopySource: finalSrcKey,\n              Key: finalDestKey,\n              // Copies over metadata like contentType as well\n              MetadataDirective: 'COPY'\n            };\n            if (cacheControl) params.CacheControl = cacheControl;\n            if (expires) params.Expires = expires;\n\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n            }\n\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n\n            if (SSEKMSKeyId) {\n              params.SSEKMSKeyId = SSEKMSKeyId;\n            }\n\n            if (acl) params.ACL = acl;\n            s3 = this._createNewS3Client(opt);\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(new CopyObjectCommand(params))];\n\n          case 3:\n            _c.sent();\n\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'success'\n            }, null, \"Copy success from \" + srcKey + \" to \" + destKey);\n            return [2\n            /*return*/\n            , {\n              key: destKey\n            }];\n\n          case 4:\n            error_1 = _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'failed'\n            }, null, \"Copy failed from \" + srcKey + \" to \" + destKey);\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, progressCallback, prefix, final_key, emitter, s3, params, getObjectCommand, response, error_2, signer, request, url, _a, error_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, progressCallback = opt.progressCallback;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            emitter = new events.EventEmitter();\n            s3 = this._createNewS3Client(opt, emitter);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            }; // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n\n            if (!(download === true)) return [3\n            /*break*/\n            , 5];\n            getObjectCommand = new GetObjectCommand(params);\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 4,, 5]);\n\n            if (progressCallback) {\n              if (typeof progressCallback === 'function') {\n                emitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, function (progress) {\n                  progressCallback(progress);\n                });\n              } else {\n                logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n              }\n            }\n\n            return [4\n            /*yield*/\n            , s3.send(getObjectCommand)];\n\n          case 3:\n            response = _b.sent();\n            emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'success'\n            }, {\n              fileSize: Number(response.Body['size'] || response.Body['length'])\n            }, \"Download success for \" + key);\n            return [2\n            /*return*/\n            , response];\n\n          case 4:\n            error_2 = _b.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Download failed with \" + error_2.message);\n            throw error_2;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            signer = new S3RequestPresigner(__assign({}, s3.config));\n            return [4\n            /*yield*/\n            , createRequest(s3, new GetObjectCommand(params))];\n\n          case 6:\n            request = _b.sent();\n            _a = formatUrl;\n            return [4\n            /*yield*/\n            , signer.presign(request, {\n              expiresIn: expires || DEFAULT_PRESIGN_EXPIRATION\n            })];\n\n          case 7:\n            url = _a.apply(void 0, [_b.sent()]);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'success'\n            }, null, \"Signed URL: \" + url);\n            return [2\n            /*return*/\n            , url];\n\n          case 8:\n            error_3 = _b.sent();\n            logger.warn('get signed url error', error_3);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Could not get a signed URL for \" + key);\n            throw error_3;\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param key - key of the object\n   * @param object - File to be put in Amazon S3 bucket\n   * @param [config] - Optional configuration for the underlying S3 command\n   * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n   * success.\n   */\n\n\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    var opt = Object.assign({}, this._config, config);\n    var bucket = opt.bucket,\n        track = opt.track,\n        progressCallback = opt.progressCallback,\n        level = opt.level,\n        resumable = opt.resumable;\n    var contentType = opt.contentType,\n        contentDisposition = opt.contentDisposition,\n        contentEncoding = opt.contentEncoding,\n        cacheControl = opt.cacheControl,\n        expires = opt.expires,\n        metadata = opt.metadata,\n        tagging = opt.tagging,\n        acl = opt.acl;\n    var serverSideEncryption = opt.serverSideEncryption,\n        SSECustomerAlgorithm = opt.SSECustomerAlgorithm,\n        SSECustomerKey = opt.SSECustomerKey,\n        SSECustomerKeyMD5 = opt.SSECustomerKeyMD5,\n        SSEKMSKeyId = opt.SSEKMSKeyId;\n    var type = contentType ? contentType : 'binary/octet-stream';\n    var params = {\n      Bucket: bucket,\n      Key: key,\n      Body: object,\n      ContentType: type\n    };\n\n    if (cacheControl) {\n      params.CacheControl = cacheControl;\n    }\n\n    if (contentDisposition) {\n      params.ContentDisposition = contentDisposition;\n    }\n\n    if (contentEncoding) {\n      params.ContentEncoding = contentEncoding;\n    }\n\n    if (expires) {\n      params.Expires = expires;\n    }\n\n    if (metadata) {\n      params.Metadata = metadata;\n    }\n\n    if (tagging) {\n      params.Tagging = tagging;\n    }\n\n    if (serverSideEncryption) {\n      params.ServerSideEncryption = serverSideEncryption;\n    }\n\n    if (SSECustomerAlgorithm) {\n      params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n    }\n\n    if (SSECustomerKey) {\n      params.SSECustomerKey = SSECustomerKey;\n    }\n\n    if (SSECustomerKeyMD5) {\n      params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n    }\n\n    if (SSEKMSKeyId) {\n      params.SSEKMSKeyId = SSEKMSKeyId;\n    }\n\n    var emitter = new events.EventEmitter();\n    var uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n    if (acl) {\n      params.ACL = acl;\n    }\n\n    if (resumable === true) {\n      var s3Client = this._createNewS3Client(opt); // we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n      // this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\n\n      s3Client.middlewareStack.add(createPrefixMiddleware(opt, key), prefixMiddlewareOptions);\n      var addTaskInput = {\n        bucket: bucket,\n        key: key,\n        s3Client: s3Client,\n        file: object,\n        emitter: emitter,\n        accessLevel: level,\n        params: params\n      }; // explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\n      return this.startResumableUpload(addTaskInput, config);\n    }\n\n    try {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            progressCallback(progress);\n          });\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n\n      return uploader.upload().then(function (response) {\n        logger.debug('upload result', response);\n        dispatchStorageEvent(track, 'upload', {\n          method: 'put',\n          result: 'success'\n        }, null, \"Upload success for \" + key);\n        return {\n          key: key\n        };\n      });\n    } catch (error) {\n      logger.warn('error uploading', error);\n      dispatchStorageEvent(track, 'upload', {\n        method: 'put',\n        result: 'failed'\n      }, null, \"Error uploading \" + key);\n      throw error;\n    }\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n   */\n\n\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            deleteObjectCommand = new DeleteObjectCommand(params);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(deleteObjectCommand)];\n\n          case 3:\n            response = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'success'\n            }, null, \"Deleted \" + key + \" successfully\");\n            return [2\n            /*return*/\n            , response];\n\n          case 4:\n            error_4 = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'failed'\n            }, null, \"Deletion of \" + key + \" failed with \" + error_4);\n            throw error_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {string} path - the path that contains objects\n   * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n   * all objects in path\n   */\n\n\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params, listObjectsCommand, response, list, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('list ' + path + ' from ' + final_path);\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: maxKeys\n            };\n            listObjectsCommand = new ListObjectsCommand(params);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(listObjectsCommand)];\n\n          case 3:\n            response = _a.sent();\n            list = [];\n\n            if (response && response.Contents) {\n              list = response.Contents.map(function (item) {\n                return {\n                  key: item.Key.substr(prefix.length),\n                  eTag: item.ETag,\n                  lastModified: item.LastModified,\n                  size: item.Size\n                };\n              });\n            }\n\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'success'\n            }, null, list.length + \" items returned from list operation\");\n            logger.debug('list', list);\n            return [2\n            /*return*/\n            , list];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.warn('list error', error_5);\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'failed'\n            }, null, \"Listing items failed: \" + error_5.message);\n            throw error_5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_6 = _a.sent();\n            logger.warn('ensure credentials error', error_6);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._isWithCredentials = function (config) {\n    return typeof config === 'object' && config.hasOwnProperty('credentials');\n  };\n\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n        level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n    switch (level) {\n      case 'private':\n        return privatePath;\n\n      case 'protected':\n        return protectedPath;\n\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * Creates an S3 client with new V3 aws sdk\n   */\n\n\n  AWSS3Provider.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\n\nexport { AWSS3Provider };\n/**\n * @deprecated use named import\n */\n\nexport default AWSS3Provider;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\storage\\src\\providers\\AWSS3Provider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tParser,\n\tICredentials,\n\tStorageHelper,\n\tHub,\n} from '@aws-amplify/core';\nimport {\n\tS3Client,\n\tGetObjectCommand,\n\tDeleteObjectCommand,\n\tListObjectsCommand,\n\tGetObjectCommandOutput,\n\tDeleteObjectCommandInput,\n\tCopyObjectCommandInput,\n\tCopyObjectCommand,\n\tPutObjectCommandInput,\n\tGetObjectCommandInput,\n} from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport {\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tSEND_UPLOAD_PROGRESS_EVENT,\n} from './axios-http-handler';\nimport {\n\tStorageOptions,\n\tStorageProvider,\n\tS3ProviderGetConfig,\n\tS3ProviderGetOuput,\n\tS3ProviderPutConfig,\n\tS3ProviderRemoveConfig,\n\tS3ProviderListOutput,\n\tS3ProviderListConfig,\n\tS3ProviderCopyConfig,\n\tS3ProviderCopyOutput,\n\tS3CopySource,\n\tS3CopyDestination,\n\tStorageAccessLevel,\n\tCustomPrefix,\n\tS3ProviderRemoveOutput,\n\tS3ProviderPutOutput,\n\tResumableUploadConfig,\n\tUploadTask,\n} from '../types';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tgetPrefix,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nimport { CancelTokenSource } from 'axios';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst DEFAULT_STORAGE_LEVEL = 'public';\nconst DEFAULT_PRESIGN_EXPIRATION = 900;\n\ninterface AddTaskInput {\n\taccessLevel: StorageAccessLevel;\n\tfile: Blob;\n\tbucket: string;\n\temitter: events.EventEmitter;\n\tkey: string;\n\ts3Client: S3Client;\n\tparams?: PutObjectCommandInput;\n}\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport class AWSS3Provider implements StorageProvider {\n\tstatic readonly CATEGORY = 'Storage';\n\tstatic readonly PROVIDER_NAME = 'AWSS3';\n\tprivate _config: StorageOptions;\n\tprivate _storage: Storage;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tthis._storage = new StorageHelper().getStorage();\n\t\tHub.listen('auth', data => {\n\t\t\tconst { payload } = data;\n\t\t\tif (payload.event === 'signOut' || payload.event === 'signIn') {\n\t\t\t\tthis._storage.removeItem(UPLOADS_STORAGE_KEY);\n\t\t\t}\n\t\t});\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): 'AWSS3' {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\tprivate startResumableUpload(\n\t\taddTaskInput: AddTaskInput,\n\t\tconfig: S3ProviderPutConfig & ResumableUploadConfig\n\t): UploadTask {\n\t\tconst { s3Client, emitter, key, file, params } = addTaskInput;\n\t\tconst {\n\t\t\tprogressCallback,\n\t\t\tcompleteCallback,\n\t\t\terrorCallback,\n\t\t\ttrack = false,\n\t\t} = config;\n\t\tif (!(file instanceof Blob)) {\n\t\t\tthrow new Error(StorageErrorStrings.INVALID_BLOB);\n\t\t}\n\n\t\temitter.on(TaskEvents.UPLOAD_PROGRESS, event => {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\tprogressCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.UPLOAD_COMPLETE, event => {\n\t\t\tif (completeCallback) {\n\t\t\t\tif (typeof completeCallback === 'function') {\n\t\t\t\t\tcompleteCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'completeCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof completeCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.ERROR, err => {\n\t\t\tif (errorCallback) {\n\t\t\t\tif (typeof errorCallback === 'function') {\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'errorCallback should be a function, not a ' + typeof errorCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n\t\t// when its doing a final check with _listSingleFile function\n\t\tconst prefixPromise: Promise<string> = Credentials.get().then(\n\t\t\t(credentials: any) => {\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\treturn getPrefix({\n\t\t\t\t\t...config,\n\t\t\t\t\tcredentials: cred,\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\n\t\tconst task = new AWSS3UploadTask({\n\t\t\ts3Client,\n\t\t\tfile,\n\t\t\temitter,\n\t\t\tlevel: config.level,\n\t\t\tstorage: this._storage,\n\t\t\tparams,\n\t\t\tprefixPromise,\n\t\t});\n\n\t\tdispatchStorageEvent(\n\t\t\ttrack,\n\t\t\t'upload',\n\t\t\t{ method: 'put', result: 'success' },\n\t\t\tnull,\n\t\t\t`Upload Task created successfully for ${key}`\n\t\t);\n\n\t\t// automatically start the upload task\n\t\ttask.resume();\n\n\t\treturn task;\n\t}\n\n\t/**\n\t * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n\t * different level or identityId (if source object's level is 'protected').\n\t *\n\t * @async\n\t * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n\t * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n\t * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n\t * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n\t */\n\tpublic async copy(\n\t\tsrc: S3CopySource,\n\t\tdest: S3CopyDestination,\n\t\tconfig?: S3ProviderCopyConfig\n\t): Promise<S3ProviderCopyOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tacl,\n\t\t\tbucket,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst {\n\t\t\tlevel: srcLevel = DEFAULT_STORAGE_LEVEL,\n\t\t\tidentityId: srcIdentityId,\n\t\t\tkey: srcKey,\n\t\t} = src;\n\t\tconst { level: destLevel = DEFAULT_STORAGE_LEVEL, key: destKey } = dest;\n\t\tif (!srcKey || typeof srcKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_SRC_KEY);\n\t\t}\n\t\tif (!destKey || typeof destKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_DEST_KEY);\n\t\t}\n\t\tif (srcLevel !== 'protected' && srcIdentityId) {\n\t\t\tlogger.warn(\n\t\t\t\t`You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n\t\t\t);\n\t\t}\n\t\tconst srcPrefix = this._prefix({\n\t\t\t...opt,\n\t\t\tlevel: srcLevel,\n\t\t\t...(srcIdentityId && { identityId: srcIdentityId }),\n\t\t});\n\t\tconst destPrefix = this._prefix({ ...opt, level: destLevel });\n\t\tconst finalSrcKey = `${bucket}/${srcPrefix}${srcKey}`;\n\t\tconst finalDestKey = `${destPrefix}${destKey}`;\n\t\tlogger.debug(`copying ${finalSrcKey} to ${finalDestKey}`);\n\n\t\tconst params: CopyObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tCopySource: finalSrcKey,\n\t\t\tKey: finalDestKey,\n\t\t\t// Copies over metadata like contentType as well\n\t\t\tMetadataDirective: 'COPY',\n\t\t};\n\n\t\tif (cacheControl) params.CacheControl = cacheControl;\n\t\tif (expires) params.Expires = expires;\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\t\tif (acl) params.ACL = acl;\n\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\ttry {\n\t\t\tawait s3.send(new CopyObjectCommand(params));\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'success',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy success from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkey: destKey,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'failed',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy failed from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderGetConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<string | GetObjectCommandOutput>} - A promise resolves to Amazon S3 presigned URL or the\n\t * GetObjectCommandOutput if download is set to true on success\n\t */\n\tpublic async get<T extends S3ProviderGetConfig & StorageOptions>(\n\t\tkey: string,\n\t\tconfig?: T\n\t): Promise<S3ProviderGetOuput<T>>;\n\tpublic async get(\n\t\tkey: string,\n\t\tconfig?: S3ProviderGetConfig\n\t): Promise<string | GetObjectCommandOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tbucket,\n\t\t\tdownload,\n\t\t\tcacheControl,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcontentLanguage,\n\t\t\tcontentType,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tprogressCallback,\n\t\t} = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst s3 = this._createNewS3Client(opt, emitter);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: GetObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\t// See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\t\tif (cacheControl) params.ResponseCacheControl = cacheControl;\n\t\tif (contentDisposition)\n\t\t\tparams.ResponseContentDisposition = contentDisposition;\n\t\tif (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n\t\tif (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n\t\tif (contentType) params.ResponseContentType = contentType;\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\n\t\tif (download === true) {\n\t\t\tconst getObjectCommand = new GetObjectCommand(params);\n\t\t\ttry {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\temitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst response = await s3.send(getObjectCommand);\n\t\t\t\temitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t{\n\t\t\t\t\t\tfileSize: Number(response.Body['size'] || response.Body['length']),\n\t\t\t\t\t},\n\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t`Download failed with ${error.message}`\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst signer = new S3RequestPresigner({ ...s3.config });\n\t\t\tconst request = await createRequest(s3, new GetObjectCommand(params));\n\t\t\t// Default is 15 mins as defined in V2 AWS SDK\n\t\t\tconst url = formatUrl(\n\t\t\t\tawait signer.presign(request, {\n\t\t\t\t\texpiresIn: expires || DEFAULT_PRESIGN_EXPIRATION,\n\t\t\t\t})\n\t\t\t);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Signed URL: ${url}`\n\t\t\t);\n\t\t\treturn url;\n\t\t} catch (error) {\n\t\t\tlogger.warn('get signed url error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in Amazon S3 bucket\n\t * @param [config] - Optional configuration for the underlying S3 command\n\t * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n\t * success.\n\t */\n\tpublic put<T extends S3ProviderPutConfig>(\n\t\tkey: string,\n\t\tobject: PutObjectCommandInput['Body'],\n\t\tconfig?: T\n\t): S3ProviderPutOutput<T> {\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback, level, resumable } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t\tacl,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst params: PutObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (contentEncoding) {\n\t\t\tparams.ContentEncoding = contentEncoding;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n\t\tif (acl) {\n\t\t\tparams.ACL = acl;\n\t\t}\n\n\t\tif (resumable === true) {\n\t\t\tconst s3Client = this._createNewS3Client(opt);\n\t\t\t// we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n\t\t\t// this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\t\t\ts3Client.middlewareStack.add(\n\t\t\t\tcreatePrefixMiddleware(opt, key),\n\t\t\t\tprefixMiddlewareOptions\n\t\t\t);\n\t\t\tconst addTaskInput: AddTaskInput = {\n\t\t\t\tbucket,\n\t\t\t\tkey,\n\t\t\t\ts3Client,\n\t\t\t\tfile: object as Blob,\n\t\t\t\temitter,\n\t\t\t\taccessLevel: level,\n\t\t\t\tparams,\n\t\t\t};\n\t\t\t// explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\t\t\treturn this.startResumableUpload(\n\t\t\t\taddTaskInput,\n\t\t\t\tconfig as typeof config & { resumable: true }\n\t\t\t) as S3ProviderPutOutput<T>;\n\t\t}\n\n\t\ttry {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\temitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uploader.upload().then(response => {\n\t\t\t\tlogger.debug('upload result', response);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'upload',\n\t\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Upload success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn { key };\n\t\t\t}) as S3ProviderPutOutput<T>;\n\t\t} catch (error) {\n\t\t\tlogger.warn('error uploading', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(\n\t\tkey: string,\n\t\tconfig?: S3ProviderRemoveConfig\n\t): Promise<S3ProviderRemoveOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params: DeleteObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tconst deleteObjectCommand = new DeleteObjectCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(deleteObjectCommand);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Deleted ${key} successfully`\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Deletion of ${key} failed with ${error}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {string} path - the path that contains objects\n\t * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n\t * all objects in path\n\t */\n\tpublic async list(\n\t\tpath: string,\n\t\tconfig?: S3ProviderListConfig\n\t): Promise<S3ProviderListOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, maxKeys } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\n\t\tconst params = {\n\t\t\tBucket: bucket,\n\t\t\tPrefix: final_path,\n\t\t\tMaxKeys: maxKeys,\n\t\t};\n\n\t\tconst listObjectsCommand = new ListObjectsCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(listObjectsCommand);\n\t\t\tlet list: S3ProviderListOutput = [];\n\t\t\tif (response && response.Contents) {\n\t\t\t\tlist = response.Contents.map(item => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\t\tsize: item.Size,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`${list.length} items returned from list operation`\n\t\t\t);\n\t\t\tlogger.debug('list', list);\n\t\t\treturn list;\n\t\t} catch (error) {\n\t\t\tlogger.warn('list error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Listing items failed: ${error.message}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\tthis._config.credentials = cred;\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isWithCredentials(\n\t\tconfig: StorageOptions\n\t): config is StorageOptions & { credentials: ICredentials } {\n\t\treturn typeof config === 'object' && config.hasOwnProperty('credentials');\n\t}\n\n\tprivate _prefix(config: {\n\t\tcredentials: ICredentials;\n\t\tlevel?: StorageAccessLevel;\n\t\tcustomPrefix?: CustomPrefix;\n\t\tidentityId?: string;\n\t}): string {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * Creates an S3 client with new V3 aws sdk\n\t */\n\tprivate _createNewS3Client(\n\t\tconfig: {\n\t\t\tregion?: string;\n\t\t\tcancelTokenSource?: CancelTokenSource;\n\t\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\t\tuseAccelerateEndpoint?: boolean;\n\t\t},\n\t\temitter?: events.EventEmitter\n\t): S3Client {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;\n"]},"metadata":{},"sourceType":"module"}