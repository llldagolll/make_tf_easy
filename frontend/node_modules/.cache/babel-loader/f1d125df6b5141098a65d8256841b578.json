{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\n\nvar AmazonAIIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Image>} - Promise resolving to the converted source object.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: decodeURIComponent(parsedURL[2])\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: new Uint8Array(buffer)\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: new Uint8Array(buffer)\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        }\n\n        if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n          res({\n            Bytes: new Uint8Array(bytes)\n          });\n        } // everything else can be directly passed to Rekognition / Textract.\n\n\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            this.textractClient = new TextractClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.configureSource(input.text.source)];\n\n          case 3:\n            inputDocument = _f.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            format = input.text.format || configFormat;\n            featureTypes = [];\n            if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n            if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n            if (!(featureTypes.length === 0)) return [3\n            /*break*/\n            , 11];\n            textractParam = {\n              Document: inputDocument\n            };\n            rekognitionParam = {\n              Image: inputDocument\n            };\n            _f.label = 6;\n\n          case 6:\n            _f.trys.push([6, 9,, 10]);\n\n            detectTextCommand = new DetectTextCommand(rekognitionParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectTextCommand)];\n\n          case 7:\n            rekognitionData = _f.sent();\n            rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n\n            if (rekognitionResponse.text.words.length < 50) {\n              // did not hit the word limit, return the data\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n            return [4\n            /*yield*/\n            , this.textractClient.send(detectDocumentTextCommand)];\n\n          case 8:\n            Blocks = _f.sent().Blocks;\n\n            if (rekognitionData.TextDetections.length > Blocks.length) {\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 9:\n            err_2 = _f.sent();\n            Promise.reject(err_2);\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [3\n            /*break*/\n            , 15];\n\n          case 11:\n            param = {\n              Document: inputDocument,\n              FeatureTypes: featureTypes\n            };\n            _f.label = 12;\n\n          case 12:\n            _f.trys.push([12, 14,, 15]);\n\n            analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n            return [4\n            /*yield*/\n            , this.textractClient.send(analyzeDocumentCommand)];\n\n          case 13:\n            Blocks = _f.sent().Blocks;\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 14:\n            err_3 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _f.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.labels.source).then(function (data) {\n              inputImage_1 = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _f.sent();\n\n            param = {\n              Image: inputImage_1\n            };\n            servicePromises = [];\n            entityType = input.labels.type || type;\n\n            if (entityType === 'LABELS' || entityType === 'ALL') {\n              servicePromises.push(this.detectLabels(param));\n            }\n\n            if (entityType === 'UNSAFE' || entityType === 'ALL') {\n              servicePromises.push(this.detectModerationLabels(param));\n            }\n\n            return [2\n            /*return*/\n            , Promise.all(servicePromises).then(function (data) {\n              var identifyResult = {}; // concatenate resolved promises to a single object\n\n              data.forEach(function (val) {\n                identifyResult = __assign(__assign({}, identifyResult), val);\n              });\n              return identifyResult;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 3:\n            err_4 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectLabelsCommand, data, detectLabelData, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectLabelsCommand = new DetectLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n            if (!data.Labels) return [2\n            /*return*/\n            , {\n              labels: null\n            }]; // no image was detected\n\n            detectLabelData = data.Labels.map(function (val) {\n              var boxes = val.Instances ? val.Instances.map(function (val) {\n                return makeCamelCase(val.BoundingBox);\n              }) : undefined;\n              return {\n                name: val.Name,\n                boundingBoxes: boxes,\n                metadata: {\n                  confidence: val.Confidence,\n                  parents: makeCamelCaseArray(val.Parents)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              labels: detectLabelData\n            }];\n\n          case 2:\n            err_5 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_5)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectModerationLabelsCommand, data, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectModerationLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n\n            if (data.ModerationLabels.length !== 0) {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'YES'\n              }];\n            } else {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'NO'\n              }];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_6 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_6)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n\n      var _this = this;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _m.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h; // default arguments\n\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.entities.source).then(function (data) {\n              return inputImage = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _m.sent();\n\n            param = {\n              Attributes: ['ALL'],\n              Image: inputImage\n            };\n            if (!(isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection)) return [3\n            /*break*/\n            , 7];\n\n            if (!celebrityDetectionEnabled) {\n              return [2\n              /*return*/\n              , Promise.reject('Error: You have to enable celebrity detection first')];\n            }\n\n            _m.label = 3;\n\n          case 3:\n            _m.trys.push([3, 5,, 6]);\n\n            recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(recognizeCelebritiesCommand)];\n\n          case 4:\n            data = _m.sent();\n            faces = data.CelebrityFaces.map(function (celebrity) {\n              return {\n                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                  pose: makeCamelCase(celebrity.Face.Pose)\n                })\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 5:\n            err_7 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_7)];\n\n          case 6:\n            return [3\n            /*break*/\n            , 15];\n\n          case 7:\n            if (!(isIdentifyFromCollection(input.entities) && input.entities.collection)) return [3\n            /*break*/\n            , 12];\n            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n            updatedParam = __assign(__assign({}, param), {\n              CollectionId: collectionId,\n              MaxFaces: maxFaces\n            });\n            _m.label = 8;\n\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n\n            searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(searchFacesByImageCommand)];\n\n          case 9:\n            data = _m.sent();\n            faces = data.FaceMatches.map(function (val) {\n              return {\n                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                metadata: {\n                  externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                  similarity: val.Similarity\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 10:\n            err_8 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_8)];\n\n          case 11:\n            return [3\n            /*break*/\n            , 15];\n\n          case 12:\n            _m.trys.push([12, 14,, 15]);\n\n            detectFacesCommand = new DetectFacesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectFacesCommand)];\n\n          case 13:\n            data = _m.sent();\n            faces = data.FaceDetails.map(function (detail) {\n              // face attributes keys we want to extract from Rekognition's response\n              var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n              var faceAttributes = makeCamelCase(detail, attributeKeys);\n\n              if (detail.Emotions) {\n                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                  return emotion.Type;\n                });\n              }\n\n              return {\n                boundingBox: makeCamelCase(detail.BoundingBox),\n                landmarks: makeCamelCaseArray(detail.Landmarks),\n                ageRange: makeCamelCase(detail.AgeRange),\n                attributes: faceAttributes,\n                metadata: {\n                  confidence: detail.Confidence,\n                  pose: makeCamelCase(detail.Pose)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 14:\n            err_9 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_9)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\n\nexport { AmazonAIIdentifyPredictionsProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\predictions\\src\\Providers\\AmazonAIIdentifyPredictionsProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport {\n\tRekognitionClient,\n\tSearchFacesByImageCommand,\n\tDetectTextCommand,\n\tDetectTextCommandInput,\n\tDetectLabelsCommand,\n\tDetectLabelsCommandInput,\n\tDetectFacesCommand,\n\tDetectModerationLabelsCommand,\n\tDetectModerationLabelsCommandInput,\n\tRecognizeCelebritiesCommand,\n} from '@aws-sdk/client-rekognition';\nimport {\n\tIdentifyLabelsInput,\n\tIdentifyLabelsOutput,\n\tIdentifySource,\n\tIdentifyEntitiesInput,\n\tIdentifyEntitiesOutput,\n\tisStorageSource,\n\tisFileSource,\n\tisBytesSource,\n\tIdentifyTextInput,\n\tIdentifyTextOutput,\n\tisIdentifyCelebrities,\n\tisIdentifyFromCollection,\n\tIdentifyFromCollection,\n\tFeatureTypes,\n} from '../types';\nimport {\n\tImage,\n\tDocument,\n\tTextDetectionList,\n\tBlockList,\n} from '../types/AWSTypes';\nimport {\n\tTextractClient,\n\tDetectDocumentTextCommand,\n\tDetectDocumentTextCommandInput,\n\tAnalyzeDocumentCommand,\n\tAnalyzeDocumentCommandInput,\n} from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport {\n\tcategorizeRekognitionBlocks,\n\tcategorizeTextractBlocks,\n} from './IdentifyTextUtils';\n\nexport class AmazonAIIdentifyPredictionsProvider extends AbstractIdentifyPredictionsProvider {\n\tprivate rekognitionClient: RekognitionClient;\n\tprivate textractClient: TextractClient;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIIdentifyPredictionsProvider';\n\t}\n\n\t/**\n\t * Verify user input source and converts it into source object readable by Rekognition and Textract.\n\t * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n\t * @param {IdentifySource} source - User input source that directs to the object user wants\n\t * to identify (storage, file, or bytes).\n\t * @return {Promise<Image>} - Promise resolving to the converted source object.\n\t */\n\tprivate configureSource(source: IdentifySource): Promise<Image> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tif (isStorageSource(source)) {\n\t\t\t\tconst storageConfig = {\n\t\t\t\t\tlevel: source.level,\n\t\t\t\t\tidentityId: source.identityId,\n\t\t\t\t};\n\t\t\t\tStorage.get(source.key, storageConfig)\n\t\t\t\t\t.then((url: string) => {\n\t\t\t\t\t\tconst parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n\t\t\t\t\t\tconst parsedURL = url.match(parser);\n\t\t\t\t\t\tif (parsedURL.length < 3) rej('Invalid S3 key was given.');\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tS3Object: {\n\t\t\t\t\t\t\t\tBucket: parsedURL[1],\n\t\t\t\t\t\t\t\tName: decodeURIComponent(parsedURL[2]),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => rej(err));\n\t\t\t} else if (isFileSource(source)) {\n\t\t\t\tblobToArrayBuffer(source.file)\n\t\t\t\t\t.then(buffer => {\n\t\t\t\t\t\tres({ Bytes: new Uint8Array(buffer) });\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => rej(err));\n\t\t\t} else if (isBytesSource(source)) {\n\t\t\t\tconst bytes = source.bytes;\n\t\t\t\tif (bytes instanceof Blob) {\n\t\t\t\t\tblobToArrayBuffer(bytes)\n\t\t\t\t\t\t.then(buffer => {\n\t\t\t\t\t\t\tres({ Bytes: new Uint8Array(buffer) });\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => rej(err));\n\t\t\t\t}\n\t\t\t\tif (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n\t\t\t\t\tres({ Bytes: new Uint8Array(bytes) } as Image);\n\t\t\t\t}\n\t\t\t\t// everything else can be directly passed to Rekognition / Textract.\n\t\t\t\tres({ Bytes: bytes } as Image);\n\t\t\t} else {\n\t\t\t\trej('Input source is not configured correctly.');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n\t * image and converts it into machine-readable text.\n\t * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n\t * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n\t */\n\tprotected async identifyText(\n\t\tinput: IdentifyTextInput\n\t): Promise<IdentifyTextOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return Promise.reject('No credentials');\n\t\tconst {\n\t\t\tidentifyText: {\n\t\t\t\tregion = '',\n\t\t\t\tdefaults: { format: configFormat = 'PLAIN' } = {},\n\t\t\t} = {},\n\t\t} = this._config;\n\t\tthis.rekognitionClient = new RekognitionClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tthis.textractClient = new TextractClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tlet inputDocument: Document;\n\n\t\ttry {\n\t\t\tinputDocument = await this.configureSource(input.text.source);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\n\t\t// get default value if format isn't specified in the input.\n\t\tconst format = input.text.format || configFormat;\n\t\tconst featureTypes: FeatureTypes = []; // structures we want to analyze (e.g. [TABLES, FORMS]).\n\t\tif (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n\t\tif (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n\n\t\tif (featureTypes.length === 0) {\n\t\t\t/**\n\t\t\t * Empty featureTypes indicates that we will identify plain text. We will use rekognition (suitable\n\t\t\t * for everyday images but has 50 word limit) first and see if reaches its word limit. If it does, then\n\t\t\t * we call textract and use the data that identify more words.\n\t\t\t */\n\t\t\tconst textractParam: DetectDocumentTextCommandInput = {\n\t\t\t\tDocument: inputDocument,\n\t\t\t};\n\t\t\tconst rekognitionParam: DetectTextCommandInput = {\n\t\t\t\tImage: inputDocument,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst detectTextCommand = new DetectTextCommand(rekognitionParam);\n\t\t\t\tconst rekognitionData = await this.rekognitionClient.send(\n\t\t\t\t\tdetectTextCommand\n\t\t\t\t);\n\n\t\t\t\tconst rekognitionResponse = categorizeRekognitionBlocks(\n\t\t\t\t\trekognitionData.TextDetections as TextDetectionList\n\t\t\t\t);\n\t\t\t\tif (rekognitionResponse.text.words.length < 50) {\n\t\t\t\t\t// did not hit the word limit, return the data\n\t\t\t\t\treturn rekognitionResponse;\n\t\t\t\t}\n\n\t\t\t\tconst detectDocumentTextCommand = new DetectDocumentTextCommand(\n\t\t\t\t\ttextractParam\n\t\t\t\t);\n\n\t\t\t\tconst { Blocks } = await this.textractClient.send(\n\t\t\t\t\tdetectDocumentTextCommand\n\t\t\t\t);\n\n\t\t\t\tif (rekognitionData.TextDetections.length > Blocks.length) {\n\t\t\t\t\treturn rekognitionResponse;\n\t\t\t\t}\n\n\t\t\t\treturn categorizeTextractBlocks(Blocks as BlockList);\n\t\t\t} catch (err) {\n\t\t\t\tPromise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst param: AnalyzeDocumentCommandInput = {\n\t\t\t\tDocument: inputDocument,\n\t\t\t\tFeatureTypes: featureTypes,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n\t\t\t\tconst { Blocks } = await this.textractClient.send(\n\t\t\t\t\tanalyzeDocumentCommand\n\t\t\t\t);\n\t\t\t\treturn categorizeTextractBlocks(Blocks as BlockList);\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Identify instances of real world entities from an image and if it contains unsafe content.\n\t * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n\t * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n\t */\n\tprotected async identifyLabels(\n\t\tinput: IdentifyLabelsInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return Promise.reject('No credentials');\n\t\t\tconst {\n\t\t\t\tidentifyLabels: {\n\t\t\t\t\tregion = '',\n\t\t\t\t\tdefaults: { type = 'LABELS' } = {},\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tthis.rekognitionClient = new RekognitionClient({\n\t\t\t\tregion,\n\t\t\t\tcredentials,\n\t\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\t});\n\t\t\tlet inputImage: Image;\n\t\t\tawait this.configureSource(input.labels.source)\n\t\t\t\t.then(data => {\n\t\t\t\t\tinputImage = data;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t});\n\t\t\tconst param = { Image: inputImage };\n\t\t\tconst servicePromises = [];\n\n\t\t\t// get default argument\n\t\t\tconst entityType = input.labels.type || type;\n\t\t\tif (entityType === 'LABELS' || entityType === 'ALL') {\n\t\t\t\tservicePromises.push(this.detectLabels(param));\n\t\t\t}\n\t\t\tif (entityType === 'UNSAFE' || entityType === 'ALL') {\n\t\t\t\tservicePromises.push(this.detectModerationLabels(param));\n\t\t\t}\n\n\t\t\treturn Promise.all(servicePromises)\n\t\t\t\t.then(data => {\n\t\t\t\t\tlet identifyResult: IdentifyLabelsOutput = {};\n\t\t\t\t\t// concatenate resolved promises to a single object\n\t\t\t\t\tdata.forEach(val => {\n\t\t\t\t\t\tidentifyResult = { ...identifyResult, ...val };\n\t\t\t\t\t});\n\t\t\t\t\treturn identifyResult;\n\t\t\t\t})\n\t\t\t\t.catch(err => Promise.reject(err));\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * Calls Rekognition.detectLabels and organizes the returned data.\n\t * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n\t * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n\t */\n\tprivate async detectLabels(\n\t\tparam: DetectLabelsCommandInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\ttry {\n\t\t\tconst detectLabelsCommand = new DetectLabelsCommand(param);\n\t\t\tconst data = await this.rekognitionClient.send(detectLabelsCommand);\n\t\t\tif (!data.Labels) return { labels: null }; // no image was detected\n\t\t\tconst detectLabelData = data.Labels.map(val => {\n\t\t\t\tconst boxes = val.Instances\n\t\t\t\t\t? val.Instances.map(val => makeCamelCase(val.BoundingBox))\n\t\t\t\t\t: undefined;\n\t\t\t\treturn {\n\t\t\t\t\tname: val.Name,\n\t\t\t\t\tboundingBoxes: boxes,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tconfidence: val.Confidence,\n\t\t\t\t\t\tparents: makeCamelCaseArray(val.Parents),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn { labels: detectLabelData };\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * Calls Rekognition.detectModerationLabels and organizes the returned data.\n\t * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n\t * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n\t */\n\tprivate async detectModerationLabels(\n\t\tparam: DetectModerationLabelsCommandInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\ttry {\n\t\t\tconst detectModerationLabelsCommand = new DetectModerationLabelsCommand(\n\t\t\t\tparam\n\t\t\t);\n\t\t\tconst data = await this.rekognitionClient.send(\n\t\t\t\tdetectModerationLabelsCommand\n\t\t\t);\n\t\t\tif (data.ModerationLabels.length !== 0) {\n\t\t\t\treturn { unsafe: 'YES' };\n\t\t\t} else {\n\t\t\t\treturn { unsafe: 'NO' };\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * Identify faces within an image that is provided as input, and match faces from a collection\n\t * or identify celebrities.\n\t * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n\t * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n\t */\n\tprotected async identifyEntities(\n\t\tinput: IdentifyEntitiesInput\n\t): Promise<IdentifyEntitiesOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return Promise.reject('No credentials');\n\t\tconst {\n\t\t\tidentifyEntities: {\n\t\t\t\tregion = '',\n\t\t\t\tcelebrityDetectionEnabled = false,\n\t\t\t\tdefaults: {\n\t\t\t\t\tcollectionId: collectionIdConfig = '',\n\t\t\t\t\tmaxEntities: maxFacesConfig = 50,\n\t\t\t\t} = {},\n\t\t\t} = {},\n\t\t} = this._config;\n\t\t// default arguments\n\n\t\tthis.rekognitionClient = new RekognitionClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tlet inputImage: Image;\n\t\tawait this.configureSource(input.entities.source)\n\t\t\t.then(data => (inputImage = data))\n\t\t\t.catch(err => {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t});\n\n\t\tconst param = { Attributes: ['ALL'], Image: inputImage };\n\n\t\tif (\n\t\t\tisIdentifyCelebrities(input.entities) &&\n\t\t\tinput.entities.celebrityDetection\n\t\t) {\n\t\t\tif (!celebrityDetectionEnabled) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\t'Error: You have to enable celebrity detection first'\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(\n\t\t\t\t\tparam\n\t\t\t\t);\n\t\t\t\tconst data = await this.rekognitionClient.send(\n\t\t\t\t\trecognizeCelebritiesCommand\n\t\t\t\t);\n\t\t\t\tconst faces = data.CelebrityFaces.map(celebrity => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n\t\t\t\t\t\tlandmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t...makeCamelCase(celebrity, ['Id', 'Name', 'Urls']),\n\t\t\t\t\t\t\tpose: makeCamelCase(celebrity.Face.Pose),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { entities: faces };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else if (\n\t\t\tisIdentifyFromCollection(input.entities) &&\n\t\t\tinput.entities.collection\n\t\t) {\n\t\t\tconst {\n\t\t\t\tcollectionId = collectionIdConfig,\n\t\t\t\tmaxEntities: maxFaces = maxFacesConfig,\n\t\t\t} = input.entities as IdentifyFromCollection;\n\t\t\t// Concatenate additional parameters\n\t\t\tconst updatedParam = {\n\t\t\t\t...param,\n\t\t\t\tCollectionId: collectionId,\n\t\t\t\tMaxFaces: maxFaces,\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst searchFacesByImageCommand = new SearchFacesByImageCommand(\n\t\t\t\t\tupdatedParam\n\t\t\t\t);\n\t\t\t\tconst data = await this.rekognitionClient.send(\n\t\t\t\t\tsearchFacesByImageCommand\n\t\t\t\t);\n\t\t\t\tconst faces = data.FaceMatches.map(val => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboundingBox: makeCamelCase(val.Face.BoundingBox),\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\texternalImageId: this.decodeExternalImageId(\n\t\t\t\t\t\t\t\tval.Face.ExternalImageId\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tsimilarity: val.Similarity,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { entities: faces };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst detectFacesCommand = new DetectFacesCommand(param);\n\t\t\t\tconst data = await this.rekognitionClient.send(detectFacesCommand);\n\t\t\t\tconst faces = data.FaceDetails.map(detail => {\n\t\t\t\t\t// face attributes keys we want to extract from Rekognition's response\n\t\t\t\t\tconst attributeKeys = [\n\t\t\t\t\t\t'Smile',\n\t\t\t\t\t\t'Eyeglasses',\n\t\t\t\t\t\t'Sunglasses',\n\t\t\t\t\t\t'Gender',\n\t\t\t\t\t\t'Beard',\n\t\t\t\t\t\t'Mustache',\n\t\t\t\t\t\t'EyesOpen',\n\t\t\t\t\t\t'MouthOpen'\n\t\t\t\t\t];\n\t\t\t\t\tconst faceAttributes = makeCamelCase(detail, attributeKeys);\n\t\t\t\t\tif (detail.Emotions) {\n\t\t\t\t\t\tfaceAttributes['emotions'] = detail.Emotions.map(\n\t\t\t\t\t\t\temotion => emotion.Type\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboundingBox: makeCamelCase(detail.BoundingBox),\n\t\t\t\t\t\tlandmarks: makeCamelCaseArray(detail.Landmarks),\n\t\t\t\t\t\tageRange: makeCamelCase(detail.AgeRange),\n\t\t\t\t\t\tattributes: faceAttributes,\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\tconfidence: detail.Confidence,\n\t\t\t\t\t\t\tpose: makeCamelCase(detail.Pose),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { entities: faces };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decodeExternalImageId(externalImageId: string): string {\n\t\treturn ('' + externalImageId).replace(/::/g, '/');\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AmazonAIIdentifyPredictionsProvider;\n"]},"metadata":{},"sourceType":"module"}