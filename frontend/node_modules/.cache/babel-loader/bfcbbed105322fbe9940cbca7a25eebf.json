{"ast":null,"code":"/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n  if (!obj) return undefined;\n  var newObj = {};\n  var keysToRename = keys ? keys : Object.keys(obj);\n  keysToRename.forEach(function (key) {\n    var _a;\n\n    if (obj.hasOwnProperty(key)) {\n      // change the key to camelcase.\n      var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n      Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n    }\n  });\n  return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\n\nexport function makeCamelCaseArray(objArr, keys) {\n  if (!objArr) return undefined;\n  return objArr.map(function (obj) {\n    return makeCamelCase(obj, keys);\n  });\n}\n/**\n * Converts blob to array buffer\n */\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise(function (res, rej) {\n    var reader = new FileReader();\n\n    reader.onload = function (_event) {\n      res(reader.result);\n    };\n\n    reader.onerror = function (err) {\n      rej(err);\n    };\n\n    try {\n      reader.readAsArrayBuffer(blob);\n    } catch (err) {\n      rej(err); // in case user gives invalid type\n    }\n  });\n}","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\predictions\\src\\Providers\\Utils.ts"],"names":[],"mappings":"AAAA;;;AAGG;AACH,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAqC,IAArC,EAAoD;AACzD,MAAI,CAAC,GAAL,EAAU,OAAO,SAAP;AACV,MAAM,MAAM,GAAG,EAAf;AACA,MAAM,YAAY,GAAG,IAAI,GAAG,IAAH,GAAU,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAnC;AACA,EAAA,YAAY,CAAC,OAAb,CAAqB,UAAA,GAAA,EAAG;;;AACvB,QAAI,GAAG,CAAC,cAAJ,CAAmB,GAAnB,CAAJ,EAA6B;AAC5B;AACA,UAAM,YAAY,GAAG,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,WAAd,KAA8B,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAnD;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd,GAAoB,EAAA,GAAA,EAAA,EAAI,EAAA,CAAC,YAAD,CAAA,GAAgB,GAAG,CAAC,GAAD,CAAvB,EAA4B,EAAhD;AACA;AACD,GAND;AAOA,SAAO,MAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAA+C,IAA/C,EAA8D;AACnE,MAAI,CAAC,MAAL,EAAa,OAAO,SAAP;AACb,SAAO,MAAM,CAAC,GAAP,CAAW,UAAA,GAAA,EAAG;AAAI,WAAA,aAAa,CAAC,GAAD,EAAb,IAAa,CAAb;AAAwB,GAA1C,CAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAsC;AAC3C,SAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AAC3B,QAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,UAAA,MAAA,EAAM;AACrB,MAAA,GAAG,CAAC,MAAM,CAAC,MAAR,CAAH;AACA,KAFD;;AAGA,IAAA,MAAM,CAAC,OAAP,GAAiB,UAAA,GAAA,EAAG;AACnB,MAAA,GAAG,CAAC,GAAD,CAAH;AACA,KAFD;;AAGA,QAAI;AACH,MAAA,MAAM,CAAC,iBAAP,CAAyB,IAAzB;AACA,KAFD,CAEE,OAAO,GAAP,EAAY;AACb,MAAA,GAAG,CAAC,GAAD,CAAH,CADa,CACH;AACV;AACD,GAbM,CAAP;AAcA","sourcesContent":["/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj: object, keys?: string[]) {\n\tif (!obj) return undefined;\n\tconst newObj = {};\n\tconst keysToRename = keys ? keys : Object.keys(obj);\n\tkeysToRename.forEach(key => {\n\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t// change the key to camelcase.\n\t\t\tconst camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n\t\t\tObject.assign(newObj, { [camelCaseKey]: obj[key] });\n\t\t}\n\t});\n\treturn newObj;\n}\n\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\nexport function makeCamelCaseArray(objArr: object[], keys?: string[]) {\n\tif (!objArr) return undefined;\n\treturn objArr.map(obj => makeCamelCase(obj, keys));\n}\n\n/**\n * Converts blob to array buffer\n */\nexport function blobToArrayBuffer(blob: Blob): Promise<Uint8Array> {\n\treturn new Promise((res, rej) => {\n\t\tconst reader = new FileReader();\n\t\treader.onload = _event => {\n\t\t\tres(reader.result as Uint8Array);\n\t\t};\n\t\treader.onerror = err => {\n\t\t\trej(err);\n\t\t};\n\t\ttry {\n\t\t\treader.readAsArrayBuffer(blob);\n\t\t} catch (err) {\n\t\t\trej(err); // in case user gives invalid type\n\t\t}\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}