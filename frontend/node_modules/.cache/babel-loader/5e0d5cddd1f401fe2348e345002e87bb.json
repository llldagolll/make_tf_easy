{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetAdmChannelRequest, GetAdmChannelResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1GetAdmChannelCommand, serializeAws_restJson1GetAdmChannelCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Retrieves information about the status and settings of the ADM channel for an application.</p>\n */\n\nvar GetAdmChannelCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetAdmChannelCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetAdmChannelCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetAdmChannelCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PinpointClient\";\n    var commandName = \"GetAdmChannelCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetAdmChannelRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetAdmChannelResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetAdmChannelCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1GetAdmChannelCommand(input, context);\n  };\n\n  GetAdmChannelCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1GetAdmChannelCommand(output, context);\n  };\n\n  return GetAdmChannelCommand;\n}($Command);\n\nexport { GetAdmChannelCommand };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-sdk\\client-pinpoint\\commands\\GetAdmChannelCommand.ts"],"names":[],"mappings":";AACA,SAAS,oBAAT,EAA+B,qBAA/B,QAA4D,oBAA5D;AACA,SACE,4CADF,EAEE,0CAFF,QAGO,4BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;AAEG;;AACH,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA,CAA1C,CAKE;AACA;;;AAEA,WAAA,oBAAA,CAAqB,KAArB,EAAqD;AAArD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAgC,CAGnD;AACD;AAED;;AAEG;;;AACH,EAAA,oBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,gBAAnB;AACA,QAAM,WAAW,GAAG,sBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,oBAAoB,CAAC,kBAJS;AAKvD,MAAA,wBAAwB,EAAE,qBAAqB,CAAC;AALO,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAoD,OAApD,EAA2E;AACzE,WAAO,0CAA0C,CAAC,KAAD,EAAQ,OAAR,CAAjD;AACD,GAFO;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,4CAA4C,CAAC,MAAD,EAAS,OAAT,CAAnD;AACD,GAFO;;AAMV,SAAA,oBAAA;AAAC,CAtDD,CAA0C,QAA1C,CAAA","sourcesContent":["import { PinpointClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../PinpointClient\";\nimport { GetAdmChannelRequest, GetAdmChannelResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1GetAdmChannelCommand,\n  serializeAws_restJson1GetAdmChannelCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetAdmChannelCommandInput = GetAdmChannelRequest;\nexport type GetAdmChannelCommandOutput = GetAdmChannelResponse & __MetadataBearer;\n\n/**\n * <p>Retrieves information about the status and settings of the ADM channel for an application.</p>\n */\nexport class GetAdmChannelCommand extends $Command<\n  GetAdmChannelCommandInput,\n  GetAdmChannelCommandOutput,\n  PinpointClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetAdmChannelCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: PinpointClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetAdmChannelCommandInput, GetAdmChannelCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"PinpointClient\";\n    const commandName = \"GetAdmChannelCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetAdmChannelRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetAdmChannelResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetAdmChannelCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1GetAdmChannelCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetAdmChannelCommandOutput> {\n    return deserializeAws_restJson1GetAdmChannelCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}