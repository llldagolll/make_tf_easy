{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport { resolveEndpointsConfig, resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Amazon Textract detects and analyzes text in documents and converts it\n *          into machine-readable text. This is the API reference documentation for\n *          Amazon Textract.</p>\n */\n\nvar TextractClient =\n/** @class */\nfunction (_super) {\n  __extends(TextractClient, _super);\n\n  function TextractClient(configuration) {\n    var _this = this;\n\n    var _config_0 = __assign(__assign({}, __ClientDefaultValues), configuration);\n\n    var _config_1 = resolveRegionConfig(_config_0);\n\n    var _config_2 = resolveEndpointsConfig(_config_1);\n\n    var _config_3 = resolveAwsAuthConfig(_config_2);\n\n    var _config_4 = resolveRetryConfig(_config_3);\n\n    var _config_5 = resolveHostHeaderConfig(_config_4);\n\n    var _config_6 = resolveUserAgentConfig(_config_5);\n\n    _this = _super.call(this, _config_6) || this;\n    _this.config = _config_6;\n\n    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));\n\n    _this.middlewareStack.use(getRetryPlugin(_this.config));\n\n    _this.middlewareStack.use(getContentLengthPlugin(_this.config));\n\n    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));\n\n    _this.middlewareStack.use(getLoggerPlugin(_this.config));\n\n    _this.middlewareStack.use(getUserAgentPlugin(_this.config));\n\n    return _this;\n  }\n\n  TextractClient.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  return TextractClient;\n}(__Client);\n\nexport { TextractClient };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-sdk\\client-textract\\TextractClient.ts"],"names":[],"mappings":";AAkBA,SAAS,mBAAmB,IAAI,qBAAhC,QAA6D,iBAA7D;AACA,SAKE,sBALF,EAME,mBANF,QAOO,0BAPP;AAQA,SAAS,sBAAT,QAAuC,oCAAvC;AACA,SAGE,mBAHF,EAIE,uBAJF,QAKO,iCALP;AAMA,SAAS,eAAT,QAAgC,4BAAhC;AACA,SAAgD,cAAhD,EAAgE,kBAAhE,QAA0F,2BAA1F;AACA,SAGE,gBAHF,EAIE,oBAJF,QAKO,6BALP;AAMA,SAGE,kBAHF,EAIE,sBAJF,QAKO,gCALP;AAOA,SACE,MAAM,IAAI,QADZ,QAIO,wBAJP;AAsJA;;;;AAIG;;AACH,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAQlC,WAAA,cAAA,CAAY,aAAZ,EAA+C;AAA/C,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,qBADQ,CAAA,EAER,aAFQ,CAAb;;AAIA,QAAI,SAAS,GAAG,mBAAmB,CAAC,SAAD,CAAnC;;AACA,QAAI,SAAS,GAAG,sBAAsB,CAAC,SAAD,CAAtC;;AACA,QAAI,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAApC;;AACA,QAAI,SAAS,GAAG,kBAAkB,CAAC,SAAD,CAAlC;;AACA,QAAI,SAAS,GAAG,uBAAuB,CAAC,SAAD,CAAvC;;AACA,QAAI,SAAS,GAAG,sBAAsB,CAAC,SAAD,CAAtC;;AACA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,KAAgB,IAAhB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,SAAd;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,gBAAgB,CAAC,KAAI,CAAC,MAAN,CAAzC;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,KAAI,CAAC,MAAN,CAAvC;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,sBAAsB,CAAC,KAAI,CAAC,MAAN,CAA/C;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,mBAAmB,CAAC,KAAI,CAAC,MAAN,CAA5C;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,eAAe,CAAC,KAAI,CAAC,MAAN,CAAxC;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,kBAAkB,CAAC,KAAI,CAAC,MAAN,CAA3C;;;AACD;;AAED,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;AACD,GAFD;;AAGF,SAAA,cAAA;AAAC,CAhCD,CAAoC,QAApC,CAAA","sourcesContent":["import { AnalyzeDocumentCommandInput, AnalyzeDocumentCommandOutput } from \"./commands/AnalyzeDocumentCommand\";\nimport { DetectDocumentTextCommandInput, DetectDocumentTextCommandOutput } from \"./commands/DetectDocumentTextCommand\";\nimport {\n  GetDocumentAnalysisCommandInput,\n  GetDocumentAnalysisCommandOutput,\n} from \"./commands/GetDocumentAnalysisCommand\";\nimport {\n  GetDocumentTextDetectionCommandInput,\n  GetDocumentTextDetectionCommandOutput,\n} from \"./commands/GetDocumentTextDetectionCommand\";\nimport {\n  StartDocumentAnalysisCommandInput,\n  StartDocumentAnalysisCommandOutput,\n} from \"./commands/StartDocumentAnalysisCommand\";\nimport {\n  StartDocumentTextDetectionCommandInput,\n  StartDocumentTextDetectionCommandOutput,\n} from \"./commands/StartDocumentTextDetectionCommand\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport {\n  EndpointsInputConfig,\n  EndpointsResolvedConfig,\n  RegionInputConfig,\n  RegionResolvedConfig,\n  resolveEndpointsConfig,\n  resolveRegionConfig,\n} from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport {\n  HostHeaderInputConfig,\n  HostHeaderResolvedConfig,\n  getHostHeaderPlugin,\n  resolveHostHeaderConfig,\n} from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { RetryInputConfig, RetryResolvedConfig, getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport {\n  AwsAuthInputConfig,\n  AwsAuthResolvedConfig,\n  getAwsAuthPlugin,\n  resolveAwsAuthConfig,\n} from \"@aws-sdk/middleware-signing\";\nimport {\n  UserAgentInputConfig,\n  UserAgentResolvedConfig,\n  getUserAgentPlugin,\n  resolveUserAgentConfig,\n} from \"@aws-sdk/middleware-user-agent\";\nimport { HttpHandler as __HttpHandler } from \"@aws-sdk/protocol-http\";\nimport {\n  Client as __Client,\n  SmithyConfiguration as __SmithyConfiguration,\n  SmithyResolvedConfiguration as __SmithyResolvedConfiguration,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Provider,\n  RegionInfoProvider,\n  Credentials as __Credentials,\n  Decoder as __Decoder,\n  Encoder as __Encoder,\n  HashConstructor as __HashConstructor,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  Logger as __Logger,\n  Provider as __Provider,\n  StreamCollector as __StreamCollector,\n  UrlParser as __UrlParser,\n  UserAgent as __UserAgent,\n} from \"@aws-sdk/types\";\n\nexport type ServiceInputTypes =\n  | AnalyzeDocumentCommandInput\n  | DetectDocumentTextCommandInput\n  | GetDocumentAnalysisCommandInput\n  | GetDocumentTextDetectionCommandInput\n  | StartDocumentAnalysisCommandInput\n  | StartDocumentTextDetectionCommandInput;\n\nexport type ServiceOutputTypes =\n  | AnalyzeDocumentCommandOutput\n  | DetectDocumentTextCommandOutput\n  | GetDocumentAnalysisCommandOutput\n  | GetDocumentTextDetectionCommandOutput\n  | StartDocumentAnalysisCommandOutput\n  | StartDocumentTextDetectionCommandOutput;\n\nexport interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {\n  /**\n   * The HTTP handler to use. Fetch in browser and Https in Nodejs.\n   */\n  requestHandler?: __HttpHandler;\n\n  /**\n   * A constructor for a class implementing the @aws-sdk/types.Hash interface\n   * that computes the SHA-256 HMAC or checksum of a string or binary buffer.\n   */\n  sha256?: __HashConstructor;\n\n  /**\n   * The function that will be used to convert strings into HTTP endpoints.\n   */\n  urlParser?: __UrlParser;\n\n  /**\n   * A function that can calculate the length of a request body.\n   */\n  bodyLengthChecker?: (body: any) => number | undefined;\n\n  /**\n   * A function that converts a stream into an array of bytes.\n   */\n  streamCollector?: __StreamCollector;\n\n  /**\n   * The function that will be used to convert a base64-encoded string to a byte array\n   */\n  base64Decoder?: __Decoder;\n\n  /**\n   * The function that will be used to convert binary data to a base64-encoded string\n   */\n  base64Encoder?: __Encoder;\n\n  /**\n   * The function that will be used to convert a UTF8-encoded string to a byte array\n   */\n  utf8Decoder?: __Decoder;\n\n  /**\n   * The function that will be used to convert binary data to a UTF-8 encoded string\n   */\n  utf8Encoder?: __Encoder;\n\n  /**\n   * The runtime environment\n   */\n  runtime?: string;\n\n  /**\n   * Disable dyanamically changing the endpoint of the client based on the hostPrefix\n   * trait of an operation.\n   */\n  disableHostPrefix?: boolean;\n\n  /**\n   * Unique service identifier.\n   * @internal\n   */\n  serviceId?: string;\n\n  /**\n   * Default credentials provider; Not available in browser runtime\n   */\n  credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;\n\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | __Provider<string>;\n\n  /**\n   * Value for how many times a request will be made at most in case of retry.\n   */\n  maxAttempts?: number | __Provider<number>;\n\n  /**\n   * Optional logger for logging debug/info/warn/error.\n   */\n  logger?: __Logger;\n\n  /**\n   * Fetch related hostname, signing name or signing region with given region.\n   */\n  regionInfoProvider?: RegionInfoProvider;\n\n  /**\n   * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header\n   * @internal\n   */\n  defaultUserAgentProvider?: Provider<__UserAgent>;\n}\n\nexport type TextractClientConfig = Partial<__SmithyConfiguration<__HttpHandlerOptions>> &\n  ClientDefaults &\n  RegionInputConfig &\n  EndpointsInputConfig &\n  AwsAuthInputConfig &\n  RetryInputConfig &\n  HostHeaderInputConfig &\n  UserAgentInputConfig;\n\nexport type TextractClientResolvedConfig = __SmithyResolvedConfiguration<__HttpHandlerOptions> &\n  Required<ClientDefaults> &\n  RegionResolvedConfig &\n  EndpointsResolvedConfig &\n  AwsAuthResolvedConfig &\n  RetryResolvedConfig &\n  HostHeaderResolvedConfig &\n  UserAgentResolvedConfig;\n\n/**\n * <p>Amazon Textract detects and analyzes text in documents and converts it\n *          into machine-readable text. This is the API reference documentation for\n *          Amazon Textract.</p>\n */\nexport class TextractClient extends __Client<\n  __HttpHandlerOptions,\n  ServiceInputTypes,\n  ServiceOutputTypes,\n  TextractClientResolvedConfig\n> {\n  readonly config: TextractClientResolvedConfig;\n\n  constructor(configuration: TextractClientConfig) {\n    let _config_0 = {\n      ...__ClientDefaultValues,\n      ...configuration,\n    };\n    let _config_1 = resolveRegionConfig(_config_0);\n    let _config_2 = resolveEndpointsConfig(_config_1);\n    let _config_3 = resolveAwsAuthConfig(_config_2);\n    let _config_4 = resolveRetryConfig(_config_3);\n    let _config_5 = resolveHostHeaderConfig(_config_4);\n    let _config_6 = resolveUserAgentConfig(_config_5);\n    super(_config_6);\n    this.config = _config_6;\n    this.middlewareStack.use(getAwsAuthPlugin(this.config));\n    this.middlewareStack.use(getRetryPlugin(this.config));\n    this.middlewareStack.use(getContentLengthPlugin(this.config));\n    this.middlewareStack.use(getHostHeaderPlugin(this.config));\n    this.middlewareStack.use(getLoggerPlugin(this.config));\n    this.middlewareStack.use(getUserAgentPlugin(this.config));\n  }\n\n  destroy(): void {\n    super.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}