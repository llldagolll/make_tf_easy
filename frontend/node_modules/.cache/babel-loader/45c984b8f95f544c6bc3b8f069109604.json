{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateStreamProcessorRequest, CreateStreamProcessorResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamProcessorCommand, serializeAws_json1_1CreateStreamProcessorCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n *         <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n *         <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n *             face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n *             Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n *             to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with\n *             the <code>Name</code> field. </p>\n *         <p>After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to\n *         stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.</p>\n */\n\nvar CreateStreamProcessorCommand =\n/** @class */\nfunction (_super) {\n  __extends(CreateStreamProcessorCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateStreamProcessorCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateStreamProcessorCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"CreateStreamProcessorCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateStreamProcessorRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateStreamProcessorResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateStreamProcessorCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateStreamProcessorCommand(input, context);\n  };\n\n  CreateStreamProcessorCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateStreamProcessorCommand(output, context);\n  };\n\n  return CreateStreamProcessorCommand;\n}($Command);\n\nexport { CreateStreamProcessorCommand };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\CreateStreamProcessorCommand.ts"],"names":[],"mappings":";AACA,SAAS,4BAAT,EAAuC,6BAAvC,QAA4E,oBAA5E;AACA,SACE,kDADF,EAEE,gDAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;AAUG;;AACH,IAAA,4BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkD,EAAA,SAAA,CAAA,4BAAA,EAAA,MAAA,CAAA,CAAlD,CAKE;AACA;;;AAEA,WAAA,4BAAA,CAAqB,KAArB,EAA6D;AAA7D,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAwC,CAG3D;AACD;AAED;;AAEG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,mBAAnB;AACA,QAAM,WAAW,GAAG,8BAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,4BAA4B,CAAC,kBAJC;AAKvD,MAAA,wBAAwB,EAAE,6BAA6B,CAAC;AALD,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,4BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA4D,OAA5D,EAAmF;AACjF,WAAO,gDAAgD,CAAC,KAAD,EAAQ,OAAR,CAAvD;AACD,GAFO;;AAIA,EAAA,4BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,kDAAkD,CAAC,MAAD,EAAS,OAAT,CAAzD;AACD,GAFO;;AAMV,SAAA,4BAAA;AAAC,CAtDD,CAAkD,QAAlD,CAAA","sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { CreateStreamProcessorRequest, CreateStreamProcessorResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1CreateStreamProcessorCommand,\n  serializeAws_json1_1CreateStreamProcessorCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CreateStreamProcessorCommandInput = CreateStreamProcessorRequest;\nexport type CreateStreamProcessorCommandOutput = CreateStreamProcessorResponse & __MetadataBearer;\n\n/**\n * <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n *         <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n *         <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n *             face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n *             Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n *             to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with\n *             the <code>Name</code> field. </p>\n *         <p>After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to\n *         stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.</p>\n */\nexport class CreateStreamProcessorCommand extends $Command<\n  CreateStreamProcessorCommandInput,\n  CreateStreamProcessorCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CreateStreamProcessorCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CreateStreamProcessorCommandInput, CreateStreamProcessorCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"CreateStreamProcessorCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CreateStreamProcessorRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateStreamProcessorResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CreateStreamProcessorCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1CreateStreamProcessorCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CreateStreamProcessorCommandOutput> {\n    return deserializeAws_json1_1CreateStreamProcessorCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}