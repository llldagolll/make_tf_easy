{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractXRProvider');\n\nvar AbstractXRProvider =\n/** @class */\nfunction () {\n  function AbstractXRProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._config = options;\n  }\n\n  AbstractXRProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this._config = __assign(__assign({}, config), this._config);\n    logger.debug(\"configure \" + this.getProviderName(), this._config);\n    return this.options;\n  };\n\n  AbstractXRProvider.prototype.getCategory = function () {\n    return 'XR';\n  };\n\n  Object.defineProperty(AbstractXRProvider.prototype, \"options\", {\n    get: function () {\n      return __assign({}, this._config);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AbstractXRProvider;\n}();\n\nexport { AbstractXRProvider };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\xr\\src\\Providers\\XRProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAaA,SAAS,aAAa,IAAI,MAA1B,QAAwC,mBAAxC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,oBAAX,CAAf;;AAEA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAGC,WAAA,kBAAA,CAAY,OAAZ,EAAyC;AAA7B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA6B;;AACxC,SAAK,OAAL,GAAe,OAAf;AACA;;AAED,EAAA,kBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAsC;AAA5B,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,EAAA;AAA4B;;AACrC,SAAK,OAAL,GAAY,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,MAAR,CAAA,EAAmB,KAAK,OAAxB,CAAZ;AAEA,IAAA,MAAM,CAAC,KAAP,CAAa,eAAa,KAAK,eAAL,EAA1B,EAAoD,KAAK,OAAzD;AAEA,WAAO,KAAK,OAAZ;AACA,GAND;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACC,WAAO,IAAP;AACA,GAFD;;AAMA,EAAA,MAAA,CAAA,cAAA,CAAc,kBAAA,CAAA,SAAd,EAAc,SAAd,EAAqB;SAArB,YAAA;AACC,aAAA,QAAA,CAAA,EAAA,EAAY,KAAK,OAAjB,CAAA;AACA,KAFoB;oBAAA;;AAAA,GAArB;AAwBD,SAAA,kBAAA;AAAC,CA7CD,EAAA","sourcesContent":["/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { XRProvider, ProviderOptions, SceneOptions } from '../types';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('AbstractXRProvider');\n\nexport abstract class AbstractXRProvider implements XRProvider {\n\tprivate _config: ProviderOptions;\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tthis._config = options;\n\t}\n\n\tconfigure(config: ProviderOptions = {}): ProviderOptions {\n\t\tthis._config = { ...config, ...this._config };\n\n\t\tlogger.debug(`configure ${this.getProviderName()}`, this._config);\n\n\t\treturn this.options;\n\t}\n\n\tgetCategory() {\n\t\treturn 'XR';\n\t}\n\n\tabstract getProviderName(): string;\n\n\tprotected get options(): ProviderOptions {\n\t\treturn { ...this._config };\n\t}\n\n\tpublic abstract loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SceneOptions\n\t): void;\n\tpublic abstract isSceneLoaded(sceneName: string);\n\tpublic abstract getSceneController(sceneName: string): any;\n\tpublic abstract isVRCapable(sceneName: string): boolean;\n\tpublic abstract isVRPresentationActive(sceneName: string): boolean;\n\tpublic abstract start(sceneName: string): void;\n\tpublic abstract enterVR(sceneName: string): void;\n\tpublic abstract exitVR(sceneName: string): void;\n\tpublic abstract isMuted(sceneName: string): boolean;\n\tpublic abstract setMuted(sceneName: string, muted: boolean): void;\n\tpublic abstract onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function\n\t): void;\n\tpublic abstract enableAudio(sceneName: string): void;\n}\n"]},"metadata":{},"sourceType":"module"}