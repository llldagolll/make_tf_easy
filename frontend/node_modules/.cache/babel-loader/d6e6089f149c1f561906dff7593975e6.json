{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { Rekognition } from \"../Rekognition\";\nimport { RekognitionClient } from \"../RekognitionClient\";\nimport { GetFaceDetectionCommand } from \"../commands/GetFaceDetectionCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new GetFaceDetectionCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.getFaceDetection.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateGetFaceDetection(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateGetFaceDetection_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.NextToken = token;\n          input[\"MaxResults\"] = config.pageSize;\n          if (!(config.client instanceof Rekognition)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof RekognitionClient)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected Rekognition | RekognitionClient\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.NextToken;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\pagination\\GetFaceDetectionPaginator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rekognition } from \"../Rekognition\";\nimport { RekognitionClient } from \"../RekognitionClient\";\nimport {\n  GetFaceDetectionCommand,\n  GetFaceDetectionCommandInput,\n  GetFaceDetectionCommandOutput,\n} from \"../commands/GetFaceDetectionCommand\";\nimport { RekognitionPaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: RekognitionClient,\n  input: GetFaceDetectionCommandInput,\n  ...args: any\n): Promise<GetFaceDetectionCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new GetFaceDetectionCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: Rekognition,\n  input: GetFaceDetectionCommandInput,\n  ...args: any\n): Promise<GetFaceDetectionCommandOutput> => {\n  // @ts-ignore\n  return await client.getFaceDetection(input, ...args);\n};\nexport async function* paginateGetFaceDetection(\n  config: RekognitionPaginationConfiguration,\n  input: GetFaceDetectionCommandInput,\n  ...additionalArguments: any\n): Paginator<GetFaceDetectionCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.NextToken\n  let token: typeof input.NextToken | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: GetFaceDetectionCommandOutput;\n  while (hasNext) {\n    input.NextToken = token;\n    input[\"MaxResults\"] = config.pageSize;\n    if (config.client instanceof Rekognition) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof RekognitionClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected Rekognition | RekognitionClient\");\n    }\n    yield page;\n    token = page.NextToken;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}