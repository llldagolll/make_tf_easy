{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nexport var parseMobileHubConfig = function (config) {\n  var amplifyConfig = {}; // Analytics\n\n  if (config['aws_mobile_analytics_app_id']) {\n    var Analytics = {\n      AWSPinpoint: {\n        appId: config['aws_mobile_analytics_app_id'],\n        region: config['aws_mobile_analytics_app_region']\n      }\n    };\n    amplifyConfig.Analytics = Analytics;\n  } // Auth\n\n\n  if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n    amplifyConfig.Auth = {\n      userPoolId: config['aws_user_pools_id'],\n      userPoolWebClientId: config['aws_user_pools_web_client_id'],\n      region: config['aws_cognito_region'],\n      identityPoolId: config['aws_cognito_identity_pool_id'],\n      identityPoolRegion: config['aws_cognito_region'],\n      mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable'\n    };\n  } // Storage\n\n\n  var storageConfig;\n\n  if (config['aws_user_files_s3_bucket']) {\n    storageConfig = {\n      AWSS3: {\n        bucket: config['aws_user_files_s3_bucket'],\n        region: config['aws_user_files_s3_bucket_region'],\n        dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n      }\n    };\n  } else {\n    storageConfig = config ? config.Storage || config : {};\n  } // Logging\n\n\n  if (config['Logging']) {\n    amplifyConfig.Logging = __assign(__assign({}, config['Logging']), {\n      region: config['aws_project_region']\n    });\n  } // Geo\n\n\n  if (config['geo']) {\n    amplifyConfig.Geo = Object.assign({}, config.geo);\n\n    if (config.geo['amazon_location_service']) {\n      amplifyConfig.Geo = {\n        AmazonLocationService: config.geo['amazon_location_service']\n      };\n    }\n  }\n\n  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n  amplifyConfig.Storage = Object.assign({}, storageConfig);\n  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);\n  logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n  return amplifyConfig;\n};\n/**\n * @deprecated use per-function export\n */\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser() {}\n\n  Parser.parseMobilehubConfig = parseMobileHubConfig;\n  return Parser;\n}();\n\nexport { Parser };\n/**\n * @deprecated use per-function export\n */\n\nexport default Parser;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\core\\src\\Parser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,SAAS,aAAa,IAAI,MAA1B,QAAwC,UAAxC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,QAAX,CAAf;AAEA,OAAO,IAAM,oBAAoB,GAAG,UAAC,MAAD,EAAO;AAC1C,MAAM,aAAa,GAAkB,EAArC,CAD0C,CAE1C;;AACA,MAAI,MAAM,CAAC,6BAAD,CAAV,EAA2C;AAC1C,QAAM,SAAS,GAAG;AACjB,MAAA,WAAW,EAAE;AACZ,QAAA,KAAK,EAAE,MAAM,CAAC,6BAAD,CADD;AAEZ,QAAA,MAAM,EAAE,MAAM,CAAC,iCAAD;AAFF;AADI,KAAlB;AAMA,IAAA,aAAa,CAAC,SAAd,GAA0B,SAA1B;AACA,GAXyC,CAa1C;;;AACA,MAAI,MAAM,CAAC,8BAAD,CAAN,IAA0C,MAAM,CAAC,mBAAD,CAApD,EAA2E;AAC1E,IAAA,aAAa,CAAC,IAAd,GAAqB;AACpB,MAAA,UAAU,EAAE,MAAM,CAAC,mBAAD,CADE;AAEpB,MAAA,mBAAmB,EAAE,MAAM,CAAC,8BAAD,CAFP;AAGpB,MAAA,MAAM,EAAE,MAAM,CAAC,oBAAD,CAHM;AAIpB,MAAA,cAAc,EAAE,MAAM,CAAC,8BAAD,CAJF;AAKpB,MAAA,kBAAkB,EAAE,MAAM,CAAC,oBAAD,CALN;AAMpB,MAAA,eAAe,EAAE,MAAM,CAAC,uBAAD,CAAN,KAAoC;AANjC,KAArB;AAQA,GAvByC,CAyB1C;;;AACA,MAAI,aAAJ;;AACA,MAAI,MAAM,CAAC,0BAAD,CAAV,EAAwC;AACvC,IAAA,aAAa,GAAG;AACf,MAAA,KAAK,EAAE;AACN,QAAA,MAAM,EAAE,MAAM,CAAC,0BAAD,CADR;AAEN,QAAA,MAAM,EAAE,MAAM,CAAC,iCAAD,CAFR;AAGN,QAAA,0CAA0C,EACzC,MAAM,CACL,oEADK;AAJD;AADQ,KAAhB;AAUA,GAXD,MAWO;AACN,IAAA,aAAa,GAAG,MAAM,GAAG,MAAM,CAAC,OAAP,IAAkB,MAArB,GAA8B,EAApD;AACA,GAxCyC,CA0C1C;;;AACA,MAAI,MAAM,CAAC,SAAD,CAAV,EAAuB;AACtB,IAAA,aAAa,CAAC,OAAd,GAAqB,QAAA,CAAA,QAAA,CAAA,EAAA,EACjB,MAAM,CAAC,SAAD,CADW,CAAA,EACA;AACpB,MAAA,MAAM,EAAE,MAAM,CAAC,oBAAD;AADM,KADA,CAArB;AAIA,GAhDyC,CAkD1C;;;AACA,MAAI,MAAM,CAAC,KAAD,CAAV,EAAmB;AAClB,IAAA,aAAa,CAAC,GAAd,GAAoB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,MAAM,CAAC,GAAzB,CAApB;;AACA,QAAI,MAAM,CAAC,GAAP,CAAW,yBAAX,CAAJ,EAA2C;AAC1C,MAAA,aAAa,CAAC,GAAd,GAAoB;AACnB,QAAA,qBAAqB,EAAE,MAAM,CAAC,GAAP,CAAW,yBAAX;AADJ,OAApB;AAGA;AACD;;AAED,EAAA,aAAa,CAAC,SAAd,GAA0B,MAAM,CAAC,MAAP,CACzB,EADyB,EAEzB,aAAa,CAAC,SAFW,EAGzB,MAAM,CAAC,SAHkB,CAA1B;AAKA,EAAA,aAAa,CAAC,IAAd,GAAqB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAa,CAAC,IAAhC,EAAsC,MAAM,CAAC,IAA7C,CAArB;AACA,EAAA,aAAa,CAAC,OAAd,GAAwB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAlB,CAAxB;AACA,EAAA,aAAa,CAAC,OAAd,GAAwB,MAAM,CAAC,MAAP,CACvB,EADuB,EAEvB,aAAa,CAAC,OAFS,EAGvB,MAAM,CAAC,OAHgB,CAAxB;AAKA,EAAA,MAAM,CAAC,KAAP,CAAa,cAAb,EAA6B,MAA7B,EAAqC,kBAArC,EAAyD,aAAzD;AACA,SAAO,aAAP;AACA,CA1EM;AA4EP;;AAEG;;AACH,IAAA,MAAA;AAAA;AAAA,YAAA;AAAA,WAAA,MAAA,GAAA,CAEC;;AADO,EAAA,MAAA,CAAA,oBAAA,GAAuB,oBAAvB;AACR,SAAA,MAAA;AAAC,CAFD,EAAA;;SAAa,M;AAIb;;AAEG;;AACH,eAAe,MAAf","sourcesContent":["import { AmplifyConfig } from './types';\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Parser');\n\nexport const parseMobileHubConfig = (config): AmplifyConfig => {\n\tconst amplifyConfig: AmplifyConfig = {};\n\t// Analytics\n\tif (config['aws_mobile_analytics_app_id']) {\n\t\tconst Analytics = {\n\t\t\tAWSPinpoint: {\n\t\t\t\tappId: config['aws_mobile_analytics_app_id'],\n\t\t\t\tregion: config['aws_mobile_analytics_app_region'],\n\t\t\t},\n\t\t};\n\t\tamplifyConfig.Analytics = Analytics;\n\t}\n\n\t// Auth\n\tif (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n\t\tamplifyConfig.Auth = {\n\t\t\tuserPoolId: config['aws_user_pools_id'],\n\t\t\tuserPoolWebClientId: config['aws_user_pools_web_client_id'],\n\t\t\tregion: config['aws_cognito_region'],\n\t\t\tidentityPoolId: config['aws_cognito_identity_pool_id'],\n\t\t\tidentityPoolRegion: config['aws_cognito_region'],\n\t\t\tmandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n\t\t};\n\t}\n\n\t// Storage\n\tlet storageConfig;\n\tif (config['aws_user_files_s3_bucket']) {\n\t\tstorageConfig = {\n\t\t\tAWSS3: {\n\t\t\t\tbucket: config['aws_user_files_s3_bucket'],\n\t\t\t\tregion: config['aws_user_files_s3_bucket_region'],\n\t\t\t\tdangerouslyConnectToHttpEndpointForTesting:\n\t\t\t\t\tconfig[\n\t\t\t\t\t\t'aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'\n\t\t\t\t\t],\n\t\t\t},\n\t\t};\n\t} else {\n\t\tstorageConfig = config ? config.Storage || config : {};\n\t}\n\n\t// Logging\n\tif (config['Logging']) {\n\t\tamplifyConfig.Logging = {\n\t\t\t...config['Logging'],\n\t\t\tregion: config['aws_project_region'],\n\t\t};\n\t}\n\n\t// Geo\n\tif (config['geo']) {\n\t\tamplifyConfig.Geo = Object.assign({}, config.geo);\n\t\tif (config.geo['amazon_location_service']) {\n\t\t\tamplifyConfig.Geo = {\n\t\t\t\tAmazonLocationService: config.geo['amazon_location_service'],\n\t\t\t};\n\t\t}\n\t}\n\n\tamplifyConfig.Analytics = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Analytics,\n\t\tconfig.Analytics\n\t);\n\tamplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n\tamplifyConfig.Storage = Object.assign({}, storageConfig);\n\tamplifyConfig.Logging = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Logging,\n\t\tconfig.Logging\n\t);\n\tlogger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n\treturn amplifyConfig;\n};\n\n/**\n * @deprecated use per-function export\n */\nexport class Parser {\n\tstatic parseMobilehubConfig = parseMobileHubConfig;\n}\n\n/**\n * @deprecated use per-function export\n */\nexport default Parser;\n"]},"metadata":{},"sourceType":"module"}