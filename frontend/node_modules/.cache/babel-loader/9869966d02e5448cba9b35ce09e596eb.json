{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\n\nvar IndexedDBAdapter =\n/** @class */\nfunction () {\n  function IndexedDBAdapter() {\n    this.dbName = DB_NAME;\n  }\n\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n\n          case 1:\n            isPrivate = _a.sent();\n\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2\n              /*return*/\n              , Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2\n              /*return*/\n              , Promise.resolve()];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return this.getStorename(namespace, modelName);\n  };\n\n  IndexedDBAdapter.prototype.getStorename = function (namespace, modelName) {\n    var storeName = namespace + \"_\" + modelName;\n    return storeName;\n  };\n\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 2];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 3:\n            _b.sent();\n\n            _b.label = 4;\n\n          case 4:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 5;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 7];\n            VERSION = 2;\n            _a = this;\n            return [4\n            /*yield*/\n            , idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, newStore, cursor, count, e_1_1, error_2;\n\n                  var e_1, _c;\n\n                  var _this = this;\n\n                  return __generator(this, function (_d) {\n                    switch (_d.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = _this.getStorename(namespaceName, modelName);\n\n                              var store = db.createObjectStore(storeName, {\n                                autoIncrement: true\n                              });\n                              var indexes = _this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n                              indexes.forEach(function (index) {\n                                return store.createIndex(index, index);\n                              });\n                              store.createIndex('byId', 'id', {\n                                unique: true\n                              });\n                            });\n                          });\n                          return [2\n                          /*return*/\n                          ];\n                        }\n\n                        if (!(oldVersion === 1 && newVersion === 2)) return [3\n                        /*break*/\n                        , 16];\n                        _d.label = 1;\n\n                      case 1:\n                        _d.trys.push([1, 14,, 15]);\n\n                        _d.label = 2;\n\n                      case 2:\n                        _d.trys.push([2, 11, 12, 13]);\n\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _d.label = 3;\n\n                      case 3:\n                        if (!!_b.done) return [3\n                        /*break*/\n                        , 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        newStore = db.createObjectStore(storeName, {\n                          keyPath: undefined,\n                          autoIncrement: true\n                        });\n                        newStore.createIndex('byId', 'id', {\n                          unique: true\n                        });\n                        return [4\n                        /*yield*/\n                        , origStore.openCursor()];\n\n                      case 4:\n                        cursor = _d.sent();\n                        count = 0;\n                        _d.label = 5;\n\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3\n                        /*break*/\n                        , 8]; // we don't pass key, since they are all new entries in the new store\n\n                        return [4\n                        /*yield*/\n                        , newStore.put(cursor.value)];\n\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _d.sent();\n\n                        return [4\n                        /*yield*/\n                        , cursor.continue()];\n\n                      case 7:\n                        cursor = _d.sent();\n                        count++;\n                        return [3\n                        /*break*/\n                        , 5];\n\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _d.label = 9;\n\n                      case 9:\n                        _b = _a.next();\n                        return [3\n                        /*break*/\n                        , 3];\n\n                      case 10:\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 11:\n                        e_1_1 = _d.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n\n                        return [7\n                        /*endfinally*/\n                        ];\n\n                      case 13:\n                        return [3\n                        /*break*/\n                        , 15];\n\n                      case 14:\n                        error_2 = _d.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n\n                      case 15:\n                        return [2\n                        /*return*/\n                        ];\n\n                      case 16:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 6:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byId');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byId');\n            }\n\n            return [4\n            /*yield*/\n            , index.get(id)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, tx, store, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, store_1, id, fromDB_1, opType, key, e_2_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n\n              var storeName = _this.getStorename(namespaceName, modelName);\n\n              set.add(storeName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4\n            /*yield*/\n            , this._get(store, model.id)];\n\n          case 2:\n            fromDB = _b.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 11, 12, 17]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n            store_1 = tx.objectStore(storeName_1);\n            id = item.id;\n            return [4\n            /*yield*/\n            , this._get(store_1, id)];\n\n          case 6:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            if (!(id === model.id || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , store_1.index('byId').getKey(item.id)];\n\n          case 7:\n            key = _b.sent();\n            return [4\n            /*yield*/\n            , store_1.put(item, key)];\n\n          case 8:\n            _b.sent();\n\n            result.push([instance, opType]);\n            _b.label = 9;\n\n          case 9:\n            return [3\n            /*break*/\n            , 4];\n\n          case 10:\n            return [3\n            /*break*/\n            , 17];\n\n          case 11:\n            e_2_1 = _b.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 17];\n\n          case 12:\n            _b.trys.push([12,, 15, 16]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 13:\n            _b.sent();\n\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 16];\n\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 18:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n\n    var e_3, _a, e_4, _b, e_5, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, storeName, store, modelConstructor_1, _d, recordItem, getByfield, connectionRecord, e_4_1, recordItem, connectionRecord, e_5_1, e_3_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return _this.getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n            if (connectionStoreNames.length === 0) {\n              return [2\n              /*return*/\n              , records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 34, 35, 40]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 33];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName;\n            storeName = this.getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 4];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 30];\n            }\n\n            return [3\n            /*break*/\n            , 31];\n\n          case 4:\n            _e.trys.push([4, 10, 11, 16]);\n\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , records_1.next()];\n\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3\n            /*break*/\n            , 9];\n            recordItem = records_1_1.value;\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            if (!recordItem[getByfield]) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this._get(store, recordItem[getByfield])];\n\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 5];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(records_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 32];\n\n          case 17:\n            _e.trys.push([17, 23, 24, 29]);\n\n            records_2 = __asyncValues(records);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , records_2.next()];\n\n          case 19:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3\n            /*break*/\n            , 22];\n            recordItem = records_2_1.value;\n            if (!recordItem[targetName]) return [3\n            /*break*/\n            , 21];\n            return [4\n            /*yield*/\n            , this._get(store, recordItem[targetName])];\n\n          case 20:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 21;\n\n          case 21:\n            return [3\n            /*break*/\n            , 18];\n\n          case 22:\n            return [3\n            /*break*/\n            , 29];\n\n          case 23:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 29];\n\n          case 24:\n            _e.trys.push([24,, 27, 28]);\n\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3\n            /*break*/\n            , 26];\n            return [4\n            /*yield*/\n            , _c.call(records_2)];\n\n          case 25:\n            _e.sent();\n\n            _e.label = 26;\n\n          case 26:\n            return [3\n            /*break*/\n            , 28];\n\n          case 27:\n            if (e_5) throw e_5.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [3\n            /*break*/\n            , 32];\n\n          case 30:\n            // TODO: Lazy loading\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            exhaustiveCheck(relation.relationType);\n            return [3\n            /*break*/\n            , 32];\n\n          case 32:\n            return [3\n            /*break*/\n            , 2];\n\n          case 33:\n            return [3\n            /*break*/\n            , 40];\n\n          case 34:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 40];\n\n          case 35:\n            _e.trys.push([35,, 38, 39]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 37];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 36:\n            _e.sent();\n\n            _e.label = 37;\n\n          case 37:\n            return [3\n            /*break*/\n            , 39];\n\n          case 38:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 39:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [2\n            /*return*/\n            , records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, queryById, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            queryById = predicates && this.idFromPredicate(predicates);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryById) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getById(storeName, queryById)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!hasSort) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      if (hasPagination) {\n                        return [2\n                        /*return*/\n                        , this.enginePagination(storeName, pagination)];\n                      }\n\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 2:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getById = function (storeName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._get(storeName, id)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.idFromPredicate = function (predicates) {\n    var predicateObjs = predicates.predicates;\n    var idPredicate = predicateObjs.length === 1 && predicateObjs.find(function (p) {\n      return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq';\n    });\n    return idPredicate && idPredicate.operand;\n  };\n\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n\n      var _a = pagination.page,\n          page = _a === void 0 ? 0 : _a,\n          _b = pagination.limit,\n          limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n\n    return records;\n  };\n\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3\n            /*break*/\n            , 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName).objectStore(storeName).openCursor()];\n\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , cursor.advance(initialRecord)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n\n          case 4:\n            if (!(cursor && cursor.value)) return [3\n            /*break*/\n            , 6];\n            pageResults.push(cursor.value);\n\n            if (hasLimit && pageResults.length === limit) {\n              return [3\n              /*break*/\n              , 6];\n            }\n\n            return [4\n            /*yield*/\n            , cursor.continue()];\n\n          case 5:\n            cursor = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 6:\n            result = pageResults;\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, tx, store, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 4:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 6:\n            _a.sent(); // Delete all\n\n\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n\n          case 7:\n            // Delete all\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 8:\n            return [3\n            /*break*/\n            , 17];\n\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4\n            /*yield*/\n            , this._get(store, model.id)];\n\n          case 10:\n            fromDB = _a.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 11:\n            _a.sent();\n\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 12:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 13:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 14:\n            _a.sent();\n\n            _a.label = 15;\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 16:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 17:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n\n    var e_6, _a, e_7, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, e_7_1, e_6_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 22, 23, 28]);\n\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , deleteQueue_1.next()];\n\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3\n            /*break*/\n            , 21];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n\n          case 4:\n            _c.trys.push([4, 14, 15, 20]);\n\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 13];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , store.index('byId').getKey(item['id'])];\n\n          case 7:\n            key = _c.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            return [4\n            /*yield*/\n            , store.index('byId').getKey(item.toString())];\n\n          case 9:\n            key = _c.sent();\n            _c.label = 10;\n\n          case 10:\n            if (!(key !== undefined)) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , store.delete(key)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 5];\n\n          case 13:\n            return [3\n            /*break*/\n            , 20];\n\n          case 14:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 20];\n\n          case 15:\n            _c.trys.push([15,, 18, 19]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 17];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 16:\n            _c.sent();\n\n            _c.label = 17;\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [3\n            /*break*/\n            , 2];\n\n          case 21:\n            return [3\n            /*break*/\n            , 28];\n\n          case 22:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 28];\n\n          case 23:\n            _c.trys.push([23,, 26, 27]);\n\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3\n            /*break*/\n            , 25];\n            return [4\n            /*yield*/\n            , _a.call(deleteQueue_1)];\n\n          case 24:\n            _c.sent();\n\n            _c.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 27];\n\n          case 26:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 27:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_8, _a, e_9, _b, e_10, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, fieldName, modelName, targetName, storeName, index, _d, model, hasOneIndex, hasOneCustomField, value, recordToDelete, e_9_1, model, childrenArray, e_10_1, e_8_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 35, 36, 41]);\n\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_2.next()];\n\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3\n            /*break*/\n            , 34];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, fieldName = rel.fieldName, modelName = rel.modelName, targetName = rel.targetName;\n            storeName = this.getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 31];\n            }\n\n            return [3\n            /*break*/\n            , 32];\n\n          case 3:\n            _e.trys.push([3, 10, 11, 16]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 9];\n            model = models_1_1.value;\n            hasOneIndex = index || 'byId';\n            hasOneCustomField = targetName in model;\n            value = hasOneCustomField ? model[targetName] : model.id;\n            if (!value) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(value)];\n\n          case 6:\n            recordToDelete = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 4];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_9) throw e_9.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 33];\n\n          case 17:\n            _e.trys.push([17, 24, 25, 30]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 19:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 23];\n            model = models_2_1.value;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(model['id'])];\n\n          case 20:\n            childrenArray = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 21:\n            _e.sent();\n\n            _e.label = 22;\n\n          case 22:\n            return [3\n            /*break*/\n            , 18];\n\n          case 23:\n            return [3\n            /*break*/\n            , 30];\n\n          case 24:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 30];\n\n          case 25:\n            _e.trys.push([25,, 28, 29]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 27];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 26:\n            _e.sent();\n\n            _e.label = 27;\n\n          case 27:\n            return [3\n            /*break*/\n            , 29];\n\n          case 28:\n            if (e_10) throw e_10.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 30:\n            return [3\n            /*break*/\n            , 33];\n\n          case 31:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 33];\n\n          case 32:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 33];\n\n          case 33:\n            return [3\n            /*break*/\n            , 1];\n\n          case 34:\n            return [3\n            /*break*/\n            , 41];\n\n          case 35:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 41];\n\n          case 36:\n            _e.trys.push([36,, 39, 40]);\n\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3\n            /*break*/\n            , 38];\n            return [4\n            /*yield*/\n            , _a.call(relations_2)];\n\n          case 37:\n            _e.sent();\n\n            _e.label = 38;\n\n          case 38:\n            return [3\n            /*break*/\n            , 40];\n\n          case 39:\n            if (e_8) throw e_8.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 41:\n            deleteQueue.push({\n              storeName: this.getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            this.db.close();\n            return [4\n            /*yield*/\n            , idb.deleteDB(this.dbName)];\n\n          case 2:\n            _a.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_1, this_1, items_2, items_2_1, item, e_11_1;\n\n      var e_11, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n\n            _loop_1 = function (item) {\n              var connectedModels, id, _deleted, index, key, instance;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    connectedModels = traverseModel(modelConstructor.name, this_1.modelInstanceCreator(modelConstructor, item), this_1.schema.namespaces[this_1.namespaceResolver(modelConstructor)], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    id = item.id, _deleted = item._deleted;\n                    index = store.index('byId');\n                    return [4\n                    /*yield*/\n                    , index.getKey(id)];\n\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3\n                    /*break*/\n                    , 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      return instance.id === id;\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4\n                    /*yield*/\n                    , store.put(instance, key)];\n\n                  case 2:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3\n                    /*break*/\n                    , 5];\n                    return [4\n                    /*yield*/\n                    , store.delete(key)];\n\n                  case 4:\n                    _a.sent();\n\n                    _a.label = 5;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n\n          case 3:\n            if (!!items_2_1.done) return [3\n            /*break*/\n            , 6];\n            item = items_2_1.value;\n            return [5\n            /*yield**/\n            , _loop_1(item)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            items_2_1 = items_2.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            e_11_1 = _b.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_11) throw e_11.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [4\n            /*yield*/\n            , txn.done];\n\n          case 10:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  return IndexedDBAdapter;\n}();\n\nexport default new IndexedDBAdapter();","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\IndexedDBAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport {\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n} from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\texhaustiveCheck,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tsortCompareFunction,\n} from '../../util';\nimport { Adapter } from './index';\n\nconst logger = new Logger('DataStore');\n\nconst DB_NAME = 'amplify-datastore';\n\nclass IndexedDBAdapter implements Adapter {\n\tprivate schema: InternalSchema;\n\tprivate namespaceResolver: NamespaceResolver;\n\tprivate modelInstanceCreator: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName: (\n\t\tnamsespaceName: string,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db: idb.IDBPDatabase;\n\tprivate initPromise: Promise<void>;\n\tprivate resolve: (value?: any) => void;\n\tprivate reject: (value?: any) => void;\n\tprivate dbName: string = DB_NAME;\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn this.getStorename(namespace, modelName);\n\t}\n\n\tprivate getStorename(namespace: string, modelName: string) {\n\t\tconst storeName = `${namespace}_${modelName}`;\n\n\t\treturn storeName;\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tsessionId?: string\n\t) {\n\t\tawait this.checkPrivate();\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t}\n\t\tif (sessionId) {\n\t\t\tthis.dbName = `${DB_NAME}-${sessionId}`;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tconst VERSION = 2;\n\t\t\t\tthis.db = await idb.openDB(this.dbName, VERSION, {\n\t\t\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\t\t\tconst store = db.createObjectStore(storeName, {\n\t\t\t\t\t\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships[\n\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t].indexes;\n\t\t\t\t\t\t\t\t\tindexes.forEach(index => store.createIndex(index, index));\n\n\t\t\t\t\t\t\t\t\tstore.createIndex('byId', 'id', { unique: true });\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (oldVersion === 1 && newVersion === 2) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\t\t\t// create new store with original name\n\t\t\t\t\t\t\t\t\tconst newStore = db.createObjectStore(storeName, {\n\t\t\t\t\t\t\t\t\t\tkeyPath: undefined,\n\t\t\t\t\t\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tnewStore.createIndex('byId', 'id', { unique: true });\n\n\t\t\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tprivate async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tid: string\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byId');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byId');\n\t\t}\n\n\t\tconst result = await index.get(id);\n\n\t\treturn result;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[this.namespaceResolver(modelConstructor)],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName\n\t\t);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\treturn { storeName, item, instance };\n\t\t\t}\n\t\t);\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\t\tconst store = tx.objectStore(storeName);\n\n\t\tconst fromDB = await this._get(store, model.id);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst { id } = item;\n\n\t\t\tconst fromDB = <T>await this._get(store, id);\n\t\t\tconst opType: OpType =\n\t\t\t\tfromDB === undefined ? OpType.INSERT : OpType.UPDATE;\n\n\t\t\t// Even if the parent is an INSERT, the child might not be, so we need to get its key\n\t\t\tif (id === model.id || opType === OpType.INSERT) {\n\t\t\t\tconst key = await store.index('byId').getKey(item.id);\n\t\t\t\tawait store.put(item, key);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: string,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships[srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn this.getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readonly');\n\n\t\tfor await (const relation of relations) {\n\t\t\tconst { fieldName, modelName, targetName } = relation;\n\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\t\tnamespaceName,\n\t\t\t\tmodelName\n\t\t\t);\n\n\t\t\tswitch (relation.relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\tconst getByfield = recordItem[targetName] ? targetName : fieldName;\n\t\t\t\t\t\tif (!recordItem[getByfield]) break;\n\n\t\t\t\t\t\tconst connectionRecord = await this._get(\n\t\t\t\t\t\t\tstore,\n\t\t\t\t\t\t\trecordItem[getByfield]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\tif (recordItem[targetName]) {\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(\n\t\t\t\t\t\t\t\tstore,\n\t\t\t\t\t\t\t\trecordItem[targetName]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// TODO: Lazy loading\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relation.relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst queryById = predicates && this.idFromPredicate(predicates);\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = await (async () => {\n\t\t\tif (queryById) {\n\t\t\t\tconst record = await this.getById(storeName, queryById);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})();\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getById<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tid: string\n\t): Promise<T> {\n\t\tconst record = <T>await this._get(storeName, id);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate idFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs } = predicates;\n\t\tconst idPredicate =\n\t\t\tpredicateObjs.length === 1 &&\n\t\t\t(predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === 'id' && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>);\n\n\t\treturn idPredicate && idPredicate.operand;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\tif (pagination && records.length > 1) {\n\t\t\tif (pagination.sort) {\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\trecords.sort(compareFn);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst start = Math.max(0, page * limit) || 0;\n\n\t\t\tconst end = limit > 0 ? start + limit : records.length;\n\n\t\t\treturn records.slice(start, end);\n\t\t}\n\t\treturn records;\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tawait this.checkPrivate();\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor = modelOrModelConstructor;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\t// Delete all\n\t\t\t\tawait this.db\n\t\t\t\t\t.transaction([storeName], 'readwrite')\n\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t.clear();\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst tx = this.db.transaction([storeName], 'readwrite');\n\t\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\t\tconst fromDB = await this._get(store, model.id);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\tawait tx.done;\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t\t.relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t\t.relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: { storeName: string; items: T[] | IDBValidKey[] }[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tkey = await store.index('byId').getKey(item['id']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkey = await store.index('byId').getKey(item.toString());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: string,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst { relationType, fieldName, modelName, targetName } = rel;\n\t\t\tconst storeName = this.getStorename(nameSpace, modelName);\n\n\t\t\tconst index: string =\n\t\t\t\tgetIndex(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\tsrcModel\n\t\t\t\t) ||\n\t\t\t\t// if we were unable to find an index via relationTypes\n\t\t\t\t// i.e. for keyName connections, attempt to find one by the\n\t\t\t\t// associatedWith property\n\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName].indexes,\n\t\t\t\t\trel.associatedWith\n\t\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst hasOneIndex = index || 'byId';\n\n\t\t\t\t\t\tconst hasOneCustomField = targetName in model;\n\t\t\t\t\t\tconst value = hasOneCustomField ? model[targetName] : model.id;\n\t\t\t\t\t\tif (!value) break;\n\n\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t.index(hasOneIndex)\n\t\t\t\t\t\t\t\t.get(value)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst childrenArray = await this.db\n\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.index(index)\n\t\t\t\t\t\t\t.getAll(model['id']);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: this.getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db.close();\n\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined;\n\t\tthis.initPromise = undefined;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tawait this.checkPrivate();\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelConstructor.name,\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, item),\n\t\t\t\tthis.schema.namespaces[this.namespaceResolver(modelConstructor)],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst { id, _deleted } = item;\n\t\t\tconst index = store.index('byId');\n\t\t\tconst key = await index.getKey(id);\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(\n\t\t\t\t\t({ instance }) => instance.id === id\n\t\t\t\t);\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n}\n\nexport default new IndexedDBAdapter();\n"]},"metadata":{},"sourceType":"module"}