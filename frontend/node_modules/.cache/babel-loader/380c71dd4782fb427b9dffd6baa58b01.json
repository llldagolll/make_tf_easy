{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand } from '@aws-sdk/client-cognito-identity';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nvar CredentialsClass =\n/** @class */\nfunction () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {}; // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    return this._config;\n  };\n\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  }; // currently we only store the guest identity in local storage\n\n\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n  };\n\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2\n              /*return*/\n              , Promise.resolve(cred)];\n            }\n\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              return [2\n              /*return*/\n              , Promise.reject('No Auth module registered in Amplify')];\n            }\n\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3\n            /*break*/\n            , 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , Auth.currentUserPoolUser()];\n\n          case 2:\n            user_1 = _b.sent();\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4\n            /*yield*/\n            , refreshRequest];\n\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_1 = _b.sent(); // should not throw because user might just be on guest access or is authenticated through federation\n\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            , Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user,\n        token = federatedInfo.token,\n        identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at; // Make sure expires_at is in millis\n\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n\n    var refreshHandler = _a.refreshHandler,\n        provider = _a.provider,\n        user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000; // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n      if (!isNetworkError) {\n        _this.clear();\n      }\n\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2\n              /*return*/\n              , Promise.reject('region is not configured for getting the credentials')];\n            }\n\n            _b = this;\n            return [4\n            /*yield*/\n            , this._getGuestIdentityId()];\n\n          case 1:\n            identityId = _b._identityId = _c.sent();\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2\n                        /*return*/\n                        , credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\")) return [3\n                      /*break*/\n                      , 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4\n                      /*yield*/\n                      , this._removeGuestIdentityId()];\n\n                    case 1:\n                      _a.sent();\n\n                      credentialsProvider = function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4\n                                /*yield*/\n                                , cognitoClient.send(new GetIdCommand({\n                                  IdentityPoolId: identityPoolId\n                                }))];\n\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                cognitoIdentityParams = {\n                                  client: cognitoClient,\n                                  identityId: IdentityId\n                                };\n                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                return [2\n                                /*return*/\n                                , credentialsFromCognitoIdentity()];\n                            }\n                          });\n                        });\n                      };\n\n                      credentials = credentialsProvider().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      , this._loadCredentials(credentials, 'guest', false, null)];\n\n                    case 2:\n                      return [2\n                      /*return*/\n                      , e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this._getGuestIdentityId()];\n\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n\n            case 3:\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetCredentialsForIdentityCommand({\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              }))];\n\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3\n              /*break*/\n              , 6]; // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n\n              logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n              } // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\n\n              return [4\n              /*yield*/\n              , this._removeGuestIdentityId()];\n\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n\n              _c.label = 6;\n\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2\n              /*return*/\n              , {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this._setGuestIdentityId(credentials.identityId)];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n\n        this._storage.removeItem('aws-amplify-federatedInfo');\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n\n\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return CredentialsClass;\n}();\n\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);\n/**\n * @deprecated use named import\n */\n\nexport default Credentials;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\core\\src\\Credentials.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { ICredentials } from './types';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport {\n\tfromCognitoIdentity,\n\tFromCognitoIdentityParameters,\n\tfromCognitoIdentityPool,\n\tFromCognitoIdentityPoolParameters,\n} from '@aws-sdk/credential-provider-cognito-identity';\nimport {\n\tCognitoIdentityClient,\n\tGetIdCommand,\n\tGetCredentialsForIdentityCommand,\n} from '@aws-sdk/client-cognito-identity';\nimport { CredentialProvider } from '@aws-sdk/types';\n\nconst logger = new Logger('Credentials');\n\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nconst COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nexport class CredentialsClass {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate _identityId;\n\tprivate _nextCredentialsRefresh: Number;\n\n\t// Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\tAuth = undefined;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Credentials';\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = {\n\t\t\t\t...this._refreshHandlers,\n\t\t\t\t...refreshHandlers,\n\t\t\t};\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\t// currently we only store the guest identity in local storage\n\tprivate _getCognitoIdentityIdStorageKey(identityPoolId: string) {\n\t\treturn `${COGNITO_IDENTITY_KEY_PREFIX}${identityPoolId}`;\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tthis._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate async _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\n\t\t// Some use-cases don't require Auth for signing in, but use Credentials for guest users (e.g. Analytics)\n\t\t// Prefer locally scoped `Auth`, but fallback to registered `Amplify.Auth` global otherwise.\n\t\tconst { Auth = Amplify.Auth } = this;\n\n\t\tif (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n\t\t\treturn Promise.reject('No Auth module registered in Amplify');\n\t\t}\n\n\t\tif (!this._isExpired(cred) && this._isPastTTL()) {\n\t\t\tlogger.debug('ttl has passed but token is not yet expired');\n\t\t\ttry {\n\t\t\t\tconst user = await Auth.currentUserPoolUser();\n\t\t\t\tconst session = await Auth.currentSession();\n\t\t\t\tconst refreshToken = session.refreshToken;\n\t\t\t\tconst refreshRequest = new Promise((res, rej) => {\n\t\t\t\t\tuser.refreshSession(refreshToken, (err, data) => {\n\t\t\t\t\t\treturn err ? rej(err) : res(data);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tawait refreshRequest; // note that rejections will be caught and handled in the catch block.\n\t\t\t} catch (err) {\n\t\t\t\t// should not throw because user might just be on guest access or is authenticated through federation\n\t\t\t\tlogger.debug('Error attempting to refreshing the session', err);\n\t\t\t}\n\t\t}\n\t\treturn Auth.currentUserCredentials();\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user, token, identity_id } = federatedInfo;\n\t\tlet { expires_at } = federatedInfo;\n\n\t\t// Make sure expires_at is in millis\n\t\texpires_at =\n\t\t\tnew Date(expires_at).getFullYear() === 1970\n\t\t\t\t? expires_at * 1000\n\t\t\t\t: expires_at;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn this._providerRefreshWithRetry({\n\t\t\t\t\trefreshHandler: that._refreshHandlers[provider],\n\t\t\t\t\tprovider,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _providerRefreshWithRetry({ refreshHandler, provider, user }) {\n\t\tconst MAX_DELAY_MS = 10 * 1000;\n\t\t// refreshHandler will retry network errors, otherwise it will\n\t\t// return NonRetryableError to break out of jitteredExponentialRetry\n\t\treturn jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)\n\t\t\t.then(data => {\n\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\t\tprovider,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tuser,\n\t\t\t\t\tidentity_id: data.identity_id,\n\t\t\t\t\texpires_at: data.expires_at,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconst isNetworkError =\n\t\t\t\t\ttypeof e === 'string' &&\n\t\t\t\t\te.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n\t\t\t\tif (!isNetworkError) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t});\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('are these credentials expired?', credentials);\n\t\tconst ts = Date.now();\n\n\t\t/* returns date object.\n\t\t\thttps://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n\t\t*/\n\t\tconst { expiration } = credentials;\n\t\treturn expiration.getTime() <= ts;\n\t}\n\n\tprivate _isPastTTL(): boolean {\n\t\treturn this._nextCredentialsRefresh <= Date.now();\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlogger.debug('setting credentials for guest');\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t}\n\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst identityId = this._identityId = await this._getGuestIdentityId();\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identityId) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\t/*\n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t\t*/\n\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t};\n\n\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t);\n\n\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t};\n\n\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.name === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.`\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tawait this._removeGuestIdentityId();\n\n\t\t\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t\t\t};\n\n\t\t\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._loadCredentials(credentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identity_id) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId: identity_id,\n\t\t\t\tlogins,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityPoolParameters = {\n\t\t\t\tlogins,\n\t\t\t\tidentityPoolId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n\t\t}\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t/* \n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t*/\n\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t// try to fetch the local stored guest identity, if found, we will associate it with the logins\n\t\t\tconst guestIdentityId = await this._getGuestIdentityId();\n\n\t\t\tlet generatedOrRetrievedIdentityId;\n\t\t\tif (!guestIdentityId) {\n\t\t\t\t// for a first-time user, this will return a brand new identity\n\t\t\t\t// for a returning user, this will retrieve the previous identity assocaited with the logins\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\tLogins: logins,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tgeneratedOrRetrievedIdentityId = IdentityId;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tCredentials: {\n\t\t\t\t\tAccessKeyId,\n\t\t\t\t\tExpiration,\n\t\t\t\t\tSecretKey,\n\t\t\t\t\tSessionToken,\n\t\t\t\t},\n\t\t\t\t// single source of truth for the primary identity associated with the logins\n\t\t\t\t// only if a guest identity is used for a first-time user, that guest identity will become its primary identity\n\t\t\t\tIdentityId: primaryIdentityId,\n\t\t\t} = await cognitoClient.send(\n\t\t\t\tnew GetCredentialsForIdentityCommand({\n\t\t\t\t  IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n\t\t\t\t  Logins: logins,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis._identityId = primaryIdentityId;\n\t\t\tif (guestIdentityId) {\n\t\t\t\t// if guestIdentity is found and used by GetCredentialsForIdentity\n\t\t\t\t// it will be linked to the logins provided, and disqualified as an unauth identity\n\t\t\t\tlogger.debug(`The guest identity ${guestIdentityId} has been successfully linked to the logins`);\n\t\t\t\tif (guestIdentityId === primaryIdentityId) {\n\t\t\t\t\tlogger.debug(`The guest identity ${guestIdentityId} has become the primary identity`);\n\t\t\t\t}\n\t\t\t\t// remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\t\t\t\tawait this._removeGuestIdentityId();\n\t\t\t}\n\n\t\t\t// https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n\t\t\treturn {\n\t\t\t\taccessKeyId: AccessKeyId,\n\t\t\t\tsecretAccessKey: SecretKey,\n\t\t\t\tsessionToken: SessionToken,\n\t\t\t\texpiration: Expiration,\n\t\t\t\tidentityId: primaryIdentityId,\n\t\t\t  };\n\t\t};\n\n\t\tconst credentials = credentialsProvider().catch(async err => {\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials\n\t\t\t\t.then(async credentials => {\n\t\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\t\tif (this._identityId && !credentials.identityId) {\n\t\t\t\t\t\tcredentials['identityId'] = this._identityId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._credentials = credentials;\n\t\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\t\tthat._credentials_source = source;\n\t\t\t\t\tthat._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\t\t\t\t\tif (source === 'federated') {\n\t\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\t\tinfo.user\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (source === 'guest') {\n\t\t\t\t\t\tawait this._setGuestIdentityId(credentials.identityId);\n\t\t\t\t\t}\n\t\t\t\t\tres(that._credentials);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\t\tlogger.debug('Error loading credentials', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tlogger.debug('removing aws-amplify-federatedInfo from storage');\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\t}\n\n\t/* operations on local stored guest identity */\n\tprivate async _getGuestIdentityId(): Promise<string> {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\treturn this._storage.getItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _setGuestIdentityId(identityId: string) {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tthis._storage.setItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId),\n\t\t\t\tidentityId,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to cache guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _removeGuestIdentityId() {\n\t\tconst { identityPoolId } = this._config;\n\t\tlogger.debug(\n\t\t\t`removing ${this._getCognitoIdentityIdStorageKey(\n\t\t\t\tidentityPoolId\n\t\t\t)} from storage`\n\t\t);\n\t\tthis._storage.removeItem(\n\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t);\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nexport const Credentials = new CredentialsClass(null);\n\nAmplify.register(Credentials);\n\n/**\n * @deprecated use named import\n */\nexport default Credentials;\n"]},"metadata":{},"sourceType":"module"}