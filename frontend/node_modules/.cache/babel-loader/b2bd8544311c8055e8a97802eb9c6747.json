{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger, Parser } from '@aws-amplify/core';\nimport { AWSS3Provider } from './providers';\nimport axios from 'axios';\nimport { AWSS3UploadTask } from './providers/AWSS3UploadTask';\nvar logger = new Logger('StorageClass');\nvar DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\n   * Initialize Storage\n   * @param {Object} config - Configuration object for storage\n   */\n  function Storage() {\n    this._config = {};\n    this._pluggables = [];\n    this._cancelTokenSourceMap = new WeakMap();\n    logger.debug('Storage Options', this._config);\n    this.get = this.get.bind(this);\n    this.put = this.put.bind(this);\n    this.remove = this.remove.bind(this);\n    this.list = this.list.bind(this);\n  }\n\n  Storage.prototype.getModuleName = function () {\n    return 'Storage';\n  };\n  /**\n   * add plugin into Storage category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  Storage.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Storage') {\n      this._pluggables.push(pluggable);\n\n      var config = {};\n      config = pluggable.configure(this._config[pluggable.getProviderName()]);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Storage.prototype.getPluggable = function (providerName) {\n    var pluggable = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Storage.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * Configure Storage\n   * @param {Object} config - Configuration object for storage\n   * @return {Object} - Current configuration\n   */\n\n\n  Storage.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Storage');\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    var storageKeysFromConfig = Object.keys(amplifyConfig.Storage);\n    var storageArrayKeys = ['bucket', 'region', 'level', 'track', 'customPrefix', 'serverSideEncryption', 'SSECustomerAlgorithm', 'SSECustomerKey', 'SSECustomerKeyMD5', 'SSEKMSKeyId'];\n\n    var isInStorageArrayKeys = function (k) {\n      return storageArrayKeys.some(function (x) {\n        return x === k;\n      });\n    };\n\n    var checkConfigKeysFromArray = function (k) {\n      return k.find(function (k) {\n        return isInStorageArrayKeys(k);\n      });\n    };\n\n    if (storageKeysFromConfig && checkConfigKeysFromArray(storageKeysFromConfig) && !amplifyConfig.Storage[DEFAULT_PROVIDER]) {\n      amplifyConfig.Storage[DEFAULT_PROVIDER] = {};\n    }\n\n    Object.entries(amplifyConfig.Storage).map(function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      if (key && isInStorageArrayKeys(key) && value !== undefined) {\n        amplifyConfig.Storage[DEFAULT_PROVIDER][key] = value;\n        delete amplifyConfig.Storage[key];\n      }\n    }); // only update new values for each provider\n\n    Object.keys(amplifyConfig.Storage).forEach(function (providerName) {\n      if (typeof amplifyConfig.Storage[providerName] !== 'string') {\n        _this._config[providerName] = __assign(__assign({}, _this._config[providerName]), amplifyConfig.Storage[providerName]);\n      }\n    });\n\n    this._pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this._config[pluggable.getProviderName()]);\n    });\n\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AWSS3Provider());\n    }\n\n    return this._config;\n  };\n\n  Storage.prototype.getCancellableTokenSource = function () {\n    return axios.CancelToken.source();\n  };\n\n  Storage.prototype.updateRequestToBeCancellable = function (request, cancelTokenSource) {\n    this._cancelTokenSourceMap.set(request, cancelTokenSource);\n  };\n\n  Storage.prototype.isUploadTask = function (x) {\n    return typeof x !== 'undefined' && typeof x['pause'] === 'function' && typeof x['resume'] === 'function';\n  };\n\n  Storage.prototype.cancel = function (request, message) {\n    if (request instanceof AWSS3UploadTask) {\n      return request._cancel();\n    }\n\n    var cancelTokenSource = this._cancelTokenSourceMap.get(request);\n\n    if (cancelTokenSource) {\n      cancelTokenSource.cancel(message);\n    } else {\n      logger.debug('The request does not map to any cancel token');\n    }\n  };\n\n  Storage.prototype.copy = function (src, dest, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n\n    if (typeof prov.copy !== 'function') {\n      return Promise.reject(\".copy is not implemented on provider \" + prov.getProviderName());\n    }\n\n    var responsePromise = prov.copy(src, dest, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n    this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n    return responsePromise;\n  };\n\n  Storage.prototype.get = function (key, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n    var responsePromise = prov.get(key, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n    this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n    return responsePromise;\n  };\n\n  Storage.prototype.isCancelError = function (error) {\n    return axios.isCancel(error);\n  };\n\n  Storage.prototype.put = function (key, object, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n    var response = prov.put(key, object, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n\n    if (!this.isUploadTask(response)) {\n      this.updateRequestToBeCancellable(response, cancelTokenSource);\n    }\n\n    return response;\n  };\n\n  Storage.prototype.remove = function (key, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    return prov.remove(key, config);\n  };\n\n  Storage.prototype.list = function (path, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    return prov.list(path, config);\n  };\n\n  return Storage;\n}();\n\nexport { Storage };\n/**\n * @deprecated use named import\n */\n\nexport default Storage;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\storage\\src\\Storage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger, Parser } from '@aws-amplify/core';\nimport { AWSS3Provider } from './providers';\nimport {\n\tStorageCopySource,\n\tStorageCopyDestination,\n\tStorageGetConfig,\n\tStorageProvider,\n\tStoragePutConfig,\n\tStorageRemoveConfig,\n\tStorageListConfig,\n\tStorageCopyConfig,\n\tStorageProviderWithCopy,\n\tStorageGetOutput,\n\tStoragePutOutput,\n\tStorageRemoveOutput,\n\tStorageListOutput,\n\tStorageCopyOutput,\n\tUploadTask,\n} from './types';\nimport axios, { CancelTokenSource } from 'axios';\nimport { PutObjectCommandInput } from '@aws-sdk/client-s3';\nimport { AWSS3UploadTask } from './providers/AWSS3UploadTask';\n\nconst logger = new Logger('StorageClass');\n\nconst DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\nexport class Storage {\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\tprivate _pluggables: StorageProvider[];\n\n\t/**\n\t * Similar to the API module. This weak map allows users to cancel their in-flight request made using the Storage\n\t * module. For every get or put request, a unique cancel token will be generated and injected to it's underlying\n\t * AxiosHttpHandler. This map maintains a mapping of Request to CancelTokenSource. When .cancel is invoked, it will\n\t * attempt to retrieve it's corresponding cancelTokenSource and cancel the in-flight request.\n\t */\n\tprivate _cancelTokenSourceMap: WeakMap<Promise<any>, CancelTokenSource>;\n\n\t/**\n\t * @public\n\t */\n\tpublic vault: Storage;\n\n\t/**\n\t * Initialize Storage\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tthis._cancelTokenSourceMap = new WeakMap<Promise<any>, CancelTokenSource>();\n\t\tlogger.debug('Storage Options', this._config);\n\n\t\tthis.get = this.get.bind(this);\n\t\tthis.put = this.put.bind(this);\n\t\tthis.remove = this.remove.bind(this);\n\t\tthis.list = this.list.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Storage';\n\t}\n\n\t/**\n\t * add plugin into Storage category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: StorageProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Storage') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tlet config = {};\n\n\t\t\tconfig = pluggable.configure(this._config[pluggable.getProviderName()]);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string) {\n\t\tconst pluggable = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\treturn null;\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * Configure Storage\n\t * @param {Object} config - Configuration object for storage\n\t * @return {Object} - Current configuration\n\t */\n\tconfigure(config?) {\n\t\tlogger.debug('configure Storage');\n\t\tif (!config) return this._config;\n\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\n\t\tconst storageKeysFromConfig = Object.keys(amplifyConfig.Storage);\n\n\t\tconst storageArrayKeys = [\n\t\t\t'bucket',\n\t\t\t'region',\n\t\t\t'level',\n\t\t\t'track',\n\t\t\t'customPrefix',\n\t\t\t'serverSideEncryption',\n\t\t\t'SSECustomerAlgorithm',\n\t\t\t'SSECustomerKey',\n\t\t\t'SSECustomerKeyMD5',\n\t\t\t'SSEKMSKeyId',\n\t\t];\n\n\t\tconst isInStorageArrayKeys = (k: string) =>\n\t\t\tstorageArrayKeys.some(x => x === k);\n\t\tconst checkConfigKeysFromArray = (k: string[]) =>\n\t\t\tk.find(k => isInStorageArrayKeys(k));\n\n\t\tif (\n\t\t\tstorageKeysFromConfig &&\n\t\t\tcheckConfigKeysFromArray(storageKeysFromConfig) &&\n\t\t\t!amplifyConfig.Storage[DEFAULT_PROVIDER]\n\t\t) {\n\t\t\tamplifyConfig.Storage[DEFAULT_PROVIDER] = {};\n\t\t}\n\n\t\tObject.entries(amplifyConfig.Storage).map(([key, value]) => {\n\t\t\tif (key && isInStorageArrayKeys(key) && value !== undefined) {\n\t\t\t\tamplifyConfig.Storage[DEFAULT_PROVIDER][key] = value;\n\t\t\t\tdelete amplifyConfig.Storage[key];\n\t\t\t}\n\t\t});\n\n\t\t// only update new values for each provider\n\t\tObject.keys(amplifyConfig.Storage).forEach(providerName => {\n\t\t\tif (typeof amplifyConfig.Storage[providerName] !== 'string') {\n\t\t\t\tthis._config[providerName] = {\n\t\t\t\t\t...this._config[providerName],\n\t\t\t\t\t...amplifyConfig.Storage[providerName],\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this._config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AWSS3Provider());\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tprivate getCancellableTokenSource(): CancelTokenSource {\n\t\treturn axios.CancelToken.source();\n\t}\n\n\tprivate updateRequestToBeCancellable(\n\t\trequest: Promise<any>,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\tthis._cancelTokenSourceMap.set(request, cancelTokenSource);\n\t}\n\n\tprivate isUploadTask(x: unknown): x is UploadTask {\n\t\treturn (\n\t\t\ttypeof x !== 'undefined' &&\n\t\t\ttypeof x['pause'] === 'function' &&\n\t\t\ttypeof x['resume'] === 'function'\n\t\t);\n\t}\n\n\t/**\n\t * Cancels an inflight request\n\t *\n\t * @param request - The request to cancel\n\t * @param [message] - A message to include in the cancelation exception\n\t */\n\tpublic cancel(request: UploadTask, message?: string): Promise<boolean>;\n\tpublic cancel(request: Promise<any>, message?: string): void;\n\tpublic cancel(\n\t\trequest: Promise<any> | UploadTask,\n\t\tmessage?: string\n\t): void | Promise<boolean> {\n\t\tif (request instanceof AWSS3UploadTask) {\n\t\t\treturn request._cancel();\n\t\t}\n\t\tconst cancelTokenSource = this._cancelTokenSourceMap.get(\n\t\t\trequest as Promise<any>\n\t\t);\n\t\tif (cancelTokenSource) {\n\t\t\tcancelTokenSource.cancel(message);\n\t\t} else {\n\t\t\tlogger.debug('The request does not map to any cancel token');\n\t\t}\n\t}\n\n\t/**\n\t * Copies a file from src to dest.\n\t *\n\t * @param src - The source object.\n\t * @param dest - The destination object.\n\t * @param [config] - config for the Storage operation.\n\t * @return A promise resolves to the copied object's key.\n\t */\n\tpublic copy<T extends Record<string, any>>(\n\t\tsrc: StorageCopySource,\n\t\tdest: StorageCopyDestination,\n\t\tconfig?: StorageCopyConfig<T>\n\t): StorageCopyOutput<T>;\n\tpublic copy<T extends StorageProviderWithCopy = AWSS3Provider>(\n\t\tsrc: Parameters<T['copy']>[0],\n\t\tdest: Parameters<T['copy']>[1],\n\t\tconfig?: StorageCopyConfig<T>\n\t): StorageCopyOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageCopyOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tif (typeof prov.copy !== 'function') {\n\t\t\treturn Promise.reject(\n\t\t\t\t`.copy is not implemented on provider ${prov.getProviderName()}`\n\t\t\t) as StorageCopyOutput<T>;\n\t\t}\n\t\tconst responsePromise = prov.copy(src, dest, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tthis.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n\t\treturn responsePromise as StorageCopyOutput<T>;\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param key - key of the object\n\t * @param [config] - config for the Storage operation.\n\t * @return - A promise resolves to either a presigned url or the object\n\t */\n\t// Adding & { download?: boolean }, if not T extends { download: true } ? ... : ... will not work properly\n\tpublic get<T extends Record<string, any> & { download?: boolean }>(\n\t\tkey: string,\n\t\tconfig?: StorageGetConfig<T>\n\t): StorageGetOutput<T>;\n\tpublic get<\n\t\tT extends StorageProvider | { [key: string]: any; download?: boolean }\n\t>(key: string, config?: StorageGetConfig<T>): StorageGetOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageGetOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tconst responsePromise = prov.get(key, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tthis.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n\t\treturn responsePromise as StorageGetOutput<T>;\n\t}\n\n\tpublic isCancelError(error: any) {\n\t\treturn axios.isCancel(error);\n\t}\n\n\t/**\n\t * Put a file in storage bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in bucket\n\t * @param [config] - { level : private|protected|public, contentType: MIME Types,\n\t *  progressCallback: function }\n\t * @return - promise resolves to object on success\n\t */\n\tpublic put<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tobject: any,\n\t\tconfig?: StoragePutConfig<T>\n\t): StoragePutOutput<T>;\n\tpublic put<T extends StorageProvider = AWSS3Provider>(\n\t\tkey: string,\n\t\tobject: Omit<PutObjectCommandInput['Body'], 'ReadableStream' | 'Readable'>,\n\t\tconfig?: StoragePutConfig<T>\n\t): StoragePutOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StoragePutOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tconst response = prov.put(key, object, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tif (!this.isUploadTask(response)) {\n\t\t\tthis.updateRequestToBeCancellable(response, cancelTokenSource);\n\t\t}\n\t\treturn response as StoragePutOutput<T>;\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param key - key of the object\n\t * @param [config] - { level : private|protected|public }\n\t * @return - Promise resolves upon successful removal of the object\n\t */\n\tpublic remove<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tconfig?: StorageRemoveConfig<T>\n\t): StorageRemoveOutput<T>;\n\tpublic remove<T extends StorageProvider = AWSS3Provider>(\n\t\tkey: string,\n\t\tconfig?: StorageRemoveConfig<T>\n\t): StorageRemoveOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageRemoveOutput<T>;\n\t\t}\n\t\treturn prov.remove(key, config) as StorageRemoveOutput<T>;\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param path - the path that contains objects\n\t * @param [config] - { level : private|protected|public, maxKeys: NUMBER }\n\t * @return - Promise resolves to list of keys for all objects in path\n\t */\n\tpublic list<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tconfig?: StorageListConfig<T>\n\t): StorageListOutput<T>;\n\tpublic list<T extends StorageProvider = AWSS3Provider>(\n\t\tpath: string,\n\t\tconfig?: StorageListConfig<T>\n\t): StorageListOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageListOutput<T>;\n\t\t}\n\t\treturn prov.list(path, config) as StorageListOutput<T>;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default Storage;\n"]},"metadata":{},"sourceType":"module"}