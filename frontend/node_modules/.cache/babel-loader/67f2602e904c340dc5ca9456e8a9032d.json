{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport Auth from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { ModelAttributeAuthProvider, ModelAttributeAuthAllow } from '../types';\n\nfunction getProviderFromRule(rule) {\n  // private with no provider means userPools\n  if (rule.allow === 'private' && !rule.provider) {\n    return ModelAttributeAuthProvider.USER_POOLS;\n  } // public with no provider means apiKey\n\n\n  if (rule.allow === 'public' && !rule.provider) {\n    return ModelAttributeAuthProvider.API_KEY;\n  }\n\n  return rule.provider;\n}\n\nfunction sortAuthRulesWithPriority(rules) {\n  var allowSortPriority = [ModelAttributeAuthAllow.CUSTOM, ModelAttributeAuthAllow.OWNER, ModelAttributeAuthAllow.GROUPS, ModelAttributeAuthAllow.PRIVATE, ModelAttributeAuthAllow.PUBLIC];\n  var providerSortPriority = [ModelAttributeAuthProvider.FUNCTION, ModelAttributeAuthProvider.USER_POOLS, ModelAttributeAuthProvider.OIDC, ModelAttributeAuthProvider.IAM, ModelAttributeAuthProvider.API_KEY];\n  return __spread(rules).sort(function (a, b) {\n    if (a.allow === b.allow) {\n      return providerSortPriority.indexOf(getProviderFromRule(a)) - providerSortPriority.indexOf(getProviderFromRule(b));\n    }\n\n    return allowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow);\n  });\n}\n\nfunction getAuthRules(_a) {\n  var rules = _a.rules,\n      currentUser = _a.currentUser; // Using Set to ensure uniqueness\n\n  var authModes = new Set();\n  rules.forEach(function (rule) {\n    switch (rule.allow) {\n      case ModelAttributeAuthAllow.CUSTOM:\n        // custom with no provider -> function\n        if (!rule.provider || rule.provider === ModelAttributeAuthProvider.FUNCTION) {\n          authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        }\n\n        break;\n\n      case ModelAttributeAuthAllow.GROUPS:\n      case ModelAttributeAuthAllow.OWNER:\n        {\n          // We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n          if (currentUser) {\n            if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n              authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n            }\n          }\n\n          break;\n        }\n\n      case ModelAttributeAuthAllow.PRIVATE:\n        {\n          // We shouldn't attempt private if there isn't an authenticated user\n          if (currentUser) {\n            // private with no provider means userPools\n            if (!rule.provider || rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n              authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n            }\n          }\n\n          break;\n        }\n\n      case ModelAttributeAuthAllow.PUBLIC:\n        {\n          if (rule.provider === ModelAttributeAuthProvider.IAM) {\n            authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n          } else if (!rule.provider || rule.provider === ModelAttributeAuthProvider.API_KEY) {\n            // public with no provider means apiKey\n            authModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n          }\n\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n  return Array.from(authModes);\n}\n\nexport var multiAuthStrategy = function (_a) {\n  var schema = _a.schema,\n      modelName = _a.modelName;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var currentUser, e_1, attributes, authAttribute, sortedRules;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _b.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , Auth.currentAuthenticatedUser()];\n\n        case 1:\n          currentUser = _b.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          e_1 = _b.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          attributes = schema.namespaces.user.models[modelName].attributes;\n\n          if (attributes) {\n            authAttribute = attributes.find(function (attr) {\n              return attr.type === 'auth';\n            });\n\n            if (authAttribute.properties && authAttribute.properties.rules) {\n              sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);\n              return [2\n              /*return*/\n              , getAuthRules({\n                currentUser: currentUser,\n                rules: sortedRules\n              })];\n            }\n          }\n\n          return [2\n          /*return*/\n          , []];\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\datastore\\src\\authModeStrategies\\multiAuthStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import Auth from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport {\n\tAuthModeStrategy,\n\tModelAttributeAuthProperty,\n\tModelAttributeAuthProvider,\n\tModelAttributeAuthAllow,\n} from '../types';\n\nfunction getProviderFromRule(\n\trule: ModelAttributeAuthProperty\n): ModelAttributeAuthProvider {\n\t// private with no provider means userPools\n\tif (rule.allow === 'private' && !rule.provider) {\n\t\treturn ModelAttributeAuthProvider.USER_POOLS;\n\t}\n\t// public with no provider means apiKey\n\tif (rule.allow === 'public' && !rule.provider) {\n\t\treturn ModelAttributeAuthProvider.API_KEY;\n\t}\n\treturn rule.provider;\n}\n\nfunction sortAuthRulesWithPriority(rules: ModelAttributeAuthProperty[]) {\n\tconst allowSortPriority = [\n\t\tModelAttributeAuthAllow.CUSTOM,\n\t\tModelAttributeAuthAllow.OWNER,\n\t\tModelAttributeAuthAllow.GROUPS,\n\t\tModelAttributeAuthAllow.PRIVATE,\n\t\tModelAttributeAuthAllow.PUBLIC,\n\t];\n\tconst providerSortPriority = [\n\t\tModelAttributeAuthProvider.FUNCTION,\n\t\tModelAttributeAuthProvider.USER_POOLS,\n\t\tModelAttributeAuthProvider.OIDC,\n\t\tModelAttributeAuthProvider.IAM,\n\t\tModelAttributeAuthProvider.API_KEY,\n\t];\n\n\treturn [...rules].sort(\n\t\t(a: ModelAttributeAuthProperty, b: ModelAttributeAuthProperty) => {\n\t\t\tif (a.allow === b.allow) {\n\t\t\t\treturn (\n\t\t\t\t\tproviderSortPriority.indexOf(getProviderFromRule(a)) -\n\t\t\t\t\tproviderSortPriority.indexOf(getProviderFromRule(b))\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\tallowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow)\n\t\t\t);\n\t\t}\n\t);\n}\n\nfunction getAuthRules({\n\trules,\n\tcurrentUser,\n}: {\n\trules: ModelAttributeAuthProperty[];\n\tcurrentUser: unknown;\n}) {\n\t// Using Set to ensure uniqueness\n\tconst authModes = new Set<GRAPHQL_AUTH_MODE>();\n\n\trules.forEach(rule => {\n\t\tswitch (rule.allow) {\n\t\t\tcase ModelAttributeAuthAllow.CUSTOM:\n\t\t\t\t// custom with no provider -> function\n\t\t\t\tif (\n\t\t\t\t\t!rule.provider ||\n\t\t\t\t\trule.provider === ModelAttributeAuthProvider.FUNCTION\n\t\t\t\t) {\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ModelAttributeAuthAllow.GROUPS:\n\t\t\tcase ModelAttributeAuthAllow.OWNER: {\n\t\t\t\t// We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n\t\t\t\tif (currentUser) {\n\t\t\t\t\tif (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n\t\t\t\t\t} else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ModelAttributeAuthAllow.PRIVATE: {\n\t\t\t\t// We shouldn't attempt private if there isn't an authenticated user\n\t\t\t\tif (currentUser) {\n\t\t\t\t\t// private with no provider means userPools\n\t\t\t\t\tif (\n\t\t\t\t\t\t!rule.provider ||\n\t\t\t\t\t\trule.provider === ModelAttributeAuthProvider.USER_POOLS\n\t\t\t\t\t) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n\t\t\t\t\t} else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ModelAttributeAuthAllow.PUBLIC: {\n\t\t\t\tif (rule.provider === ModelAttributeAuthProvider.IAM) {\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n\t\t\t\t} else if (\n\t\t\t\t\t!rule.provider ||\n\t\t\t\t\trule.provider === ModelAttributeAuthProvider.API_KEY\n\t\t\t\t) {\n\t\t\t\t\t// public with no provider means apiKey\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn Array.from(authModes);\n}\n\nexport const multiAuthStrategy: AuthModeStrategy = async ({\n\tschema,\n\tmodelName,\n}) => {\n\tlet currentUser;\n\ttry {\n\t\tcurrentUser = await Auth.currentAuthenticatedUser();\n\t} catch (e) {\n\t\t// No current user\n\t}\n\n\tconst { attributes } = schema.namespaces.user.models[modelName];\n\n\tif (attributes) {\n\t\tconst authAttribute = attributes.find(attr => attr.type === 'auth');\n\n\t\tif (authAttribute.properties && authAttribute.properties.rules) {\n\t\t\tconst sortedRules = sortAuthRulesWithPriority(\n\t\t\t\tauthAttribute.properties.rules\n\t\t\t);\n\n\t\t\treturn getAuthRules({ currentUser, rules: sortedRules });\n\t\t}\n\t}\n\treturn [];\n};\n"]},"metadata":{},"sourceType":"module"}