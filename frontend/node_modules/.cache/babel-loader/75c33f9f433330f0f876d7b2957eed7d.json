{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\n\nvar AWSAppSyncProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncProvider, _super);\n\n  function AWSAppSyncProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._topicClient = new Map();\n    _this._topicAlias = new Map();\n    return _this;\n  }\n\n  Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n    get: function () {\n      throw new Error('Not supported');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncProvider';\n  };\n\n  AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n    var _this = this;\n\n    var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n      var _b = __read(_a, 2),\n          c = _b[1];\n\n      return c.clientId === clientId;\n    }).map(function (_a) {\n      var _b = __read(_a, 1),\n          t = _b[0];\n\n      return t;\n    });\n    topicsForClient.forEach(function (t) {\n      return _this._cleanUpForTopic(t);\n    });\n  };\n\n  AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n    this._topicClient.delete(topic);\n\n    this._topicAlias.delete(topic);\n  };\n\n  AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n        var _b = __read(_a, 2),\n            c = _b[1];\n\n        return c.clientId === clientId;\n      }).map(function (_a) {\n        var _b = __read(_a, 1),\n            t = _b[0];\n\n        return t;\n      });\n      topicsForClient.forEach(function (topic) {\n        if (_this._topicObservers.has(topic)) {\n          _this._topicObservers.get(topic).forEach(function (obs) {\n            if (!obs.closed) {\n              obs.error(args);\n            }\n          });\n\n          _this._topicObservers.delete(topic);\n        }\n      });\n\n      this._cleanUp(clientId);\n    }\n  };\n\n  AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n\n          case 1:\n            client = _a.sent();\n            return [4\n            /*yield*/\n            , _super.prototype.disconnect.call(this, clientId)];\n\n          case 2:\n            _a.sent();\n\n            this._cleanUp(clientId);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var result = new Observable(function (observer) {\n      var targetTopics = [].concat(topics);\n      logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mqttConnections, newSubscriptions, newAliases, map;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                // Add these topics to map\n                targetTopics.forEach(function (t) {\n                  if (!_this._topicObservers.has(t)) {\n                    _this._topicObservers.set(t, new Set());\n                  }\n\n                  _this._topicObservers.get(t).add(observer);\n                });\n                _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                  var _b = __read(_a, 2),\n                      alias = _b[0],\n                      v = _b[1];\n\n                  return [v.topic, alias];\n                }); // Merge new aliases with old ones\n\n                this._topicAlias = new Map(__spread(Array.from(this._topicAlias.entries()), newAliases));\n                map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                  var connectionInfoForTopic = mqttConnections.find(function (c) {\n                    return c.topics.indexOf(elem) > -1;\n                  });\n\n                  if (connectionInfoForTopic) {\n                    var clientId = connectionInfoForTopic.client,\n                        url = connectionInfoForTopic.url;\n\n                    if (!acc[clientId]) {\n                      acc[clientId] = {\n                        url: url,\n                        topics: new Set()\n                      };\n                    }\n\n                    acc[clientId].topics.add(elem);\n                  }\n\n                  return acc;\n                }, {})); // reconnect everything we have in the map\n\n                return [4\n                /*yield*/\n                , Promise.all(map.map(function (_a) {\n                  var _b = __read(_a, 2),\n                      clientId = _b[0],\n                      _c = _b[1],\n                      url = _c.url,\n                      topics = _c.topics;\n\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var client, err_1;\n\n                    var _this = this;\n\n                    return __generator(this, function (_d) {\n                      switch (_d.label) {\n                        case 0:\n                          client = null;\n                          _d.label = 1;\n\n                        case 1:\n                          _d.trys.push([1, 3,, 4]);\n\n                          return [4\n                          /*yield*/\n                          , this.connect(clientId, {\n                            clientId: clientId,\n                            url: url\n                          })];\n\n                        case 2:\n                          client = _d.sent();\n                          return [3\n                          /*break*/\n                          , 4];\n\n                        case 3:\n                          err_1 = _d.sent();\n                          observer.error({\n                            message: 'Failed to connect',\n                            error: err_1\n                          });\n                          observer.complete();\n                          return [2\n                          /*return*/\n                          , undefined];\n\n                        case 4:\n                          // subscribe to all topics for this client\n                          // store topic-client mapping\n                          topics.forEach(function (topic) {\n                            if (client.isConnected()) {\n                              client.subscribe(topic);\n\n                              _this._topicClient.set(topic, client);\n                            }\n                          });\n                          return [2\n                          /*return*/\n                          , client];\n                      }\n                    });\n                  });\n                }))];\n\n              case 1:\n                // reconnect everything we have in the map\n                _b.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        targetTopics.forEach(function (t) {\n          var client = _this._topicClient.get(t);\n\n          if (client && client.isConnected()) {\n            client.unsubscribe(t);\n\n            _this._topicClient.delete(t);\n\n            if (!Array.from(_this._topicClient.values()).some(function (c) {\n              return c === client;\n            })) {\n              _this.disconnect(client.clientId);\n            }\n          }\n\n          _this._topicObservers.delete(t);\n        });\n      };\n    });\n    return Observable.from(result).map(function (value) {\n      var topic = _this.getTopicForValue(value);\n\n      var alias = _this._topicAlias.get(topic);\n\n      value.data = Object.entries(value.data).reduce(function (obj, _a) {\n        var _b = __read(_a, 2),\n            origKey = _b[0],\n            val = _b[1];\n\n        return obj[alias || origKey] = val, obj;\n      }, {});\n      return value;\n    });\n  };\n\n  return AWSAppSyncProvider;\n}(MqttOverWSProvider);\n\nexport { AWSAppSyncProvider };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\AWSAppSyncProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { Client } from 'paho-mqtt';\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\n\nconst logger = new Logger('AWSAppSyncProvider');\n\nexport class AWSAppSyncProvider extends MqttOverWSProvider {\n\tprotected get endpoint() {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncProvider';\n\t}\n\n\tpublic async publish(topics: string[] | string, msg: any, options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\tprivate _cleanUp(clientId: string) {\n\t\tconst topicsForClient = Array.from(this._topicClient.entries())\n\t\t\t.filter(([, c]) => c.clientId === clientId)\n\t\t\t.map(([t]) => t);\n\n\t\ttopicsForClient.forEach(t => this._cleanUpForTopic(t));\n\t}\n\n\tprivate _cleanUpForTopic(topic) {\n\t\tthis._topicClient.delete(topic);\n\t\tthis._topicAlias.delete(topic);\n\t}\n\n\tpublic onDisconnect({ clientId, errorCode, ...args }) {\n\t\tif (errorCode !== 0) {\n\t\t\tconst topicsForClient = Array.from(this._topicClient.entries())\n\t\t\t\t.filter(([, c]) => c.clientId === clientId)\n\t\t\t\t.map(([t]) => t);\n\n\t\t\ttopicsForClient.forEach(topic => {\n\t\t\t\tif (this._topicObservers.has(topic)) {\n\t\t\t\t\tthis._topicObservers.get(topic).forEach(obs => {\n\t\t\t\t\t\tif (!obs.closed) {\n\t\t\t\t\t\t\tobs.error(args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cleanUp(clientId);\n\t\t}\n\t}\n\n\tprivate _topicClient: Map<string, Client> = new Map();\n\n\tprivate _topicAlias: Map<string, string> = new Map();\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId, () => null);\n\n\t\tawait super.disconnect(clientId);\n\n\t\tthis._cleanUp(clientId);\n\t}\n\n\tsubscribe(topics: string[] | string, options: any = {}): Observable<any> {\n\t\tconst result = new Observable<any>(observer => {\n\t\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n\t\t\t(async () => {\n\t\t\t\t// Add these topics to map\n\t\t\t\ttargetTopics.forEach(t => {\n\t\t\t\t\tif (!this._topicObservers.has(t)) {\n\t\t\t\t\t\tthis._topicObservers.set(t, new Set());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._topicObservers.get(t).add(observer);\n\t\t\t\t});\n\n\t\t\t\tconst { mqttConnections = [], newSubscriptions } = options;\n\n\t\t\t\t// creates a map of {\"topic\": \"alias\"}\n\t\t\t\tconst newAliases = Object.entries(\n\t\t\t\t\tnewSubscriptions\n\t\t\t\t).map(([alias, v]: [string, { topic: string }]) => [v.topic, alias]);\n\n\t\t\t\t// Merge new aliases with old ones\n\t\t\t\tthis._topicAlias = new Map([\n\t\t\t\t\t...Array.from(this._topicAlias.entries()),\n\t\t\t\t\t...(newAliases as [string, string][]),\n\t\t\t\t]);\n\n\t\t\t\t// group by urls\n\t\t\t\tconst map: [\n\t\t\t\t\tstring,\n\t\t\t\t\t{ url: string; topics: Set<string> }\n\t\t\t\t][] = Object.entries(\n\t\t\t\t\ttargetTopics.reduce((acc, elem) => {\n\t\t\t\t\t\tconst connectionInfoForTopic = mqttConnections.find(\n\t\t\t\t\t\t\tc => c.topics.indexOf(elem) > -1\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (connectionInfoForTopic) {\n\t\t\t\t\t\t\tconst { client: clientId, url } = connectionInfoForTopic;\n\n\t\t\t\t\t\t\tif (!acc[clientId]) {\n\t\t\t\t\t\t\t\tacc[clientId] = {\n\t\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t\t\ttopics: new Set(),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tacc[clientId].topics.add(elem);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}, {})\n\t\t\t\t);\n\n\t\t\t\t// reconnect everything we have in the map\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tmap.map(async ([clientId, { url, topics }]) => {\n\t\t\t\t\t\t// connect to new client\n\t\t\t\t\t\tlet client = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tclient = await this.connect(clientId, {\n\t\t\t\t\t\t\t\tclientId,\n\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tobserver.error({ message: 'Failed to connect', error: err });\n\t\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// subscribe to all topics for this client\n\t\t\t\t\t\t// store topic-client mapping\n\t\t\t\t\t\ttopics.forEach(topic => {\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.subscribe(topic);\n\n\t\t\t\t\t\t\t\tthis._topicClient.set(topic, client);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn client;\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tlogger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n\t\t\t\ttargetTopics.forEach(t => {\n\t\t\t\t\tconst client = this._topicClient.get(t);\n\n\t\t\t\t\tif (client && client.isConnected()) {\n\t\t\t\t\t\tclient.unsubscribe(t);\n\t\t\t\t\t\tthis._topicClient.delete(t);\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!Array.from(this._topicClient.values()).some(c => c === client)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.disconnect(client.clientId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._topicObservers.delete(t);\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\treturn Observable.from(result).map(value => {\n\t\t\tconst topic = this.getTopicForValue(value);\n\t\t\tconst alias = this._topicAlias.get(topic);\n\n\t\t\tvalue.data = Object.entries(value.data).reduce(\n\t\t\t\t(obj, [origKey, val]) => (\n\t\t\t\t\t(obj[(alias || origKey) as string] = val), obj\n\t\t\t\t),\n\t\t\t\t{}\n\t\t\t);\n\n\t\t\treturn value;\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}