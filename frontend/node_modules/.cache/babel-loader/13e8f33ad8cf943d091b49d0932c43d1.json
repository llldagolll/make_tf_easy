{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\nvar DataStoreConnectivity =\n/** @class */\nfunction () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n\n    return new Observable(function (observer) {\n      _this.observer = observer; // Will be used to forward socket connection changes, enhancing Reachability\n\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n\n        _this.unsubscribe();\n      };\n    });\n  };\n\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\n\nexport default DataStoreConnectivity;","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\datastore\\src\\sync\\datastoreConnectivity.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,UAAP,MAA0C,mBAA1C;AACA,SAAS,aAAa,IAAI,MAA1B,QAAwC,mBAAxC;AACA,SAAS,mBAAT,QAAoC,yBAApC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,WAAX,CAAf;AAEA,IAAM,eAAe,GAAG,IAAxB,C,CAA8B;;AAO9B,IAAA,qBAAA;AAAA;AAAA,YAAA;AAKC,WAAA,qBAAA,GAAA;AACC,SAAK,gBAAL,GAAwB;AACvB,MAAA,MAAM,EAAE;AADe,KAAxB;AAGA;;AAED,EAAA,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,KAAK,QAAT,EAAmB;AAClB,YAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACA;;AACD,WAAO,IAAI,UAAJ,CAAe,UAAA,QAAA,EAAQ;AAC7B,MAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB,CAD6B,CAE7B;;AAEA,MAAA,KAAI,CAAC,YAAL,GAAoB,mBAAmB,CAAC,SAApB,CAA8B,UAAC,EAAD,EAAW;YAAR,MAAA,GAAA,EAAA,CAAA,M;AACpD,QAAA,KAAI,CAAC,gBAAL,CAAsB,MAAtB,GAA+B,MAA/B;;AAEA,YAAM,cAAc,GAAA,QAAA,CAAA,EAAA,EAAQ,KAAI,CAAC,gBAAb,CAApB,CAH4D,CAGP;;;AAErD,QAAA,QAAQ,CAAC,IAAT,CAAc,cAAd;AACA,OANmB,CAApB;AAQA,aAAO,YAAA;AACN,QAAA,YAAY,CAAC,KAAI,CAAC,OAAN,CAAZ;;AACA,QAAA,KAAI,CAAC,WAAL;AACA,OAHD;AAIA,KAhBM,CAAP;AAiBA,GArBD;;AAuBA,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACC,QAAI,KAAK,YAAT,EAAuB;AACtB,MAAA,YAAY,CAAC,KAAK,OAAN,CAAZ;AACA,WAAK,YAAL,CAAkB,WAAlB;AACA;AACD,GALD;;AAOA,EAAA,qBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,KAAK,QAAL,IAAiB,OAAO,KAAK,QAAL,CAAc,IAArB,KAA8B,UAAnD,EAA+D;AAC9D,WAAK,QAAL,CAAc,IAAd,CAAmB;AAAE,QAAA,MAAM,EAAE;AAAV,OAAnB,EAD8D,CACvB;;AAEvC,WAAK,OAAL,GAAe,UAAU,CAAC,YAAA;AACzB,YAAM,cAAc,GAAA,QAAA,CAAA,EAAA,EAAQ,KAAI,CAAC,gBAAb,CAApB,CADyB,CAC4B;;;AACrD,QAAA,KAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,cAAnB;AACA,OAHwB,EAGtB,eAHsB,CAAzB,CAH8D,CAMzC;AACrB;AACD,GATD;;AAUD,SAAA,qBAAA;AAAC,CAnDD,EAAA","sourcesContent":["import Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\n\nconst logger = new Logger('DataStore');\n\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\ntype ConnectionStatus = {\n\t// Might add other params in the future\n\tonline: boolean;\n};\n\nexport default class DataStoreConnectivity {\n\tprivate connectionStatus: ConnectionStatus;\n\tprivate observer: ZenObservable.SubscriptionObserver<ConnectionStatus>;\n\tprivate subscription: ZenObservable.Subscription;\n\tprivate timeout: ReturnType<typeof setTimeout>;\n\tconstructor() {\n\t\tthis.connectionStatus = {\n\t\t\tonline: false,\n\t\t};\n\t}\n\n\tstatus(): Observable<ConnectionStatus> {\n\t\tif (this.observer) {\n\t\t\tthrow new Error('Subscriber already exists');\n\t\t}\n\t\treturn new Observable(observer => {\n\t\t\tthis.observer = observer;\n\t\t\t// Will be used to forward socket connection changes, enhancing Reachability\n\n\t\t\tthis.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n\t\t\t\tthis.connectionStatus.online = online;\n\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\n\t\t\t\tobserver.next(observerResult);\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.unsubscribe();\n\t\t\t};\n\t\t});\n\t}\n\n\tunsubscribe() {\n\t\tif (this.subscription) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.subscription.unsubscribe();\n\t\t}\n\t}\n\n\tsocketDisconnected() {\n\t\tif (this.observer && typeof this.observer.next === 'function') {\n\t\t\tthis.observer.next({ online: false }); // Notify network issue from the socket\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\t\t\t\tthis.observer.next(observerResult);\n\t\t\t}, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}