{"ast":null,"code":"import { exhaustiveCheck } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n} // This symbol is not used at runtime, only its type (unique symbol)\n\nexport var PredicateAll = Symbol('A predicate that matches all records');\n\nvar Predicates =\n/** @class */\nfunction () {\n  function Predicates() {}\n\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\n\nexport { Predicates };\n\nvar ModelPredicateCreator =\n/** @class */\nfunction () {\n  function ModelPredicateCreator() {}\n\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              }; // Create a new recorder\n\n              var tmpPredicateRecorder = new Proxy({}, handler); // Set the recorder group\n\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group); // Apply the predicates to the recorder (this is the step that records the changes)\n\n              newPredicate(tmpPredicateRecorder); // Push the group to the top-level recorder\n\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n\n            return result_1;\n\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelPredicateCreator.createForId = function (modelDefinition, id) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n  };\n\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\n\nexport { ModelPredicateCreator };","map":{"version":3,"sources":["C:\\Users\\owner\\prog\\make_tf_easy\\frontend\\node_modules\\@aws-amplify\\datastore\\src\\predicates\\index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAllOperators,\n\tModelPredicate,\n\tPersistentModel,\n\tPredicateExpression,\n\tPredicateGroups,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport { exhaustiveCheck } from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\tprivate static createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<ModelPredicate<T>>;\n\t\tconst predicate = new Proxy(\n\t\t\t{} as ModelPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(\n\t\t\t\t\t_target,\n\t\t\t\t\tpropertyKey,\n\t\t\t\t\treceiver: ModelPredicate<T>\n\t\t\t\t): PredicateExpression<T, any> {\n\t\t\t\t\tconst groupType = propertyKey as keyof PredicateGroups<T>;\n\n\t\t\t\t\tswitch (groupType) {\n\t\t\t\t\t\tcase 'and':\n\t\t\t\t\t\tcase 'or':\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\t\t\tnewPredicate: (criteria: ModelPredicate<T>) => ModelPredicate<T>\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tconst group: PredicatesGroup<T> = {\n\t\t\t\t\t\t\t\t\ttype: groupType,\n\t\t\t\t\t\t\t\t\tpredicates: [],\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Create a new recorder\n\t\t\t\t\t\t\t\tconst tmpPredicateRecorder = new Proxy(\n\t\t\t\t\t\t\t\t\t{} as ModelPredicate<T>,\n\t\t\t\t\t\t\t\t\thandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Set the recorder group\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\t\t\t\t\t\t\ttmpPredicateRecorder,\n\t\t\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Apply the predicates to the recorder (this is the step that records the changes)\n\t\t\t\t\t\t\t\tnewPredicate(tmpPredicateRecorder);\n\n\t\t\t\t\t\t\t\t// Push the group to the top-level recorder\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t\t\t.predicates.push(group);\n\n\t\t\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\texhaustiveCheck(groupType, false);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\toperator: keyof AllOperators,\n\t\t\t\t\t\toperand: any\n\t\t\t\t\t) => {\n\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t.predicates.push({ field, operator, operand });\n\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tconst group: PredicatesGroup<T> = {\n\t\t\ttype: 'and',\n\t\t\tpredicates: [],\n\t\t};\n\t\tModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\texisting: ProducerModelPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n\n\tstatic createForId<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tid: string\n\t) {\n\t\treturn ModelPredicateCreator.createPredicateBuilder<T>(modelDefinition).id(\n\t\t\t'eq',\n\t\t\t<any>id\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}